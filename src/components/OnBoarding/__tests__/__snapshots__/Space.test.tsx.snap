// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing  1`] = `
<Router
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
>
  <Space>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iuJeZd",
              "isStatic": false,
              "lastClassName": "cRelAb",
              "rules": Array [
                "
  @media (min-width: 1064px) {
    margin: 0 auto;
    padding: 0 20px;
    width: 1024px;
  }
  @media (min-width: 768px) and (max-width: 1063px) {
    margin: 0;
    padding: 0 20px;
  }
  @media (max-width: 767px) {
    margin: 0;
    padding: 0 10px;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iuJeZd",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-iuJeZd cRelAb"
        >
          <styled.h1>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-cMhqgX",
                    "isStatic": false,
                    "lastClassName": "hGqtIC",
                    "rules": Array [
                      "
  color: #404042;
  font-size: 40px;
  font-weight: 200;
",
                    ],
                  },
                  "displayName": "styled.h1",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-cMhqgX",
                  "target": "h1",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <h1
                className="sc-cMhqgX hGqtIC"
              >
                ONBOARDING_SPACE_TITLE
              </h1>
            </StyledComponent>
          </styled.h1>
          <Header>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-hrWEMg",
                      "isStatic": false,
                      "lastClassName": "cocUZQ",
                      "rules": Array [
                        "
  display: flex;
  flex-direction: row;
  margin-bottom: 20px;
  @media ",
                        "(max-width: 767px)",
                        " {
    flex-direction: column;
  }
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-hrWEMg",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-hrWEMg cocUZQ"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-eTuwsz",
                            "isStatic": false,
                            "lastClassName": "eJzRwN",
                            "rules": Array [
                              "
  flex: 0 0 274px;
  @media ",
                              "(max-width: 767px)",
                              " {
    flex: 0 0 auto;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-eTuwsz",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-eTuwsz eJzRwN"
                      >
                        <styled.h2>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-hXRMBi",
                                  "isStatic": false,
                                  "lastClassName": "hgdaDf",
                                  "rules": Array [
                                    "
  height: 21px;
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  line-height: 21px;
  margin-top: 1em;
  margin-bottom: 0.3em;
",
                                  ],
                                },
                                "displayName": "styled.h2",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-hXRMBi",
                                "target": "h2",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <h2
                              className="sc-hXRMBi hgdaDf"
                            >
                              ONBOARDING_BUILDING
                            </h2>
                          </StyledComponent>
                        </styled.h2>
                        <Styled(Styled(Component))
                          disableIcon={true}
                          onClick={[Function]}
                          selected={true}
                        >
                          <StyledComponent
                            disableIcon={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bwCtUz",
                                  "isStatic": false,
                                  "lastClassName": "iPJuVj",
                                  "rules": Array [
                                    "
  box-sizing: border-box;
  outline: none;
  border: ",
                                    [Function],
                                    ";
  border-radius: 2px;
  position: relative;
  background-color: ",
                                    [Function],
                                    ";
  min-width: 120px;
  color: #000000;
  opacity: ",
                                    [Function],
                                    ";
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
",
                                    "
  width: 100%;
  margin-bottom: 20px;
  text-align: left;
  height: 84px;
  padding: 10px 14px;
  cursor: pointer;
  overflow: hidden;
",
                                  ],
                                },
                                "displayName": "Styled(Styled(Component))",
                                "foldedComponentIds": Array [
                                  "sc-bwzfXH",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-bwCtUz",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            selected={true}
                          >
                            <Component
                              className="sc-bwzfXH sc-bwCtUz iPJuVj"
                              disableIcon={true}
                              onClick={[Function]}
                              selected={true}
                            >
                              <button
                                className="sc-bwzfXH sc-bwCtUz iPJuVj"
                                onClick={[Function]}
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-epnACN",
                                          "isStatic": false,
                                          "lastClassName": "emedRu",
                                          "rules": Array [
                                            "
  color: black;
  font-size: 16px;
  font-weight: 500;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 242px;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-epnACN",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-epnACN emedRu"
                                    />
                                  </StyledComponent>
                                </styled.div>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-iQNlJl",
                                          "isStatic": false,
                                          "lastClassName": "mkRf",
                                          "rules": Array [
                                            "
  color: #6d6c6c;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  display: -webkit-inline-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-iQNlJl",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-iQNlJl mkRf"
                                    >
                                      <HTMLContent
                                        html=""
                                      >
                                        <div
                                          dangerouslySetInnerHTML={
                                            Object {
                                              "__html": "",
                                            }
                                          }
                                        />
                                      </HTMLContent>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </button>
                            </Component>
                          </StyledComponent>
                        </Styled(Styled(Component))>
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gwVKww",
                            "isStatic": false,
                            "lastClassName": "gXuMmG",
                            "rules": Array [
                              "
  flex: 3;
  margin-left: 20px;
  @media ",
                              "(max-width: 767px)",
                              " {
    flex: 0 0 auto;
    margin-left: 0;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gwVKww",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-gwVKww gXuMmG"
                      />
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
          </Header>
          <SpaceSeparator>
            <IconSeparator
              icon={<Space />}
              label="ONBOARDING_SPACE"
            >
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gxMtzJ",
                        "isStatic": false,
                        "lastClassName": "iNwnUA",
                        "rules": Array [
                          "
  padding-top: 10px;
  padding-bottom: 18px;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gxMtzJ",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-gxMtzJ iNwnUA"
                  >
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-gzOgki",
                              "isStatic": false,
                              "lastClassName": "gXzWcq",
                              "rules": Array [
                                "
  display: flex;
  align-items: center;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-gzOgki",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-gzOgki gXzWcq"
                        >
                          <Space>
                            <svg
                              height={46}
                              width={50}
                            >
                              <title>
                                CE3DC8BC-3A35-4694-97BF-9ACA0DA5EAEA
                              </title>
                              <g
                                fill="none"
                                fillRule="nonzero"
                              >
                                <path
                                  d="M34.568 24.691L33.335 3.698c-.101-1.73-1.517-3.08-3.235-3.08h-5.53.86-5.53c-1.708 0-3.134 1.35-3.235 3.08l-1.233 20.993"
                                  fill="#EB8D00"
                                />
                                <path
                                  d="M9.825 24.001H.926A.93.93 0 000 24.93c0 .51.417.927.926.927h2.24v3.832c0 .51.418.928.927.928h2.29v14.136c0 .51.418.927.927.927h.916V30.595h33.456V45.66h.926a.93.93 0 00.927-.928V30.595h2.372a.93.93 0 00.927-.927v-3.832h2.24a.93.93 0 00.926-.928.93.93 0 00-.926-.927h-8.91l-1.088-6.033a2.85 2.85 0 00-2.8-2.345h-1.273l-.692-11.669A4.184 4.184 0 0030.136 0H19.864a4.191 4.191 0 00-4.175 3.934l-.692 11.67h-1.273a2.85 2.85 0 00-2.8 2.344L9.824 24zm35.145 4.75H5.02v-2.905H44.96v2.905h.01zm-8.704-11.282c.488 0 .895.346.987.825l1.028 5.697h-2.79l-.386-6.522h1.16zM17.532 4.066a2.341 2.341 0 012.332-2.2h10.262c1.232 0 2.26.967 2.332 2.2l1.191 19.935H16.341l1.191-19.935zm-4.795 14.228a.996.996 0 01.987-.825h1.161l-.387 6.522h-2.79l1.029-5.697z"
                                  fill="#000"
                                />
                                <path
                                  d="M20.682 11.111h8.636a.93.93 0 00.929-.926.93.93 0 00-.929-.926h-8.636a.93.93 0 00-.929.926.93.93 0 00.929.926zM34.264 34.586c.506 0 .921-.422.921-.935a.931.931 0 00-.92-.935H15.117a.931.931 0 00-.92.935c0 .513.414.935.92.935h8.663v4.088h-4.21a.931.931 0 00-.92.934v5.136c0 .514.414.935.92.935s.92-.421.92-.935v-4.2h3.3v4.2c0 .514.415.935.92.935.507 0 .921-.421.921-.935v-4.2h3.3v4.2c0 .514.414.935.92.935s.921-.421.921-.935v-5.136a.931.931 0 00-.92-.934h-4.21v-4.088h8.621z"
                                  fill="#000"
                                />
                              </g>
                            </svg>
                          </Space>
                          <Styled(styled.h2)>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-iyvyFf",
                                    "isStatic": false,
                                    "lastClassName": "cEFUkm",
                                    "rules": Array [
                                      "
  color: #404042;
  font-size: 28px;
  font-weight: 400;
",
                                      "
  margin: 0;
  padding: 25px 0 0 15px;
",
                                    ],
                                  },
                                  "displayName": "Styled(styled.h2)",
                                  "foldedComponentIds": Array [
                                    "sc-dqBHgY",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-iyvyFf",
                                  "target": "h2",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <h2
                                className="sc-dqBHgY sc-iyvyFf cEFUkm"
                              >
                                ONBOARDING_SPACE
                              </h2>
                            </StyledComponent>
                          </Styled(styled.h2)>
                        </div>
                      </StyledComponent>
                    </styled.div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-dfVpRl",
                              "isStatic": false,
                              "lastClassName": "ezAAKO",
                              "rules": Array [
                                "
  box-sizing: border-box;
  height: 1px;
  width: 100%;
  border: 1px solid #404042;
  border-top: 0;
  margin-top: 10px;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-dfVpRl",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-dfVpRl ezAAKO"
                        />
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </styled.div>
            </IconSeparator>
          </SpaceSeparator>
          <Type
            onClick={[Function]}
            selected="FLEX"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bxivhb",
                      "isStatic": false,
                      "lastClassName": "heZAUk",
                      "rules": Array [
                        "
  padding: 0%;
  margin-bottom: 50px;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bxivhb",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-bxivhb heZAUk"
                >
                  <styled.h4>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-htpNat",
                            "isStatic": false,
                            "lastClassName": "ezOBiL",
                            "rules": Array [
                              "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                            ],
                          },
                          "displayName": "styled.h4",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-htpNat",
                          "target": "h4",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h4
                        className="sc-htpNat ezOBiL"
                      >
                        ONBOARDING_TYPE_LEASE
                      </h4>
                    </StyledComponent>
                  </styled.h4>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ifAKCX",
                            "isStatic": false,
                            "lastClassName": "fbkNSP",
                            "rules": Array [
                              "
  display: flex;
  max-width: 360px;
  flex: 1;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ifAKCX",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-ifAKCX fbkNSP"
                      >
                        <Styled(Styled(Component))
                          isLeft={true}
                          onClick={[Function]}
                          selected={false}
                          testId="add-fixed"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gzVnrw",
                                  "isStatic": false,
                                  "lastClassName": "dcenbu",
                                  "rules": Array [
                                    "
  box-sizing: border-box;
  outline: none;
  border: ",
                                    [Function],
                                    ";
  border-radius: 2px;
  position: relative;
  background-color: ",
                                    [Function],
                                    ";
  min-width: 120px;
  color: #000000;
  opacity: ",
                                    [Function],
                                    ";
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
",
                                    "
  text-align: center;
  width: 47%
  padding: 28px 0;
  margin-right: ",
                                    [Function],
                                    ";
  :hover { ",
                                    [Function],
                                    "
",
                                  ],
                                },
                                "displayName": "Styled(Styled(Component))",
                                "foldedComponentIds": Array [
                                  "sc-bwzfXH",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-gzVnrw",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            isLeft={true}
                            onClick={[Function]}
                            selected={false}
                            testId="add-fixed"
                          >
                            <Component
                              className="sc-bwzfXH sc-gzVnrw iLZNNl"
                              isLeft={true}
                              onClick={[Function]}
                              selected={false}
                              testId="add-fixed"
                            >
                              <button
                                className="sc-bwzfXH sc-gzVnrw iLZNNl"
                                data-testid="add-fixed"
                                onClick={[Function]}
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-EHOje",
                                          "isStatic": false,
                                          "lastClassName": "fvXRgE",
                                          "rules": Array [
                                            "
  color: #000000;
  font-size: 16px;
  font-weight: 400;
  text-align: center;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-EHOje",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-EHOje fvXRgE"
                                    >
                                      ONBOARDING_TYPE_FIXED_STANDARD_OFFICE
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bZQynM",
                                          "isStatic": false,
                                          "lastClassName": "jBQPio",
                                          "rules": Array [
                                            "
  color: #828286;
  font-size: 14px;
  font-weight: 400;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bZQynM",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bZQynM jBQPio"
                                    >
                                      ONBOARDING_TYPE_FIXED_SUBTITLE
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </button>
                            </Component>
                          </StyledComponent>
                        </Styled(Styled(Component))>
                        <Styled(Styled(Component))
                          onClick={[Function]}
                          selected={true}
                          testId="add-flex"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gzVnrw",
                                  "isStatic": false,
                                  "lastClassName": "dcenbu",
                                  "rules": Array [
                                    "
  box-sizing: border-box;
  outline: none;
  border: ",
                                    [Function],
                                    ";
  border-radius: 2px;
  position: relative;
  background-color: ",
                                    [Function],
                                    ";
  min-width: 120px;
  color: #000000;
  opacity: ",
                                    [Function],
                                    ";
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
",
                                    "
  text-align: center;
  width: 47%
  padding: 28px 0;
  margin-right: ",
                                    [Function],
                                    ";
  :hover { ",
                                    [Function],
                                    "
",
                                  ],
                                },
                                "displayName": "Styled(Styled(Component))",
                                "foldedComponentIds": Array [
                                  "sc-bwzfXH",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-gzVnrw",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            selected={true}
                            testId="add-flex"
                          >
                            <Component
                              className="sc-bwzfXH sc-gzVnrw dcenbu"
                              onClick={[Function]}
                              selected={true}
                              testId="add-flex"
                            >
                              <button
                                className="sc-bwzfXH sc-gzVnrw dcenbu"
                                data-testid="add-flex"
                                onClick={[Function]}
                              >
                                <Styled(CheckCircleIcon)
                                  fontSize="default"
                                  htmlColor="#6CB9D5"
                                >
                                  <StyledComponent
                                    fontSize="default"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "compare": null,
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bdVaJa",
                                          "isStatic": false,
                                          "lastClassName": "bYrkLc",
                                          "rules": Array [
                                            "
  position: absolute;
  background-color: #ffffff;
  top: -11px;
  right: -11px;
  &.MuiSvgIcon-root {
    font-size: 1.5rem;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(CheckCircleIcon)",
                                        "foldedComponentIds": Array [],
                                        "muiName": "SvgIcon",
                                        "render": [Function],
                                        "styledComponentId": "sc-bdVaJa",
                                        "target": Object {
                                          "$$typeof": Symbol(react.memo),
                                          "compare": null,
                                          "displayName": "CheckCircleIcon",
                                          "muiName": "SvgIcon",
                                          "type": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          },
                                        },
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    htmlColor="#6CB9D5"
                                  >
                                    <ForwardRef
                                      className="sc-bdVaJa bYrkLc"
                                      fontSize="default"
                                      htmlColor="#6CB9D5"
                                    >
                                      <WithStyles(ForwardRef(SvgIcon))
                                        className="sc-bdVaJa bYrkLc"
                                        fontSize="default"
                                        htmlColor="#6CB9D5"
                                      >
                                        <ForwardRef(SvgIcon)
                                          className="sc-bdVaJa bYrkLc"
                                          classes={
                                            Object {
                                              "colorAction": "MuiSvgIcon-colorAction",
                                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                                              "colorError": "MuiSvgIcon-colorError",
                                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                              "root": "MuiSvgIcon-root",
                                            }
                                          }
                                          fontSize="default"
                                          htmlColor="#6CB9D5"
                                        >
                                          <svg
                                            aria-hidden="true"
                                            className="MuiSvgIcon-root sc-bdVaJa bYrkLc"
                                            color="#6CB9D5"
                                            focusable="false"
                                            role="presentation"
                                            viewBox="0 0 24 24"
                                          >
                                            <path
                                              d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                            />
                                          </svg>
                                        </ForwardRef(SvgIcon)>
                                      </WithStyles(ForwardRef(SvgIcon))>
                                    </ForwardRef>
                                  </StyledComponent>
                                </Styled(CheckCircleIcon)>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-EHOje",
                                          "isStatic": false,
                                          "lastClassName": "fvXRgE",
                                          "rules": Array [
                                            "
  color: #000000;
  font-size: 16px;
  font-weight: 400;
  text-align: center;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-EHOje",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-EHOje fvXRgE"
                                    >
                                      ONBOARDING_TYPE_FLEX_COWORKING
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bZQynM",
                                          "isStatic": false,
                                          "lastClassName": "jBQPio",
                                          "rules": Array [
                                            "
  color: #828286;
  font-size: 14px;
  font-weight: 400;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bZQynM",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bZQynM jBQPio"
                                    >
                                      ONBOARDING_TYPE_FLEX_SUBTITLE
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </button>
                            </Component>
                          </StyledComponent>
                        </Styled(Styled(Component))>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
          </Type>
          <SpaceForm
            space={
              Object {
                "availabilityFixed": 2020-01-01T00:00:00.000Z,
                "fitout": Array [
                  Object {
                    "amount": 1000,
                    "description": "FitOut1",
                    "name": "FitOut1",
                  },
                ],
                "fixedDesks": Object {
                  "availableFrom": 2020-01-01T00:00:00.000Z,
                  "currencyCode": "NOK",
                  "desks": 0,
                  "frequency": "Monthly",
                  "minLease": 0,
                  "price": 0,
                },
                "floorPlan": Array [],
                "hotDesks": Object {
                  "availableFrom": 2020-01-01T00:00:00.000Z,
                  "currencyCode": "NOK",
                  "desks": 0,
                  "frequency": "Monthly",
                  "minLease": 0,
                  "price": 0,
                },
                "id": "0",
                "images": Array [],
                "months": undefined,
                "servicedOffices": Array [],
                "spaceDescription": "",
                "spaceFloor": undefined,
                "spaceFloored": "",
                "spaceHighlights": "",
                "spaceMatterPort": "",
                "spaceName": "",
                "spaceRent": undefined,
                "spaceServices": undefined,
                "spaceServicesNotNegotiable": false,
                "spaceSize": undefined,
                "spaceSizeCommon": undefined,
                "status": 1,
                "type": "FLEX",
                "use": "",
              }
            }
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fYxtnH",
                      "isStatic": false,
                      "lastClassName": "ljjRmk",
                      "rules": Array [
                        "
  max-width: 516px;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-fYxtnH",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={
                  Object {
                    "current": <div
                      class="sc-fYxtnH ljjRmk"
                    >
                      <div
                        class="sc-jwKygS hMutZY"
                      >
                        <h3
                          class="sc-htoDjs sc-cmTdod extBTb"
                        >
                          ONBOARDING_SPACE_DETAILS_FLEX
                        </h3>
                        <div
                          class="sc-dnqmqq fabHwL sc-tilXH brOHYw"
                        >
                          <label
                            for="spaceName"
                          >
                            ONBOARDING_SPACE_NAME
                          </label>
                          <input
                            class="sc-iwsKbI bvnVDt"
                            id="spaceName"
                            placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                            type="text"
                            value=""
                          />
                          <div
                            class="sc-gZMcBi cEVqmM"
                          />
                        </div>
                        <div
                          class="sc-gqjmRU iqdjCw"
                        >
                          <label
                            for="spaceDescription"
                          >
                            ONBOARDING_SPACE_DESCRIPTION
                          </label>
                          <textarea
                            class="sc-VigVT dMRdKZ"
                            formats="bold,italic,list"
                            height="112"
                            id="spaceDescription"
                            modules="[object Object]"
                            placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                          />
                          <div
                            class="sc-jTzLTM dCNcrL"
                          />
                        </div>
                        <div
                          class="sc-gqjmRU iqdjCw"
                        >
                          <label
                            for="spaceHighlights"
                          >
                            ONBOARDING_SPACE_HIGHLIGHTS
                          </label>
                          <textarea
                            class="sc-VigVT dMRdKZ"
                            formats="bold,italic,list"
                            height="112"
                            id="spaceHighlights"
                            modules="[object Object]"
                            placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                          />
                          <div
                            class="sc-jTzLTM dCNcrL"
                          />
                        </div>
                      </div>
                      <div
                        class="sc-jwKygS hMutZY"
                      >
                        <div
                          class="sc-dnqmqq fabHwL sc-tilXH brOHYw"
                        >
                          <label
                            for="spaceMatterPort"
                          >
                            ONBOARDING_SPACE_MATTERPORT
                          </label>
                          <input
                            class="sc-iwsKbI bvnVDt"
                            id="spaceMatterPort"
                            type="text"
                            value=""
                          />
                          <div
                            class="sc-gZMcBi cEVqmM"
                          />
                        </div>
                      </div>
                    </div>,
                  }
                }
              >
                <div
                  className="sc-fYxtnH ljjRmk"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jwKygS",
                            "isStatic": false,
                            "lastClassName": "hMutZY",
                            "rules": Array [
                              "
  margin-bottom: 50px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jwKygS",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-jwKygS hMutZY"
                      >
                        <Styled(styled.h3)>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-cmTdod",
                                  "isStatic": false,
                                  "lastClassName": "extBTb",
                                  "rules": Array [
                                    "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                                    "
  margin-bottom: 0;
",
                                  ],
                                },
                                "displayName": "Styled(styled.h3)",
                                "foldedComponentIds": Array [
                                  "sc-htoDjs",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-cmTdod",
                                "target": "h3",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <h3
                              className="sc-htoDjs sc-cmTdod extBTb"
                            >
                              ONBOARDING_SPACE_DETAILS_FLEX
                            </h3>
                          </StyledComponent>
                        </Styled(styled.h3)>
                        <Styled(Input)
                          id="spaceName"
                          label="ONBOARDING_SPACE_NAME"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                          type="text"
                          value=""
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-tilXH",
                                  "isStatic": false,
                                  "lastClassName": "brOHYw",
                                  "rules": Array [
                                    "
  width: 100%;
  margin-top: 20px;
",
                                  ],
                                },
                                "displayName": "Styled(Input)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-tilXH",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="spaceName"
                            label="ONBOARDING_SPACE_NAME"
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                            type="text"
                            value=""
                          >
                            <Input
                              className="sc-tilXH brOHYw"
                              id="spaceName"
                              label="ONBOARDING_SPACE_NAME"
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                              type="text"
                              value=""
                            >
                              <styled.div
                                className="sc-tilXH brOHYw"
                              >
                                <StyledComponent
                                  className="sc-tilXH brOHYw"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dnqmqq",
                                        "isStatic": false,
                                        "lastClassName": "fabHwL",
                                        "rules": Array [
                                          "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dnqmqq",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-dnqmqq fabHwL sc-tilXH brOHYw"
                                  >
                                    <label
                                      htmlFor="spaceName"
                                    >
                                      ONBOARDING_SPACE_NAME
                                    </label>
                                    <styled.input
                                      id="spaceName"
                                      onChange={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                      type="text"
                                      value=""
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-iwsKbI",
                                              "isStatic": false,
                                              "lastClassName": "bvnVDt",
                                              "rules": Array [
                                                "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                [Function],
                                                ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                [Function],
                                                ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                [Function],
                                                ";
    border: 1px solid ",
                                                [Function],
                                                ";
  }
",
                                              ],
                                            },
                                            "displayName": "styled.input",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-iwsKbI",
                                            "target": "input",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        id="spaceName"
                                        onChange={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                        type="text"
                                        value=""
                                      >
                                        <input
                                          className="sc-iwsKbI bvnVDt"
                                          id="spaceName"
                                          onChange={[Function]}
                                          placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                          type="text"
                                          value=""
                                        />
                                      </StyledComponent>
                                    </styled.input>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-gZMcBi",
                                              "isStatic": false,
                                              "lastClassName": "cEVqmM",
                                              "rules": Array [
                                                "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-gZMcBi",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-gZMcBi cEVqmM"
                                        />
                                      </StyledComponent>
                                    </styled.div>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Input>
                          </StyledComponent>
                        </Styled(Input)>
                        <RichTextArea
                          id="spaceDescription"
                          label="ONBOARDING_SPACE_DESCRIPTION"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                          rows={4}
                          value=""
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-gqjmRU",
                                    "isStatic": false,
                                    "lastClassName": "iqdjCw",
                                    "rules": Array [
                                      "
  margin: 20px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-gqjmRU",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-gqjmRU iqdjCw"
                              >
                                <label
                                  htmlFor="spaceDescription"
                                >
                                  ONBOARDING_SPACE_DESCRIPTION
                                </label>
                                <Styled(ComponentToMock)
                                  formats={
                                    Array [
                                      "bold",
                                      "italic",
                                      "list",
                                    ]
                                  }
                                  height={112}
                                  id="spaceDescription"
                                  modules={
                                    Object {
                                      "toolbar": Array [
                                        Array [
                                          "bold",
                                          "italic",
                                        ],
                                        Array [
                                          Object {
                                            "list": "ordered",
                                          },
                                          Object {
                                            "list": "bullet",
                                          },
                                        ],
                                        Array [
                                          "clean",
                                        ],
                                      ],
                                    }
                                  }
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                  value=""
                                >
                                  <StyledComponent
                                    formats={
                                      Array [
                                        "bold",
                                        "italic",
                                        "list",
                                      ]
                                    }
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-VigVT",
                                          "isStatic": false,
                                          "lastClassName": "dMRdKZ",
                                          "rules": Array [
                                            "
  margin-top: 0;
  margin-bottom: 6px;
  resize: none;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                            [Function],
                                            ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  :focus {
    outline: 1px solid ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
  }
  .ql-toolbar.ql-snow {
    border: 1px solid ",
                                            [Function],
                                            ";
    border-radius: 3px 3px 0 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-container.ql-snow {
    border: 1px solid ",
                                            [Function],
                                            ";
    border-radius: 0 0 3px 3px;
    border-top: 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-editor {
    min-height: ",
                                            [Function],
                                            "px;
    background: white;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(ComponentToMock)",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-VigVT",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    height={112}
                                    id="spaceDescription"
                                    modules={
                                      Object {
                                        "toolbar": Array [
                                          Array [
                                            "bold",
                                            "italic",
                                          ],
                                          Array [
                                            Object {
                                              "list": "ordered",
                                            },
                                            Object {
                                              "list": "bullet",
                                            },
                                          ],
                                          Array [
                                            "clean",
                                          ],
                                        ],
                                      }
                                    }
                                    onChange={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                    value=""
                                  >
                                    <ComponentToMock
                                      className="sc-VigVT dMRdKZ"
                                      formats={
                                        Array [
                                          "bold",
                                          "italic",
                                          "list",
                                        ]
                                      }
                                      height={112}
                                      id="spaceDescription"
                                      modules={
                                        Object {
                                          "toolbar": Array [
                                            Array [
                                              "bold",
                                              "italic",
                                            ],
                                            Array [
                                              Object {
                                                "list": "ordered",
                                              },
                                              Object {
                                                "list": "bullet",
                                              },
                                            ],
                                            Array [
                                              "clean",
                                            ],
                                          ],
                                        }
                                      }
                                      onChange={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                      value=""
                                    >
                                      <textarea
                                        className="sc-VigVT dMRdKZ"
                                        formats={
                                          Array [
                                            "bold",
                                            "italic",
                                            "list",
                                          ]
                                        }
                                        height={112}
                                        id="spaceDescription"
                                        modules={
                                          Object {
                                            "toolbar": Array [
                                              Array [
                                                "bold",
                                                "italic",
                                              ],
                                              Array [
                                                Object {
                                                  "list": "ordered",
                                                },
                                                Object {
                                                  "list": "bullet",
                                                },
                                              ],
                                              Array [
                                                "clean",
                                              ],
                                            ],
                                          }
                                        }
                                        onChange={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                        value=""
                                      />
                                    </ComponentToMock>
                                  </StyledComponent>
                                </Styled(ComponentToMock)>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-jTzLTM",
                                          "isStatic": false,
                                          "lastClassName": "dCNcrL",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-jTzLTM",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-jTzLTM dCNcrL"
                                    />
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </RichTextArea>
                        <RichTextArea
                          id="spaceHighlights"
                          label="ONBOARDING_SPACE_HIGHLIGHTS"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                          rows={4}
                          value=""
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-gqjmRU",
                                    "isStatic": false,
                                    "lastClassName": "iqdjCw",
                                    "rules": Array [
                                      "
  margin: 20px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-gqjmRU",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-gqjmRU iqdjCw"
                              >
                                <label
                                  htmlFor="spaceHighlights"
                                >
                                  ONBOARDING_SPACE_HIGHLIGHTS
                                </label>
                                <Styled(ComponentToMock)
                                  formats={
                                    Array [
                                      "bold",
                                      "italic",
                                      "list",
                                    ]
                                  }
                                  height={112}
                                  id="spaceHighlights"
                                  modules={
                                    Object {
                                      "toolbar": Array [
                                        Array [
                                          "bold",
                                          "italic",
                                        ],
                                        Array [
                                          Object {
                                            "list": "ordered",
                                          },
                                          Object {
                                            "list": "bullet",
                                          },
                                        ],
                                        Array [
                                          "clean",
                                        ],
                                      ],
                                    }
                                  }
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                  value=""
                                >
                                  <StyledComponent
                                    formats={
                                      Array [
                                        "bold",
                                        "italic",
                                        "list",
                                      ]
                                    }
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-VigVT",
                                          "isStatic": false,
                                          "lastClassName": "dMRdKZ",
                                          "rules": Array [
                                            "
  margin-top: 0;
  margin-bottom: 6px;
  resize: none;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                            [Function],
                                            ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  :focus {
    outline: 1px solid ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
  }
  .ql-toolbar.ql-snow {
    border: 1px solid ",
                                            [Function],
                                            ";
    border-radius: 3px 3px 0 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-container.ql-snow {
    border: 1px solid ",
                                            [Function],
                                            ";
    border-radius: 0 0 3px 3px;
    border-top: 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-editor {
    min-height: ",
                                            [Function],
                                            "px;
    background: white;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(ComponentToMock)",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-VigVT",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    height={112}
                                    id="spaceHighlights"
                                    modules={
                                      Object {
                                        "toolbar": Array [
                                          Array [
                                            "bold",
                                            "italic",
                                          ],
                                          Array [
                                            Object {
                                              "list": "ordered",
                                            },
                                            Object {
                                              "list": "bullet",
                                            },
                                          ],
                                          Array [
                                            "clean",
                                          ],
                                        ],
                                      }
                                    }
                                    onChange={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                    value=""
                                  >
                                    <ComponentToMock
                                      className="sc-VigVT dMRdKZ"
                                      formats={
                                        Array [
                                          "bold",
                                          "italic",
                                          "list",
                                        ]
                                      }
                                      height={112}
                                      id="spaceHighlights"
                                      modules={
                                        Object {
                                          "toolbar": Array [
                                            Array [
                                              "bold",
                                              "italic",
                                            ],
                                            Array [
                                              Object {
                                                "list": "ordered",
                                              },
                                              Object {
                                                "list": "bullet",
                                              },
                                            ],
                                            Array [
                                              "clean",
                                            ],
                                          ],
                                        }
                                      }
                                      onChange={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                      value=""
                                    >
                                      <textarea
                                        className="sc-VigVT dMRdKZ"
                                        formats={
                                          Array [
                                            "bold",
                                            "italic",
                                            "list",
                                          ]
                                        }
                                        height={112}
                                        id="spaceHighlights"
                                        modules={
                                          Object {
                                            "toolbar": Array [
                                              Array [
                                                "bold",
                                                "italic",
                                              ],
                                              Array [
                                                Object {
                                                  "list": "ordered",
                                                },
                                                Object {
                                                  "list": "bullet",
                                                },
                                              ],
                                              Array [
                                                "clean",
                                              ],
                                            ],
                                          }
                                        }
                                        onChange={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                        value=""
                                      />
                                    </ComponentToMock>
                                  </StyledComponent>
                                </Styled(ComponentToMock)>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-jTzLTM",
                                          "isStatic": false,
                                          "lastClassName": "dCNcrL",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-jTzLTM",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-jTzLTM dCNcrL"
                                    />
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </RichTextArea>
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jwKygS",
                            "isStatic": false,
                            "lastClassName": "hMutZY",
                            "rules": Array [
                              "
  margin-bottom: 50px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jwKygS",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-jwKygS hMutZY"
                      >
                        <Styled(Input)
                          id="spaceMatterPort"
                          label="ONBOARDING_SPACE_MATTERPORT"
                          onChange={[Function]}
                          type="text"
                          value=""
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-tilXH",
                                  "isStatic": false,
                                  "lastClassName": "brOHYw",
                                  "rules": Array [
                                    "
  width: 100%;
  margin-top: 20px;
",
                                  ],
                                },
                                "displayName": "Styled(Input)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-tilXH",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="spaceMatterPort"
                            label="ONBOARDING_SPACE_MATTERPORT"
                            onChange={[Function]}
                            type="text"
                            value=""
                          >
                            <Input
                              className="sc-tilXH brOHYw"
                              id="spaceMatterPort"
                              label="ONBOARDING_SPACE_MATTERPORT"
                              onChange={[Function]}
                              type="text"
                              value=""
                            >
                              <styled.div
                                className="sc-tilXH brOHYw"
                              >
                                <StyledComponent
                                  className="sc-tilXH brOHYw"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dnqmqq",
                                        "isStatic": false,
                                        "lastClassName": "fabHwL",
                                        "rules": Array [
                                          "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dnqmqq",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-dnqmqq fabHwL sc-tilXH brOHYw"
                                  >
                                    <label
                                      htmlFor="spaceMatterPort"
                                    >
                                      ONBOARDING_SPACE_MATTERPORT
                                    </label>
                                    <styled.input
                                      id="spaceMatterPort"
                                      onChange={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-iwsKbI",
                                              "isStatic": false,
                                              "lastClassName": "bvnVDt",
                                              "rules": Array [
                                                "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                [Function],
                                                ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                [Function],
                                                ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                [Function],
                                                ";
    border: 1px solid ",
                                                [Function],
                                                ";
  }
",
                                              ],
                                            },
                                            "displayName": "styled.input",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-iwsKbI",
                                            "target": "input",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        id="spaceMatterPort"
                                        onChange={[Function]}
                                        type="text"
                                        value=""
                                      >
                                        <input
                                          className="sc-iwsKbI bvnVDt"
                                          id="spaceMatterPort"
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                                        />
                                      </StyledComponent>
                                    </styled.input>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-gZMcBi",
                                              "isStatic": false,
                                              "lastClassName": "cEVqmM",
                                              "rules": Array [
                                                "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-gZMcBi",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-gZMcBi cEVqmM"
                                        />
                                      </StyledComponent>
                                    </styled.div>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Input>
                          </StyledComponent>
                        </Styled(Input)>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jwKygS",
                      "isStatic": false,
                      "lastClassName": "hMutZY",
                      "rules": Array [
                        "
  margin-bottom: 50px;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jwKygS",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-jwKygS hMutZY"
                >
                  <SpaceAvailabilityFlex
                    setError={[Function]}
                    space={
                      Object {
                        "availabilityFixed": 2020-01-01T00:00:00.000Z,
                        "fitout": Array [
                          Object {
                            "amount": 1000,
                            "description": "FitOut1",
                            "name": "FitOut1",
                          },
                        ],
                        "fixedDesks": Object {
                          "availableFrom": 2020-01-01T00:00:00.000Z,
                          "currencyCode": "NOK",
                          "desks": 0,
                          "frequency": "Monthly",
                          "minLease": 0,
                          "price": 0,
                        },
                        "floorPlan": Array [],
                        "hotDesks": Object {
                          "availableFrom": 2020-01-01T00:00:00.000Z,
                          "currencyCode": "NOK",
                          "desks": 0,
                          "frequency": "Monthly",
                          "minLease": 0,
                          "price": 0,
                        },
                        "id": "0",
                        "images": Array [],
                        "months": undefined,
                        "servicedOffices": Array [],
                        "spaceDescription": "",
                        "spaceFloor": undefined,
                        "spaceFloored": "",
                        "spaceHighlights": "",
                        "spaceMatterPort": "",
                        "spaceName": "",
                        "spaceRent": undefined,
                        "spaceServices": undefined,
                        "spaceServicesNotNegotiable": false,
                        "spaceSize": undefined,
                        "spaceSizeCommon": undefined,
                        "status": 1,
                        "type": "FLEX",
                        "use": "",
                      }
                    }
                  >
                    <styled.h3>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-htoDjs",
                              "isStatic": false,
                              "lastClassName": "gisnSK",
                              "rules": Array [
                                "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                              ],
                            },
                            "displayName": "styled.h3",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-htoDjs",
                            "target": "h3",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <h3
                          className="sc-htoDjs gisnSK"
                        >
                          ONBOARDING_SPACE_AVAILABILITY_FLEX_TITLE
                        </h3>
                      </StyledComponent>
                    </styled.h3>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-csuQGl",
                              "isStatic": false,
                              "lastClassName": "bRipvG",
                              "rules": Array [
                                "
  max-width: 516px;
  box-sizing: border-box;
  display: flex;
  border-radius: 2px;
  background-color: #f4f4f4;
  padding: 20px;
  margin-bottom: 50px;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-csuQGl",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-csuQGl bRipvG"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-Rmtcm",
                                    "isStatic": false,
                                    "lastClassName": "LoJut",
                                    "rules": Array [
                                      "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-Rmtcm",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-Rmtcm LoJut"
                              >
                                <Styled(styled.h4)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-gipzik",
                                          "isStatic": false,
                                          "lastClassName": "iNpEIw",
                                          "rules": Array [
                                            "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                                            "
  margin-top: 0;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.h4)",
                                        "foldedComponentIds": Array [
                                          "sc-htpNat",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-gipzik",
                                        "target": "h4",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <h4
                                      className="sc-htpNat sc-gipzik iNpEIw"
                                    >
                                      ONBOARDING_SPACE_FLEX_HOT_DESKS
                                    </h4>
                                  </StyledComponent>
                                </Styled(styled.h4)>
                                <Input
                                  data-testid="hot-desks-desks"
                                  id="hot-desks-desks"
                                  label="ONBOARDING_SPACE_FLEX_DESKS"
                                  onChange={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "fabHwL",
                                            "rules": Array [
                                              "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-dnqmqq fabHwL"
                                      >
                                        <label
                                          htmlFor="hot-desks-desks"
                                        >
                                          ONBOARDING_SPACE_FLEX_DESKS
                                        </label>
                                        <styled.input
                                          data-testid="hot-desks-desks"
                                          id="hot-desks-desks"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <StyledComponent
                                            data-testid="hot-desks-desks"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "bvnVDt",
                                                  "rules": Array [
                                                    "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                    [Function],
                                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                    [Function],
                                                    ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                    [Function],
                                                    ";
    border: 1px solid ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.input",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "input",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="hot-desks-desks"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          >
                                            <input
                                              className="sc-iwsKbI bvnVDt"
                                              data-testid="hot-desks-desks"
                                              id="hot-desks-desks"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value=""
                                            />
                                          </StyledComponent>
                                        </styled.input>
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-gZMcBi",
                                                  "isStatic": false,
                                                  "lastClassName": "cEVqmM",
                                                  "rules": Array [
                                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-gZMcBi",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-gZMcBi cEVqmM"
                                            />
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Input>
                                <Styled(Component)
                                  data-testid="hot-desks-from"
                                  disablePast={true}
                                  id="hot-desks-availableFrom"
                                  label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                  onChange={[Function]}
                                  value={2020-01-01T00:00:00.000Z}
                                >
                                  <StyledComponent
                                    data-testid="hot-desks-from"
                                    disablePast={true}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-cSHVUG",
                                          "isStatic": false,
                                          "lastClassName": "fHtrqD",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                            [Function],
                                            ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(Component)",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-cSHVUG",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="hot-desks-availableFrom"
                                    label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                    onChange={[Function]}
                                    value={2020-01-01T00:00:00.000Z}
                                  >
                                    <Component
                                      className="sc-cSHVUG fHtrqD"
                                      data-testid="hot-desks-from"
                                      disablePast={true}
                                      id="hot-desks-availableFrom"
                                      label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                      onChange={[Function]}
                                      value={2020-01-01T00:00:00.000Z}
                                    >
                                      <styled.div
                                        className="sc-cSHVUG fHtrqD"
                                        focusOn={false}
                                      >
                                        <StyledComponent
                                          className="sc-cSHVUG fHtrqD"
                                          focusOn={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-jzJRlG",
                                                "isStatic": false,
                                                "lastClassName": "cXFhwX",
                                                "rules": Array [
                                                  "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-jzJRlG",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-jzJRlG cXFhwX sc-cSHVUG fHtrqD"
                                          >
                                            <label>
                                              ONBOARDING_SPACE_FLEX_AVAILABILITY
                                            </label>
                                            <MuiPickersUtilsProvider
                                              locale={
                                                Object {
                                                  "code": "en-GB",
                                                  "formatDistance": [Function],
                                                  "formatLong": Object {
                                                    "date": [Function],
                                                    "dateTime": [Function],
                                                    "time": [Function],
                                                  },
                                                  "formatRelative": [Function],
                                                  "localize": Object {
                                                    "day": [Function],
                                                    "dayPeriod": [Function],
                                                    "era": [Function],
                                                    "month": [Function],
                                                    "ordinalNumber": [Function],
                                                    "quarter": [Function],
                                                  },
                                                  "match": Object {
                                                    "day": [Function],
                                                    "dayPeriod": [Function],
                                                    "era": [Function],
                                                    "month": [Function],
                                                    "ordinalNumber": [Function],
                                                    "quarter": [Function],
                                                  },
                                                  "options": Object {
                                                    "firstWeekContainsDate": 4,
                                                    "weekStartsOn": 1,
                                                  },
                                                }
                                              }
                                              utils={[Function]}
                                            >
                                              <PickerWithState
                                                InputLabelProps={
                                                  Object {
                                                    "error": false,
                                                    "shrink": false,
                                                  }
                                                }
                                                allowKeyboardControl={true}
                                                autoOk={true}
                                                disablePast={true}
                                                disableToolbar={true}
                                                format="yyyy-MM-dd"
                                                id="hot-desks-availableFrom"
                                                inputVariant="outlined"
                                                invalidDateMessage="Invalid Date Format"
                                                keyboardIcon={
                                                  <img
                                                    alt="open calendar"
                                                    src="calendar.svg"
                                                  />
                                                }
                                                maxDate={2100-01-01T00:00:00.000Z}
                                                maxDateMessage="Date should not be after maximal date"
                                                minDate={1900-01-01T00:00:00.000Z}
                                                minDateMessage="Date should not be before minimal date"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                openTo="date"
                                                value={2020-01-01T00:00:00.000Z}
                                                variant="inline"
                                                views={
                                                  Array [
                                                    "year",
                                                    "date",
                                                  ]
                                                }
                                              >
                                                <Wrapper
                                                  DateInputProps={
                                                    Object {
                                                      "format": "yyyy-MM-dd",
                                                      "inputValue": "2020-01-01",
                                                      "onChange": [Function],
                                                      "openPicker": [Function],
                                                      "validationError": "",
                                                    }
                                                  }
                                                  InputComponent={[Function]}
                                                  InputLabelProps={
                                                    Object {
                                                      "error": false,
                                                      "shrink": false,
                                                    }
                                                  }
                                                  format="yyyy-MM-dd"
                                                  id="hot-desks-availableFrom"
                                                  inputVariant="outlined"
                                                  keyboardIcon={
                                                    <img
                                                      alt="open calendar"
                                                      src="calendar.svg"
                                                    />
                                                  }
                                                  onAccept={[Function]}
                                                  onBlur={[Function]}
                                                  onClear={[Function]}
                                                  onDismiss={[Function]}
                                                  onFocus={[Function]}
                                                  onSetToday={[Function]}
                                                  open={false}
                                                  variant="inline"
                                                >
                                                  <InlineWrapper
                                                    DateInputProps={
                                                      Object {
                                                        "format": "yyyy-MM-dd",
                                                        "inputValue": "2020-01-01",
                                                        "onChange": [Function],
                                                        "openPicker": [Function],
                                                        "validationError": "",
                                                      }
                                                    }
                                                    InputComponent={[Function]}
                                                    InputLabelProps={
                                                      Object {
                                                        "error": false,
                                                        "shrink": false,
                                                      }
                                                    }
                                                    format="yyyy-MM-dd"
                                                    id="hot-desks-availableFrom"
                                                    inputVariant="outlined"
                                                    keyboardIcon={
                                                      <img
                                                        alt="open calendar"
                                                        src="calendar.svg"
                                                      />
                                                    }
                                                    onAccept={[Function]}
                                                    onBlur={[Function]}
                                                    onClear={[Function]}
                                                    onDismiss={[Function]}
                                                    onFocus={[Function]}
                                                    onSetToday={[Function]}
                                                    open={false}
                                                  >
                                                    <KeyboardDateInput
                                                      InputLabelProps={
                                                        Object {
                                                          "error": false,
                                                          "shrink": false,
                                                        }
                                                      }
                                                      format="yyyy-MM-dd"
                                                      id="hot-desks-availableFrom"
                                                      inputRef={
                                                        Object {
                                                          "current": <input
                                                            aria-invalid="false"
                                                            class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                            id="hot-desks-availableFrom"
                                                            type="text"
                                                            value="2020-01-01"
                                                          />,
                                                        }
                                                      }
                                                      inputValue="2020-01-01"
                                                      inputVariant="outlined"
                                                      keyboardIcon={
                                                        <img
                                                          alt="open calendar"
                                                          src="calendar.svg"
                                                        />
                                                      }
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      openPicker={[Function]}
                                                      validationError=""
                                                    >
                                                      <Rifm
                                                        format={[Function]}
                                                        key="____-__-__"
                                                        onChange={[Function]}
                                                        refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                        value="2020-01-01"
                                                      >
                                                        <WithStyles(ForwardRef(TextField))
                                                          InputLabelProps={
                                                            Object {
                                                              "error": false,
                                                              "shrink": false,
                                                            }
                                                          }
                                                          InputProps={
                                                            Object {
                                                              "endAdornment": <ForwardRef(WithStyles)
                                                                position="end"
                                                              >
                                                                <ForwardRef(WithStyles)
                                                                  onClick={[Function]}
                                                                >
                                                                  <img
                                                                    alt="open calendar"
                                                                    src="calendar.svg"
                                                                  />
                                                                </ForwardRef(WithStyles)>
                                                              </ForwardRef(WithStyles)>,
                                                            }
                                                          }
                                                          error={false}
                                                          helperText=""
                                                          id="hot-desks-availableFrom"
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-invalid="false"
                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                id="hot-desks-availableFrom"
                                                                type="text"
                                                                value="2020-01-01"
                                                              />,
                                                            }
                                                          }
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          value="2020-01-01"
                                                          variant="outlined"
                                                        >
                                                          <ForwardRef(TextField)
                                                            InputLabelProps={
                                                              Object {
                                                                "error": false,
                                                                "shrink": false,
                                                              }
                                                            }
                                                            InputProps={
                                                              Object {
                                                                "endAdornment": <ForwardRef(WithStyles)
                                                                  position="end"
                                                                >
                                                                  <ForwardRef(WithStyles)
                                                                    onClick={[Function]}
                                                                  >
                                                                    <img
                                                                      alt="open calendar"
                                                                      src="calendar.svg"
                                                                    />
                                                                  </ForwardRef(WithStyles)>
                                                                </ForwardRef(WithStyles)>,
                                                              }
                                                            }
                                                            classes={
                                                              Object {
                                                                "root": "MuiTextField-root",
                                                              }
                                                            }
                                                            error={false}
                                                            helperText=""
                                                            id="hot-desks-availableFrom"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                  id="hot-desks-availableFrom"
                                                                  type="text"
                                                                  value="2020-01-01"
                                                                />,
                                                              }
                                                            }
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            value="2020-01-01"
                                                            variant="outlined"
                                                          >
                                                            <WithStyles(ForwardRef(FormControl))
                                                              className="MuiTextField-root"
                                                              color="primary"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={false}
                                                              required={false}
                                                              variant="outlined"
                                                            >
                                                              <ForwardRef(FormControl)
                                                                className="MuiTextField-root"
                                                                classes={
                                                                  Object {
                                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                                    "marginDense": "MuiFormControl-marginDense",
                                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                                    "root": "MuiFormControl-root",
                                                                  }
                                                                }
                                                                color="primary"
                                                                disabled={false}
                                                                error={false}
                                                                fullWidth={false}
                                                                required={false}
                                                                variant="outlined"
                                                              >
                                                                <div
                                                                  className="MuiFormControl-root MuiTextField-root"
                                                                >
                                                                  <WithStyles(ForwardRef(OutlinedInput))
                                                                    autoFocus={false}
                                                                    endAdornment={
                                                                      <ForwardRef(WithStyles)
                                                                        position="end"
                                                                      >
                                                                        <ForwardRef(WithStyles)
                                                                          onClick={[Function]}
                                                                        >
                                                                          <img
                                                                            alt="open calendar"
                                                                            src="calendar.svg"
                                                                          />
                                                                        </ForwardRef(WithStyles)>
                                                                      </ForwardRef(WithStyles)>
                                                                    }
                                                                    fullWidth={false}
                                                                    id="hot-desks-availableFrom"
                                                                    inputRef={
                                                                      Object {
                                                                        "current": <input
                                                                          aria-invalid="false"
                                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                          id="hot-desks-availableFrom"
                                                                          type="text"
                                                                          value="2020-01-01"
                                                                        />,
                                                                      }
                                                                    }
                                                                    labelWidth={0}
                                                                    multiline={false}
                                                                    notched={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    value="2020-01-01"
                                                                  >
                                                                    <ForwardRef(OutlinedInput)
                                                                      autoFocus={false}
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                          "disabled": "Mui-disabled",
                                                                          "error": "Mui-error",
                                                                          "focused": "Mui-focused",
                                                                          "input": "MuiOutlinedInput-input",
                                                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                          "marginDense": "MuiOutlinedInput-marginDense",
                                                                          "multiline": "MuiOutlinedInput-multiline",
                                                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                          "root": "MuiOutlinedInput-root",
                                                                        }
                                                                      }
                                                                      endAdornment={
                                                                        <ForwardRef(WithStyles)
                                                                          position="end"
                                                                        >
                                                                          <ForwardRef(WithStyles)
                                                                            onClick={[Function]}
                                                                          >
                                                                            <img
                                                                              alt="open calendar"
                                                                              src="calendar.svg"
                                                                            />
                                                                          </ForwardRef(WithStyles)>
                                                                        </ForwardRef(WithStyles)>
                                                                      }
                                                                      fullWidth={false}
                                                                      id="hot-desks-availableFrom"
                                                                      inputRef={
                                                                        Object {
                                                                          "current": <input
                                                                            aria-invalid="false"
                                                                            class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                            id="hot-desks-availableFrom"
                                                                            type="text"
                                                                            value="2020-01-01"
                                                                          />,
                                                                        }
                                                                      }
                                                                      labelWidth={0}
                                                                      multiline={false}
                                                                      notched={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      value="2020-01-01"
                                                                    >
                                                                      <WithStyles(ForwardRef(InputBase))
                                                                        autoFocus={false}
                                                                        classes={
                                                                          Object {
                                                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                            "disabled": "Mui-disabled",
                                                                            "error": "Mui-error",
                                                                            "focused": "Mui-focused",
                                                                            "input": "MuiOutlinedInput-input",
                                                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                            "marginDense": "MuiOutlinedInput-marginDense",
                                                                            "multiline": "MuiOutlinedInput-multiline",
                                                                            "notchedOutline": null,
                                                                            "root": "MuiOutlinedInput-root",
                                                                          }
                                                                        }
                                                                        endAdornment={
                                                                          <ForwardRef(WithStyles)
                                                                            position="end"
                                                                          >
                                                                            <ForwardRef(WithStyles)
                                                                              onClick={[Function]}
                                                                            >
                                                                              <img
                                                                                alt="open calendar"
                                                                                src="calendar.svg"
                                                                              />
                                                                            </ForwardRef(WithStyles)>
                                                                          </ForwardRef(WithStyles)>
                                                                        }
                                                                        fullWidth={false}
                                                                        id="hot-desks-availableFrom"
                                                                        inputComponent="input"
                                                                        inputRef={
                                                                          Object {
                                                                            "current": <input
                                                                              aria-invalid="false"
                                                                              class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                              id="hot-desks-availableFrom"
                                                                              type="text"
                                                                              value="2020-01-01"
                                                                            />,
                                                                          }
                                                                        }
                                                                        multiline={false}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        renderSuffix={[Function]}
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      >
                                                                        <ForwardRef(InputBase)
                                                                          autoFocus={false}
                                                                          classes={
                                                                            Object {
                                                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                              "disabled": "Mui-disabled Mui-disabled",
                                                                              "error": "Mui-error Mui-error",
                                                                              "focused": "Mui-focused Mui-focused",
                                                                              "formControl": "MuiInputBase-formControl",
                                                                              "fullWidth": "MuiInputBase-fullWidth",
                                                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                            }
                                                                          }
                                                                          endAdornment={
                                                                            <ForwardRef(WithStyles)
                                                                              position="end"
                                                                            >
                                                                              <ForwardRef(WithStyles)
                                                                                onClick={[Function]}
                                                                              >
                                                                                <img
                                                                                  alt="open calendar"
                                                                                  src="calendar.svg"
                                                                                />
                                                                              </ForwardRef(WithStyles)>
                                                                            </ForwardRef(WithStyles)>
                                                                          }
                                                                          fullWidth={false}
                                                                          id="hot-desks-availableFrom"
                                                                          inputComponent="input"
                                                                          inputRef={
                                                                            Object {
                                                                              "current": <input
                                                                                aria-invalid="false"
                                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                id="hot-desks-availableFrom"
                                                                                type="text"
                                                                                value="2020-01-01"
                                                                              />,
                                                                            }
                                                                          }
                                                                          multiline={false}
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          renderSuffix={[Function]}
                                                                          type="text"
                                                                          value="2020-01-01"
                                                                        >
                                                                          <div
                                                                            className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                            onClick={[Function]}
                                                                          >
                                                                            <input
                                                                              aria-invalid={false}
                                                                              autoFocus={false}
                                                                              className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                              disabled={false}
                                                                              id="hot-desks-availableFrom"
                                                                              onAnimationStart={[Function]}
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              required={false}
                                                                              type="text"
                                                                              value="2020-01-01"
                                                                            />
                                                                            <WithStyles(ForwardRef(InputAdornment))
                                                                              position="end"
                                                                            >
                                                                              <ForwardRef(InputAdornment)
                                                                                classes={
                                                                                  Object {
                                                                                    "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                                    "filled": "MuiInputAdornment-filled",
                                                                                    "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                                    "marginDense": "MuiInputAdornment-marginDense",
                                                                                    "positionEnd": "MuiInputAdornment-positionEnd",
                                                                                    "positionStart": "MuiInputAdornment-positionStart",
                                                                                    "root": "MuiInputAdornment-root",
                                                                                  }
                                                                                }
                                                                                position="end"
                                                                              >
                                                                                <div
                                                                                  className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                                >
                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <ForwardRef(IconButton)
                                                                                      classes={
                                                                                        Object {
                                                                                          "colorInherit": "MuiIconButton-colorInherit",
                                                                                          "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                          "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                          "disabled": "Mui-disabled",
                                                                                          "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                          "edgeStart": "MuiIconButton-edgeStart",
                                                                                          "label": "MuiIconButton-label",
                                                                                          "root": "MuiIconButton-root",
                                                                                          "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                        }
                                                                                      }
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                                        centerRipple={true}
                                                                                        className="MuiIconButton-root"
                                                                                        disabled={false}
                                                                                        focusRipple={true}
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <ForwardRef(ButtonBase)
                                                                                          centerRipple={true}
                                                                                          className="MuiIconButton-root"
                                                                                          classes={
                                                                                            Object {
                                                                                              "disabled": "Mui-disabled",
                                                                                              "focusVisible": "Mui-focusVisible",
                                                                                              "root": "MuiButtonBase-root",
                                                                                            }
                                                                                          }
                                                                                          disabled={false}
                                                                                          focusRipple={true}
                                                                                          onClick={[Function]}
                                                                                        >
                                                                                          <button
                                                                                            className="MuiButtonBase-root MuiIconButton-root"
                                                                                            disabled={false}
                                                                                            onBlur={[Function]}
                                                                                            onClick={[Function]}
                                                                                            onDragLeave={[Function]}
                                                                                            onFocus={[Function]}
                                                                                            onKeyDown={[Function]}
                                                                                            onKeyUp={[Function]}
                                                                                            onMouseDown={[Function]}
                                                                                            onMouseLeave={[Function]}
                                                                                            onMouseUp={[Function]}
                                                                                            onTouchEnd={[Function]}
                                                                                            onTouchMove={[Function]}
                                                                                            onTouchStart={[Function]}
                                                                                            tabIndex={0}
                                                                                            type="button"
                                                                                          >
                                                                                            <span
                                                                                              className="MuiIconButton-label"
                                                                                            >
                                                                                              <img
                                                                                                alt="open calendar"
                                                                                                src="calendar.svg"
                                                                                              />
                                                                                            </span>
                                                                                            <NoSsr>
                                                                                              <WithStyles(undefined)
                                                                                                center={true}
                                                                                              >
                                                                                                <ForwardRef(TouchRipple)
                                                                                                  center={true}
                                                                                                  classes={
                                                                                                    Object {
                                                                                                      "child": "MuiTouchRipple-child",
                                                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                                      "root": "MuiTouchRipple-root",
                                                                                                    }
                                                                                                  }
                                                                                                >
                                                                                                  <span
                                                                                                    className="MuiTouchRipple-root"
                                                                                                  >
                                                                                                    <TransitionGroup
                                                                                                      childFactory={[Function]}
                                                                                                      component={null}
                                                                                                      exit={true}
                                                                                                    />
                                                                                                  </span>
                                                                                                </ForwardRef(TouchRipple)>
                                                                                              </WithStyles(undefined)>
                                                                                            </NoSsr>
                                                                                          </button>
                                                                                        </ForwardRef(ButtonBase)>
                                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                                    </ForwardRef(IconButton)>
                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                </div>
                                                                              </ForwardRef(InputAdornment)>
                                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                                            <WithStyles(ForwardRef(NotchedOutline))
                                                                              className="MuiOutlinedInput-notchedOutline"
                                                                              labelWidth={0}
                                                                              notched={false}
                                                                            >
                                                                              <ForwardRef(NotchedOutline)
                                                                                className="MuiOutlinedInput-notchedOutline"
                                                                                classes={
                                                                                  Object {
                                                                                    "legend": "PrivateNotchedOutline-legend-70",
                                                                                    "root": "PrivateNotchedOutline-root-69",
                                                                                  }
                                                                                }
                                                                                labelWidth={0}
                                                                                notched={false}
                                                                              >
                                                                                <fieldset
                                                                                  aria-hidden={true}
                                                                                  className="PrivateNotchedOutline-root-69 MuiOutlinedInput-notchedOutline"
                                                                                  style={
                                                                                    Object {
                                                                                      "paddingLeft": 8,
                                                                                    }
                                                                                  }
                                                                                >
                                                                                  <legend
                                                                                    className="PrivateNotchedOutline-legend-70"
                                                                                    style={
                                                                                      Object {
                                                                                        "width": 0.01,
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <span
                                                                                      dangerouslySetInnerHTML={
                                                                                        Object {
                                                                                          "__html": "&#8203;",
                                                                                        }
                                                                                      }
                                                                                    />
                                                                                  </legend>
                                                                                </fieldset>
                                                                              </ForwardRef(NotchedOutline)>
                                                                            </WithStyles(ForwardRef(NotchedOutline))>
                                                                          </div>
                                                                        </ForwardRef(InputBase)>
                                                                      </WithStyles(ForwardRef(InputBase))>
                                                                    </ForwardRef(OutlinedInput)>
                                                                  </WithStyles(ForwardRef(OutlinedInput))>
                                                                </div>
                                                              </ForwardRef(FormControl)>
                                                            </WithStyles(ForwardRef(FormControl))>
                                                          </ForwardRef(TextField)>
                                                        </WithStyles(ForwardRef(TextField))>
                                                      </Rifm>
                                                    </KeyboardDateInput>
                                                    <WithStyles(ForwardRef(Popover))
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "bottom",
                                                        }
                                                      }
                                                      onClose={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(Popover)
                                                        anchorOrigin={
                                                          Object {
                                                            "horizontal": "center",
                                                            "vertical": "bottom",
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "paper": "MuiPopover-paper",
                                                            "root": "MuiPopover-root",
                                                          }
                                                        }
                                                        onClose={[Function]}
                                                        open={false}
                                                        transformOrigin={
                                                          Object {
                                                            "horizontal": "center",
                                                            "vertical": "top",
                                                          }
                                                        }
                                                      >
                                                        <ForwardRef(Modal)
                                                          BackdropProps={
                                                            Object {
                                                              "invisible": true,
                                                            }
                                                          }
                                                          className="MuiPopover-root"
                                                          onClose={[Function]}
                                                          open={false}
                                                        />
                                                      </ForwardRef(Popover)>
                                                    </WithStyles(ForwardRef(Popover))>
                                                  </InlineWrapper>
                                                </Wrapper>
                                              </PickerWithState>
                                            </MuiPickersUtilsProvider>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </Component>
                                  </StyledComponent>
                                </Styled(Component)>
                                <Input
                                  data-testid="hot-desks-min-lease"
                                  id="hot-desks-minLease"
                                  label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                  onChange={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "fabHwL",
                                            "rules": Array [
                                              "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-dnqmqq fabHwL"
                                      >
                                        <label
                                          htmlFor="hot-desks-minLease"
                                        >
                                          ONBOARDING_SPACE_FLEX_MINLEASE
                                        </label>
                                        <styled.input
                                          data-testid="hot-desks-min-lease"
                                          id="hot-desks-minLease"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <StyledComponent
                                            data-testid="hot-desks-min-lease"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "bvnVDt",
                                                  "rules": Array [
                                                    "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                    [Function],
                                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                    [Function],
                                                    ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                    [Function],
                                                    ";
    border: 1px solid ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.input",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "input",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="hot-desks-minLease"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          >
                                            <input
                                              className="sc-iwsKbI bvnVDt"
                                              data-testid="hot-desks-min-lease"
                                              id="hot-desks-minLease"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value=""
                                            />
                                          </StyledComponent>
                                        </styled.input>
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-gZMcBi",
                                                  "isStatic": false,
                                                  "lastClassName": "cEVqmM",
                                                  "rules": Array [
                                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-gZMcBi",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-gZMcBi cEVqmM"
                                            />
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Input>
                                <Input
                                  data-testid="hot-desks-price"
                                  id="hot-desks-price"
                                  label="ONBOARDING_SPACE_FLEX_PRICE (Kr)"
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                  type="number"
                                  value=""
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "fabHwL",
                                            "rules": Array [
                                              "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-dnqmqq fabHwL"
                                      >
                                        <label
                                          htmlFor="hot-desks-price"
                                        >
                                          ONBOARDING_SPACE_FLEX_PRICE (Kr)
                                        </label>
                                        <styled.input
                                          data-testid="hot-desks-price"
                                          id="hot-desks-price"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                          type="number"
                                          value=""
                                        >
                                          <StyledComponent
                                            data-testid="hot-desks-price"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "bvnVDt",
                                                  "rules": Array [
                                                    "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                    [Function],
                                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                    [Function],
                                                    ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                    [Function],
                                                    ";
    border: 1px solid ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.input",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "input",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="hot-desks-price"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                            type="number"
                                            value=""
                                          >
                                            <input
                                              className="sc-iwsKbI bvnVDt"
                                              data-testid="hot-desks-price"
                                              id="hot-desks-price"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                              type="number"
                                              value=""
                                            />
                                          </StyledComponent>
                                        </styled.input>
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-gZMcBi",
                                                  "isStatic": false,
                                                  "lastClassName": "cEVqmM",
                                                  "rules": Array [
                                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-gZMcBi",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-gZMcBi cEVqmM"
                                            />
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Input>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-Rmtcm",
                                    "isStatic": false,
                                    "lastClassName": "LoJut",
                                    "rules": Array [
                                      "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-Rmtcm",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-Rmtcm LoJut"
                              >
                                <Styled(styled.h4)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-gipzik",
                                          "isStatic": false,
                                          "lastClassName": "iNpEIw",
                                          "rules": Array [
                                            "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                                            "
  margin-top: 0;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.h4)",
                                        "foldedComponentIds": Array [
                                          "sc-htpNat",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-gipzik",
                                        "target": "h4",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <h4
                                      className="sc-htpNat sc-gipzik iNpEIw"
                                    >
                                      ONBOARDING_SPACE_FLEX_FIXED_DESKS
                                    </h4>
                                  </StyledComponent>
                                </Styled(styled.h4)>
                                <Input
                                  data-testid="fixed-desks-desks"
                                  id="fixed-desks-desks"
                                  label="ONBOARDING_SPACE_FLEX_DESKS"
                                  onChange={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "fabHwL",
                                            "rules": Array [
                                              "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-dnqmqq fabHwL"
                                      >
                                        <label
                                          htmlFor="fixed-desks-desks"
                                        >
                                          ONBOARDING_SPACE_FLEX_DESKS
                                        </label>
                                        <styled.input
                                          data-testid="fixed-desks-desks"
                                          id="fixed-desks-desks"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <StyledComponent
                                            data-testid="fixed-desks-desks"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "bvnVDt",
                                                  "rules": Array [
                                                    "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                    [Function],
                                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                    [Function],
                                                    ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                    [Function],
                                                    ";
    border: 1px solid ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.input",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "input",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="fixed-desks-desks"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          >
                                            <input
                                              className="sc-iwsKbI bvnVDt"
                                              data-testid="fixed-desks-desks"
                                              id="fixed-desks-desks"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value=""
                                            />
                                          </StyledComponent>
                                        </styled.input>
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-gZMcBi",
                                                  "isStatic": false,
                                                  "lastClassName": "cEVqmM",
                                                  "rules": Array [
                                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-gZMcBi",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-gZMcBi cEVqmM"
                                            />
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Input>
                                <Styled(Component)
                                  data-testid="fixed-desks-from"
                                  disablePast={true}
                                  id="fixed-desks-availableFrom"
                                  label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                  onChange={[Function]}
                                  value={2020-01-01T00:00:00.000Z}
                                >
                                  <StyledComponent
                                    data-testid="fixed-desks-from"
                                    disablePast={true}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-cSHVUG",
                                          "isStatic": false,
                                          "lastClassName": "fHtrqD",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                            [Function],
                                            ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(Component)",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-cSHVUG",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="fixed-desks-availableFrom"
                                    label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                    onChange={[Function]}
                                    value={2020-01-01T00:00:00.000Z}
                                  >
                                    <Component
                                      className="sc-cSHVUG fHtrqD"
                                      data-testid="fixed-desks-from"
                                      disablePast={true}
                                      id="fixed-desks-availableFrom"
                                      label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                      onChange={[Function]}
                                      value={2020-01-01T00:00:00.000Z}
                                    >
                                      <styled.div
                                        className="sc-cSHVUG fHtrqD"
                                        focusOn={false}
                                      >
                                        <StyledComponent
                                          className="sc-cSHVUG fHtrqD"
                                          focusOn={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-jzJRlG",
                                                "isStatic": false,
                                                "lastClassName": "cXFhwX",
                                                "rules": Array [
                                                  "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-jzJRlG",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-jzJRlG cXFhwX sc-cSHVUG fHtrqD"
                                          >
                                            <label>
                                              ONBOARDING_SPACE_FLEX_AVAILABILITY
                                            </label>
                                            <MuiPickersUtilsProvider
                                              locale={
                                                Object {
                                                  "code": "en-GB",
                                                  "formatDistance": [Function],
                                                  "formatLong": Object {
                                                    "date": [Function],
                                                    "dateTime": [Function],
                                                    "time": [Function],
                                                  },
                                                  "formatRelative": [Function],
                                                  "localize": Object {
                                                    "day": [Function],
                                                    "dayPeriod": [Function],
                                                    "era": [Function],
                                                    "month": [Function],
                                                    "ordinalNumber": [Function],
                                                    "quarter": [Function],
                                                  },
                                                  "match": Object {
                                                    "day": [Function],
                                                    "dayPeriod": [Function],
                                                    "era": [Function],
                                                    "month": [Function],
                                                    "ordinalNumber": [Function],
                                                    "quarter": [Function],
                                                  },
                                                  "options": Object {
                                                    "firstWeekContainsDate": 4,
                                                    "weekStartsOn": 1,
                                                  },
                                                }
                                              }
                                              utils={[Function]}
                                            >
                                              <PickerWithState
                                                InputLabelProps={
                                                  Object {
                                                    "error": false,
                                                    "shrink": false,
                                                  }
                                                }
                                                allowKeyboardControl={true}
                                                autoOk={true}
                                                disablePast={true}
                                                disableToolbar={true}
                                                format="yyyy-MM-dd"
                                                id="fixed-desks-availableFrom"
                                                inputVariant="outlined"
                                                invalidDateMessage="Invalid Date Format"
                                                keyboardIcon={
                                                  <img
                                                    alt="open calendar"
                                                    src="calendar.svg"
                                                  />
                                                }
                                                maxDate={2100-01-01T00:00:00.000Z}
                                                maxDateMessage="Date should not be after maximal date"
                                                minDate={1900-01-01T00:00:00.000Z}
                                                minDateMessage="Date should not be before minimal date"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                openTo="date"
                                                value={2020-01-01T00:00:00.000Z}
                                                variant="inline"
                                                views={
                                                  Array [
                                                    "year",
                                                    "date",
                                                  ]
                                                }
                                              >
                                                <Wrapper
                                                  DateInputProps={
                                                    Object {
                                                      "format": "yyyy-MM-dd",
                                                      "inputValue": "2020-01-01",
                                                      "onChange": [Function],
                                                      "openPicker": [Function],
                                                      "validationError": "",
                                                    }
                                                  }
                                                  InputComponent={[Function]}
                                                  InputLabelProps={
                                                    Object {
                                                      "error": false,
                                                      "shrink": false,
                                                    }
                                                  }
                                                  format="yyyy-MM-dd"
                                                  id="fixed-desks-availableFrom"
                                                  inputVariant="outlined"
                                                  keyboardIcon={
                                                    <img
                                                      alt="open calendar"
                                                      src="calendar.svg"
                                                    />
                                                  }
                                                  onAccept={[Function]}
                                                  onBlur={[Function]}
                                                  onClear={[Function]}
                                                  onDismiss={[Function]}
                                                  onFocus={[Function]}
                                                  onSetToday={[Function]}
                                                  open={false}
                                                  variant="inline"
                                                >
                                                  <InlineWrapper
                                                    DateInputProps={
                                                      Object {
                                                        "format": "yyyy-MM-dd",
                                                        "inputValue": "2020-01-01",
                                                        "onChange": [Function],
                                                        "openPicker": [Function],
                                                        "validationError": "",
                                                      }
                                                    }
                                                    InputComponent={[Function]}
                                                    InputLabelProps={
                                                      Object {
                                                        "error": false,
                                                        "shrink": false,
                                                      }
                                                    }
                                                    format="yyyy-MM-dd"
                                                    id="fixed-desks-availableFrom"
                                                    inputVariant="outlined"
                                                    keyboardIcon={
                                                      <img
                                                        alt="open calendar"
                                                        src="calendar.svg"
                                                      />
                                                    }
                                                    onAccept={[Function]}
                                                    onBlur={[Function]}
                                                    onClear={[Function]}
                                                    onDismiss={[Function]}
                                                    onFocus={[Function]}
                                                    onSetToday={[Function]}
                                                    open={false}
                                                  >
                                                    <KeyboardDateInput
                                                      InputLabelProps={
                                                        Object {
                                                          "error": false,
                                                          "shrink": false,
                                                        }
                                                      }
                                                      format="yyyy-MM-dd"
                                                      id="fixed-desks-availableFrom"
                                                      inputRef={
                                                        Object {
                                                          "current": <input
                                                            aria-invalid="false"
                                                            class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                            id="fixed-desks-availableFrom"
                                                            type="text"
                                                            value="2020-01-01"
                                                          />,
                                                        }
                                                      }
                                                      inputValue="2020-01-01"
                                                      inputVariant="outlined"
                                                      keyboardIcon={
                                                        <img
                                                          alt="open calendar"
                                                          src="calendar.svg"
                                                        />
                                                      }
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      openPicker={[Function]}
                                                      validationError=""
                                                    >
                                                      <Rifm
                                                        format={[Function]}
                                                        key="____-__-__"
                                                        onChange={[Function]}
                                                        refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                        value="2020-01-01"
                                                      >
                                                        <WithStyles(ForwardRef(TextField))
                                                          InputLabelProps={
                                                            Object {
                                                              "error": false,
                                                              "shrink": false,
                                                            }
                                                          }
                                                          InputProps={
                                                            Object {
                                                              "endAdornment": <ForwardRef(WithStyles)
                                                                position="end"
                                                              >
                                                                <ForwardRef(WithStyles)
                                                                  onClick={[Function]}
                                                                >
                                                                  <img
                                                                    alt="open calendar"
                                                                    src="calendar.svg"
                                                                  />
                                                                </ForwardRef(WithStyles)>
                                                              </ForwardRef(WithStyles)>,
                                                            }
                                                          }
                                                          error={false}
                                                          helperText=""
                                                          id="fixed-desks-availableFrom"
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-invalid="false"
                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                id="fixed-desks-availableFrom"
                                                                type="text"
                                                                value="2020-01-01"
                                                              />,
                                                            }
                                                          }
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          value="2020-01-01"
                                                          variant="outlined"
                                                        >
                                                          <ForwardRef(TextField)
                                                            InputLabelProps={
                                                              Object {
                                                                "error": false,
                                                                "shrink": false,
                                                              }
                                                            }
                                                            InputProps={
                                                              Object {
                                                                "endAdornment": <ForwardRef(WithStyles)
                                                                  position="end"
                                                                >
                                                                  <ForwardRef(WithStyles)
                                                                    onClick={[Function]}
                                                                  >
                                                                    <img
                                                                      alt="open calendar"
                                                                      src="calendar.svg"
                                                                    />
                                                                  </ForwardRef(WithStyles)>
                                                                </ForwardRef(WithStyles)>,
                                                              }
                                                            }
                                                            classes={
                                                              Object {
                                                                "root": "MuiTextField-root",
                                                              }
                                                            }
                                                            error={false}
                                                            helperText=""
                                                            id="fixed-desks-availableFrom"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                  id="fixed-desks-availableFrom"
                                                                  type="text"
                                                                  value="2020-01-01"
                                                                />,
                                                              }
                                                            }
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            value="2020-01-01"
                                                            variant="outlined"
                                                          >
                                                            <WithStyles(ForwardRef(FormControl))
                                                              className="MuiTextField-root"
                                                              color="primary"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={false}
                                                              required={false}
                                                              variant="outlined"
                                                            >
                                                              <ForwardRef(FormControl)
                                                                className="MuiTextField-root"
                                                                classes={
                                                                  Object {
                                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                                    "marginDense": "MuiFormControl-marginDense",
                                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                                    "root": "MuiFormControl-root",
                                                                  }
                                                                }
                                                                color="primary"
                                                                disabled={false}
                                                                error={false}
                                                                fullWidth={false}
                                                                required={false}
                                                                variant="outlined"
                                                              >
                                                                <div
                                                                  className="MuiFormControl-root MuiTextField-root"
                                                                >
                                                                  <WithStyles(ForwardRef(OutlinedInput))
                                                                    autoFocus={false}
                                                                    endAdornment={
                                                                      <ForwardRef(WithStyles)
                                                                        position="end"
                                                                      >
                                                                        <ForwardRef(WithStyles)
                                                                          onClick={[Function]}
                                                                        >
                                                                          <img
                                                                            alt="open calendar"
                                                                            src="calendar.svg"
                                                                          />
                                                                        </ForwardRef(WithStyles)>
                                                                      </ForwardRef(WithStyles)>
                                                                    }
                                                                    fullWidth={false}
                                                                    id="fixed-desks-availableFrom"
                                                                    inputRef={
                                                                      Object {
                                                                        "current": <input
                                                                          aria-invalid="false"
                                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                          id="fixed-desks-availableFrom"
                                                                          type="text"
                                                                          value="2020-01-01"
                                                                        />,
                                                                      }
                                                                    }
                                                                    labelWidth={0}
                                                                    multiline={false}
                                                                    notched={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    value="2020-01-01"
                                                                  >
                                                                    <ForwardRef(OutlinedInput)
                                                                      autoFocus={false}
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                          "disabled": "Mui-disabled",
                                                                          "error": "Mui-error",
                                                                          "focused": "Mui-focused",
                                                                          "input": "MuiOutlinedInput-input",
                                                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                          "marginDense": "MuiOutlinedInput-marginDense",
                                                                          "multiline": "MuiOutlinedInput-multiline",
                                                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                          "root": "MuiOutlinedInput-root",
                                                                        }
                                                                      }
                                                                      endAdornment={
                                                                        <ForwardRef(WithStyles)
                                                                          position="end"
                                                                        >
                                                                          <ForwardRef(WithStyles)
                                                                            onClick={[Function]}
                                                                          >
                                                                            <img
                                                                              alt="open calendar"
                                                                              src="calendar.svg"
                                                                            />
                                                                          </ForwardRef(WithStyles)>
                                                                        </ForwardRef(WithStyles)>
                                                                      }
                                                                      fullWidth={false}
                                                                      id="fixed-desks-availableFrom"
                                                                      inputRef={
                                                                        Object {
                                                                          "current": <input
                                                                            aria-invalid="false"
                                                                            class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                            id="fixed-desks-availableFrom"
                                                                            type="text"
                                                                            value="2020-01-01"
                                                                          />,
                                                                        }
                                                                      }
                                                                      labelWidth={0}
                                                                      multiline={false}
                                                                      notched={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      value="2020-01-01"
                                                                    >
                                                                      <WithStyles(ForwardRef(InputBase))
                                                                        autoFocus={false}
                                                                        classes={
                                                                          Object {
                                                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                            "disabled": "Mui-disabled",
                                                                            "error": "Mui-error",
                                                                            "focused": "Mui-focused",
                                                                            "input": "MuiOutlinedInput-input",
                                                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                            "marginDense": "MuiOutlinedInput-marginDense",
                                                                            "multiline": "MuiOutlinedInput-multiline",
                                                                            "notchedOutline": null,
                                                                            "root": "MuiOutlinedInput-root",
                                                                          }
                                                                        }
                                                                        endAdornment={
                                                                          <ForwardRef(WithStyles)
                                                                            position="end"
                                                                          >
                                                                            <ForwardRef(WithStyles)
                                                                              onClick={[Function]}
                                                                            >
                                                                              <img
                                                                                alt="open calendar"
                                                                                src="calendar.svg"
                                                                              />
                                                                            </ForwardRef(WithStyles)>
                                                                          </ForwardRef(WithStyles)>
                                                                        }
                                                                        fullWidth={false}
                                                                        id="fixed-desks-availableFrom"
                                                                        inputComponent="input"
                                                                        inputRef={
                                                                          Object {
                                                                            "current": <input
                                                                              aria-invalid="false"
                                                                              class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                              id="fixed-desks-availableFrom"
                                                                              type="text"
                                                                              value="2020-01-01"
                                                                            />,
                                                                          }
                                                                        }
                                                                        multiline={false}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        renderSuffix={[Function]}
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      >
                                                                        <ForwardRef(InputBase)
                                                                          autoFocus={false}
                                                                          classes={
                                                                            Object {
                                                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                              "disabled": "Mui-disabled Mui-disabled",
                                                                              "error": "Mui-error Mui-error",
                                                                              "focused": "Mui-focused Mui-focused",
                                                                              "formControl": "MuiInputBase-formControl",
                                                                              "fullWidth": "MuiInputBase-fullWidth",
                                                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                            }
                                                                          }
                                                                          endAdornment={
                                                                            <ForwardRef(WithStyles)
                                                                              position="end"
                                                                            >
                                                                              <ForwardRef(WithStyles)
                                                                                onClick={[Function]}
                                                                              >
                                                                                <img
                                                                                  alt="open calendar"
                                                                                  src="calendar.svg"
                                                                                />
                                                                              </ForwardRef(WithStyles)>
                                                                            </ForwardRef(WithStyles)>
                                                                          }
                                                                          fullWidth={false}
                                                                          id="fixed-desks-availableFrom"
                                                                          inputComponent="input"
                                                                          inputRef={
                                                                            Object {
                                                                              "current": <input
                                                                                aria-invalid="false"
                                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                id="fixed-desks-availableFrom"
                                                                                type="text"
                                                                                value="2020-01-01"
                                                                              />,
                                                                            }
                                                                          }
                                                                          multiline={false}
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          renderSuffix={[Function]}
                                                                          type="text"
                                                                          value="2020-01-01"
                                                                        >
                                                                          <div
                                                                            className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                            onClick={[Function]}
                                                                          >
                                                                            <input
                                                                              aria-invalid={false}
                                                                              autoFocus={false}
                                                                              className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                              disabled={false}
                                                                              id="fixed-desks-availableFrom"
                                                                              onAnimationStart={[Function]}
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              required={false}
                                                                              type="text"
                                                                              value="2020-01-01"
                                                                            />
                                                                            <WithStyles(ForwardRef(InputAdornment))
                                                                              position="end"
                                                                            >
                                                                              <ForwardRef(InputAdornment)
                                                                                classes={
                                                                                  Object {
                                                                                    "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                                    "filled": "MuiInputAdornment-filled",
                                                                                    "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                                    "marginDense": "MuiInputAdornment-marginDense",
                                                                                    "positionEnd": "MuiInputAdornment-positionEnd",
                                                                                    "positionStart": "MuiInputAdornment-positionStart",
                                                                                    "root": "MuiInputAdornment-root",
                                                                                  }
                                                                                }
                                                                                position="end"
                                                                              >
                                                                                <div
                                                                                  className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                                >
                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <ForwardRef(IconButton)
                                                                                      classes={
                                                                                        Object {
                                                                                          "colorInherit": "MuiIconButton-colorInherit",
                                                                                          "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                          "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                          "disabled": "Mui-disabled",
                                                                                          "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                          "edgeStart": "MuiIconButton-edgeStart",
                                                                                          "label": "MuiIconButton-label",
                                                                                          "root": "MuiIconButton-root",
                                                                                          "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                        }
                                                                                      }
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                                        centerRipple={true}
                                                                                        className="MuiIconButton-root"
                                                                                        disabled={false}
                                                                                        focusRipple={true}
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <ForwardRef(ButtonBase)
                                                                                          centerRipple={true}
                                                                                          className="MuiIconButton-root"
                                                                                          classes={
                                                                                            Object {
                                                                                              "disabled": "Mui-disabled",
                                                                                              "focusVisible": "Mui-focusVisible",
                                                                                              "root": "MuiButtonBase-root",
                                                                                            }
                                                                                          }
                                                                                          disabled={false}
                                                                                          focusRipple={true}
                                                                                          onClick={[Function]}
                                                                                        >
                                                                                          <button
                                                                                            className="MuiButtonBase-root MuiIconButton-root"
                                                                                            disabled={false}
                                                                                            onBlur={[Function]}
                                                                                            onClick={[Function]}
                                                                                            onDragLeave={[Function]}
                                                                                            onFocus={[Function]}
                                                                                            onKeyDown={[Function]}
                                                                                            onKeyUp={[Function]}
                                                                                            onMouseDown={[Function]}
                                                                                            onMouseLeave={[Function]}
                                                                                            onMouseUp={[Function]}
                                                                                            onTouchEnd={[Function]}
                                                                                            onTouchMove={[Function]}
                                                                                            onTouchStart={[Function]}
                                                                                            tabIndex={0}
                                                                                            type="button"
                                                                                          >
                                                                                            <span
                                                                                              className="MuiIconButton-label"
                                                                                            >
                                                                                              <img
                                                                                                alt="open calendar"
                                                                                                src="calendar.svg"
                                                                                              />
                                                                                            </span>
                                                                                            <NoSsr>
                                                                                              <WithStyles(undefined)
                                                                                                center={true}
                                                                                              >
                                                                                                <ForwardRef(TouchRipple)
                                                                                                  center={true}
                                                                                                  classes={
                                                                                                    Object {
                                                                                                      "child": "MuiTouchRipple-child",
                                                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                                      "root": "MuiTouchRipple-root",
                                                                                                    }
                                                                                                  }
                                                                                                >
                                                                                                  <span
                                                                                                    className="MuiTouchRipple-root"
                                                                                                  >
                                                                                                    <TransitionGroup
                                                                                                      childFactory={[Function]}
                                                                                                      component={null}
                                                                                                      exit={true}
                                                                                                    />
                                                                                                  </span>
                                                                                                </ForwardRef(TouchRipple)>
                                                                                              </WithStyles(undefined)>
                                                                                            </NoSsr>
                                                                                          </button>
                                                                                        </ForwardRef(ButtonBase)>
                                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                                    </ForwardRef(IconButton)>
                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                </div>
                                                                              </ForwardRef(InputAdornment)>
                                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                                            <WithStyles(ForwardRef(NotchedOutline))
                                                                              className="MuiOutlinedInput-notchedOutline"
                                                                              labelWidth={0}
                                                                              notched={false}
                                                                            >
                                                                              <ForwardRef(NotchedOutline)
                                                                                className="MuiOutlinedInput-notchedOutline"
                                                                                classes={
                                                                                  Object {
                                                                                    "legend": "PrivateNotchedOutline-legend-70",
                                                                                    "root": "PrivateNotchedOutline-root-69",
                                                                                  }
                                                                                }
                                                                                labelWidth={0}
                                                                                notched={false}
                                                                              >
                                                                                <fieldset
                                                                                  aria-hidden={true}
                                                                                  className="PrivateNotchedOutline-root-69 MuiOutlinedInput-notchedOutline"
                                                                                  style={
                                                                                    Object {
                                                                                      "paddingLeft": 8,
                                                                                    }
                                                                                  }
                                                                                >
                                                                                  <legend
                                                                                    className="PrivateNotchedOutline-legend-70"
                                                                                    style={
                                                                                      Object {
                                                                                        "width": 0.01,
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <span
                                                                                      dangerouslySetInnerHTML={
                                                                                        Object {
                                                                                          "__html": "&#8203;",
                                                                                        }
                                                                                      }
                                                                                    />
                                                                                  </legend>
                                                                                </fieldset>
                                                                              </ForwardRef(NotchedOutline)>
                                                                            </WithStyles(ForwardRef(NotchedOutline))>
                                                                          </div>
                                                                        </ForwardRef(InputBase)>
                                                                      </WithStyles(ForwardRef(InputBase))>
                                                                    </ForwardRef(OutlinedInput)>
                                                                  </WithStyles(ForwardRef(OutlinedInput))>
                                                                </div>
                                                              </ForwardRef(FormControl)>
                                                            </WithStyles(ForwardRef(FormControl))>
                                                          </ForwardRef(TextField)>
                                                        </WithStyles(ForwardRef(TextField))>
                                                      </Rifm>
                                                    </KeyboardDateInput>
                                                    <WithStyles(ForwardRef(Popover))
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "bottom",
                                                        }
                                                      }
                                                      onClose={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(Popover)
                                                        anchorOrigin={
                                                          Object {
                                                            "horizontal": "center",
                                                            "vertical": "bottom",
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "paper": "MuiPopover-paper",
                                                            "root": "MuiPopover-root",
                                                          }
                                                        }
                                                        onClose={[Function]}
                                                        open={false}
                                                        transformOrigin={
                                                          Object {
                                                            "horizontal": "center",
                                                            "vertical": "top",
                                                          }
                                                        }
                                                      >
                                                        <ForwardRef(Modal)
                                                          BackdropProps={
                                                            Object {
                                                              "invisible": true,
                                                            }
                                                          }
                                                          className="MuiPopover-root"
                                                          onClose={[Function]}
                                                          open={false}
                                                        />
                                                      </ForwardRef(Popover)>
                                                    </WithStyles(ForwardRef(Popover))>
                                                  </InlineWrapper>
                                                </Wrapper>
                                              </PickerWithState>
                                            </MuiPickersUtilsProvider>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </Component>
                                  </StyledComponent>
                                </Styled(Component)>
                                <Input
                                  data-testid="fixed-desks-min-lease"
                                  id="fixed-desks-minLease"
                                  label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                  onChange={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "fabHwL",
                                            "rules": Array [
                                              "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-dnqmqq fabHwL"
                                      >
                                        <label
                                          htmlFor="fixed-desks-minLease"
                                        >
                                          ONBOARDING_SPACE_FLEX_MINLEASE
                                        </label>
                                        <styled.input
                                          data-testid="fixed-desks-min-lease"
                                          id="fixed-desks-minLease"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <StyledComponent
                                            data-testid="fixed-desks-min-lease"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "bvnVDt",
                                                  "rules": Array [
                                                    "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                    [Function],
                                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                    [Function],
                                                    ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                    [Function],
                                                    ";
    border: 1px solid ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.input",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "input",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="fixed-desks-minLease"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          >
                                            <input
                                              className="sc-iwsKbI bvnVDt"
                                              data-testid="fixed-desks-min-lease"
                                              id="fixed-desks-minLease"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value=""
                                            />
                                          </StyledComponent>
                                        </styled.input>
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-gZMcBi",
                                                  "isStatic": false,
                                                  "lastClassName": "cEVqmM",
                                                  "rules": Array [
                                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-gZMcBi",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-gZMcBi cEVqmM"
                                            />
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Input>
                                <Input
                                  data-testid="fixed-desks-price"
                                  id="fixed-desks-price"
                                  label="ONBOARDING_SPACE_FLEX_PRICE (Kr)"
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                  type="number"
                                  value=""
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "fabHwL",
                                            "rules": Array [
                                              "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-dnqmqq fabHwL"
                                      >
                                        <label
                                          htmlFor="fixed-desks-price"
                                        >
                                          ONBOARDING_SPACE_FLEX_PRICE (Kr)
                                        </label>
                                        <styled.input
                                          data-testid="fixed-desks-price"
                                          id="fixed-desks-price"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                          type="number"
                                          value=""
                                        >
                                          <StyledComponent
                                            data-testid="fixed-desks-price"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "bvnVDt",
                                                  "rules": Array [
                                                    "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                    [Function],
                                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                    [Function],
                                                    ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                    [Function],
                                                    ";
    border: 1px solid ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.input",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "input",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="fixed-desks-price"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                            type="number"
                                            value=""
                                          >
                                            <input
                                              className="sc-iwsKbI bvnVDt"
                                              data-testid="fixed-desks-price"
                                              id="fixed-desks-price"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                              type="number"
                                              value=""
                                            />
                                          </StyledComponent>
                                        </styled.input>
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-gZMcBi",
                                                  "isStatic": false,
                                                  "lastClassName": "cEVqmM",
                                                  "rules": Array [
                                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-gZMcBi",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-gZMcBi cEVqmM"
                                            />
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Input>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </StyledComponent>
                    </styled.div>
                    <ServicedOffices
                      space={
                        Object {
                          "availabilityFixed": 2020-01-01T00:00:00.000Z,
                          "fitout": Array [
                            Object {
                              "amount": 1000,
                              "description": "FitOut1",
                              "name": "FitOut1",
                            },
                          ],
                          "fixedDesks": Object {
                            "availableFrom": 2020-01-01T00:00:00.000Z,
                            "currencyCode": "NOK",
                            "desks": 0,
                            "frequency": "Monthly",
                            "minLease": 0,
                            "price": 0,
                          },
                          "floorPlan": Array [],
                          "hotDesks": Object {
                            "availableFrom": 2020-01-01T00:00:00.000Z,
                            "currencyCode": "NOK",
                            "desks": 0,
                            "frequency": "Monthly",
                            "minLease": 0,
                            "price": 0,
                          },
                          "id": "0",
                          "images": Array [],
                          "months": undefined,
                          "servicedOffices": Array [],
                          "spaceDescription": "",
                          "spaceFloor": undefined,
                          "spaceFloored": "",
                          "spaceHighlights": "",
                          "spaceMatterPort": "",
                          "spaceName": "",
                          "spaceRent": undefined,
                          "spaceServices": undefined,
                          "spaceServicesNotNegotiable": false,
                          "spaceSize": undefined,
                          "spaceSizeCommon": undefined,
                          "status": 1,
                          "type": "FLEX",
                          "use": "",
                        }
                      }
                    >
                      <styled.h3>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htoDjs",
                                "isStatic": false,
                                "lastClassName": "gisnSK",
                                "rules": Array [
                                  "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                                ],
                              },
                              "displayName": "styled.h3",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htoDjs",
                              "target": "h3",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <h3
                            className="sc-htoDjs gisnSK"
                          >
                            ONBOARDING_SPACE_FLEX_SERVICED_OFFICES
                          </h3>
                        </StyledComponent>
                      </styled.h3>
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jDwBTQ",
                                "isStatic": false,
                                "lastClassName": "jliqNp",
                                "rules": Array [
                                  "
  max-width: 516px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  border-radius: 2px;
  background-color: #f4f4f4;
  padding: 20px;
  & > div {
    margin-bottom: 20px;
  }
  & > div:last-child {
    margin-bottom: 0px;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-jDwBTQ",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-jDwBTQ jliqNp"
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gPEVay",
                                      "isStatic": false,
                                      "lastClassName": "jVZBRb",
                                      "rules": Array [
                                        "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gPEVay",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-gPEVay jVZBRb"
                                >
                                  <Styled(Styled(Input))
                                    id="serviced-offices-desks"
                                    label="ONBOARDING_SPACE_SO_PEOPLE"
                                    min={1}
                                    onChange={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-jWBwVP",
                                            "isStatic": false,
                                            "lastClassName": "jqwFAo",
                                            "rules": Array [
                                              "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                              "
  width: 178px;
",
                                            ],
                                          },
                                          "displayName": "Styled(Styled(Input))",
                                          "foldedComponentIds": Array [
                                            "sc-cvbbAY",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-jWBwVP",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="serviced-offices-desks"
                                      label="ONBOARDING_SPACE_SO_PEOPLE"
                                      min={1}
                                      onChange={[Function]}
                                      type="number"
                                      value=""
                                    >
                                      <Input
                                        className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                        id="serviced-offices-desks"
                                        label="ONBOARDING_SPACE_SO_PEOPLE"
                                        min={1}
                                        onChange={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <styled.div
                                          className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                        >
                                          <StyledComponent
                                            className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-dnqmqq",
                                                  "isStatic": false,
                                                  "lastClassName": "fabHwL",
                                                  "rules": Array [
                                                    "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-dnqmqq",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-dnqmqq fabHwL sc-cvbbAY sc-jWBwVP jqwFAo"
                                            >
                                              <label
                                                htmlFor="serviced-offices-desks"
                                              >
                                                ONBOARDING_SPACE_SO_PEOPLE
                                              </label>
                                              <styled.input
                                                id="serviced-offices-desks"
                                                min={1}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                type="number"
                                                value=""
                                              >
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-iwsKbI",
                                                        "isStatic": false,
                                                        "lastClassName": "bvnVDt",
                                                        "rules": Array [
                                                          "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                          [Function],
                                                          ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                          [Function],
                                                          ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                          [Function],
                                                          ";
    border: 1px solid ",
                                                          [Function],
                                                          ";
  }
",
                                                        ],
                                                      },
                                                      "displayName": "styled.input",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-iwsKbI",
                                                      "target": "input",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  id="serviced-offices-desks"
                                                  min={1}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  type="number"
                                                  value=""
                                                >
                                                  <input
                                                    className="sc-iwsKbI bvnVDt"
                                                    id="serviced-offices-desks"
                                                    min={1}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    type="number"
                                                    value=""
                                                  />
                                                </StyledComponent>
                                              </styled.input>
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-gZMcBi",
                                                        "isStatic": false,
                                                        "lastClassName": "cEVqmM",
                                                        "rules": Array [
                                                          "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-gZMcBi",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-gZMcBi cEVqmM"
                                                  />
                                                </StyledComponent>
                                              </styled.div>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Input>
                                    </StyledComponent>
                                  </Styled(Styled(Input))>
                                  <Styled(Styled(Input))
                                    id="serviced-offices-floor"
                                    label="ONBOARDING_SPACE_SO_FLOOR"
                                    onChange={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-jWBwVP",
                                            "isStatic": false,
                                            "lastClassName": "jqwFAo",
                                            "rules": Array [
                                              "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                              "
  width: 178px;
",
                                            ],
                                          },
                                          "displayName": "Styled(Styled(Input))",
                                          "foldedComponentIds": Array [
                                            "sc-cvbbAY",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-jWBwVP",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="serviced-offices-floor"
                                      label="ONBOARDING_SPACE_SO_FLOOR"
                                      onChange={[Function]}
                                      type="number"
                                      value=""
                                    >
                                      <Input
                                        className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                        id="serviced-offices-floor"
                                        label="ONBOARDING_SPACE_SO_FLOOR"
                                        onChange={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <styled.div
                                          className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                        >
                                          <StyledComponent
                                            className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-dnqmqq",
                                                  "isStatic": false,
                                                  "lastClassName": "fabHwL",
                                                  "rules": Array [
                                                    "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-dnqmqq",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-dnqmqq fabHwL sc-cvbbAY sc-jWBwVP jqwFAo"
                                            >
                                              <label
                                                htmlFor="serviced-offices-floor"
                                              >
                                                ONBOARDING_SPACE_SO_FLOOR
                                              </label>
                                              <styled.input
                                                id="serviced-offices-floor"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                type="number"
                                                value=""
                                              >
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-iwsKbI",
                                                        "isStatic": false,
                                                        "lastClassName": "bvnVDt",
                                                        "rules": Array [
                                                          "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                          [Function],
                                                          ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                          [Function],
                                                          ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                          [Function],
                                                          ";
    border: 1px solid ",
                                                          [Function],
                                                          ";
  }
",
                                                        ],
                                                      },
                                                      "displayName": "styled.input",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-iwsKbI",
                                                      "target": "input",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  id="serviced-offices-floor"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  type="number"
                                                  value=""
                                                >
                                                  <input
                                                    className="sc-iwsKbI bvnVDt"
                                                    id="serviced-offices-floor"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    type="number"
                                                    value=""
                                                  />
                                                </StyledComponent>
                                              </styled.input>
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-gZMcBi",
                                                        "isStatic": false,
                                                        "lastClassName": "cEVqmM",
                                                        "rules": Array [
                                                          "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-gZMcBi",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-gZMcBi cEVqmM"
                                                  />
                                                </StyledComponent>
                                              </styled.div>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Input>
                                    </StyledComponent>
                                  </Styled(Styled(Input))>
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-iRbamj",
                                            "isStatic": false,
                                            "lastClassName": "keJaiU",
                                            "rules": Array [
                                              "
  display: flex;
  & > div {
    margin-right: 20px;
  }
  & > div:last-child {
    margin-right: 0;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-iRbamj",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-iRbamj keJaiU"
                                      >
                                        <Styled(Component)
                                          disablePast={true}
                                          id="serviced-offices-from"
                                          label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                          onChange={[Function]}
                                          value={2015-06-15T22:12:05.000Z}
                                        >
                                          <StyledComponent
                                            disablePast={true}
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-cSHVUG",
                                                  "isStatic": false,
                                                  "lastClassName": "fHtrqD",
                                                  "rules": Array [
                                                    "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                                    [Function],
                                                    ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                                  ],
                                                },
                                                "displayName": "Styled(Component)",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-cSHVUG",
                                                "target": [Function],
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="serviced-offices-from"
                                            label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                            onChange={[Function]}
                                            value={2015-06-15T22:12:05.000Z}
                                          >
                                            <Component
                                              className="sc-cSHVUG fHtrqD"
                                              disablePast={true}
                                              id="serviced-offices-from"
                                              label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                              onChange={[Function]}
                                              value={2015-06-15T22:12:05.000Z}
                                            >
                                              <styled.div
                                                className="sc-cSHVUG fHtrqD"
                                                focusOn={false}
                                              >
                                                <StyledComponent
                                                  className="sc-cSHVUG fHtrqD"
                                                  focusOn={false}
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-jzJRlG",
                                                        "isStatic": false,
                                                        "lastClassName": "cXFhwX",
                                                        "rules": Array [
                                                          "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                                          [Function],
                                                          ";
  }
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-jzJRlG",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-jzJRlG cXFhwX sc-cSHVUG fHtrqD"
                                                  >
                                                    <label>
                                                      ONBOARDING_SPACE_FLEX_AVAILABILITY
                                                    </label>
                                                    <MuiPickersUtilsProvider
                                                      locale={
                                                        Object {
                                                          "code": "en-GB",
                                                          "formatDistance": [Function],
                                                          "formatLong": Object {
                                                            "date": [Function],
                                                            "dateTime": [Function],
                                                            "time": [Function],
                                                          },
                                                          "formatRelative": [Function],
                                                          "localize": Object {
                                                            "day": [Function],
                                                            "dayPeriod": [Function],
                                                            "era": [Function],
                                                            "month": [Function],
                                                            "ordinalNumber": [Function],
                                                            "quarter": [Function],
                                                          },
                                                          "match": Object {
                                                            "day": [Function],
                                                            "dayPeriod": [Function],
                                                            "era": [Function],
                                                            "month": [Function],
                                                            "ordinalNumber": [Function],
                                                            "quarter": [Function],
                                                          },
                                                          "options": Object {
                                                            "firstWeekContainsDate": 4,
                                                            "weekStartsOn": 1,
                                                          },
                                                        }
                                                      }
                                                      utils={[Function]}
                                                    >
                                                      <PickerWithState
                                                        InputLabelProps={
                                                          Object {
                                                            "error": false,
                                                            "shrink": false,
                                                          }
                                                        }
                                                        allowKeyboardControl={true}
                                                        autoOk={true}
                                                        disablePast={true}
                                                        disableToolbar={true}
                                                        format="yyyy-MM-dd"
                                                        id="serviced-offices-from"
                                                        inputVariant="outlined"
                                                        invalidDateMessage="Invalid Date Format"
                                                        keyboardIcon={
                                                          <img
                                                            alt="open calendar"
                                                            src="calendar.svg"
                                                          />
                                                        }
                                                        maxDate={2100-01-01T00:00:00.000Z}
                                                        maxDateMessage="Date should not be after maximal date"
                                                        minDate={1900-01-01T00:00:00.000Z}
                                                        minDateMessage="Date should not be before minimal date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        openTo="date"
                                                        value={2015-06-15T22:12:05.000Z}
                                                        variant="inline"
                                                        views={
                                                          Array [
                                                            "year",
                                                            "date",
                                                          ]
                                                        }
                                                      >
                                                        <Wrapper
                                                          DateInputProps={
                                                            Object {
                                                              "format": "yyyy-MM-dd",
                                                              "inputValue": "2015-06-15",
                                                              "onChange": [Function],
                                                              "openPicker": [Function],
                                                              "validationError": "",
                                                            }
                                                          }
                                                          InputComponent={[Function]}
                                                          InputLabelProps={
                                                            Object {
                                                              "error": false,
                                                              "shrink": false,
                                                            }
                                                          }
                                                          format="yyyy-MM-dd"
                                                          id="serviced-offices-from"
                                                          inputVariant="outlined"
                                                          keyboardIcon={
                                                            <img
                                                              alt="open calendar"
                                                              src="calendar.svg"
                                                            />
                                                          }
                                                          onAccept={[Function]}
                                                          onBlur={[Function]}
                                                          onClear={[Function]}
                                                          onDismiss={[Function]}
                                                          onFocus={[Function]}
                                                          onSetToday={[Function]}
                                                          open={false}
                                                          variant="inline"
                                                        >
                                                          <InlineWrapper
                                                            DateInputProps={
                                                              Object {
                                                                "format": "yyyy-MM-dd",
                                                                "inputValue": "2015-06-15",
                                                                "onChange": [Function],
                                                                "openPicker": [Function],
                                                                "validationError": "",
                                                              }
                                                            }
                                                            InputComponent={[Function]}
                                                            InputLabelProps={
                                                              Object {
                                                                "error": false,
                                                                "shrink": false,
                                                              }
                                                            }
                                                            format="yyyy-MM-dd"
                                                            id="serviced-offices-from"
                                                            inputVariant="outlined"
                                                            keyboardIcon={
                                                              <img
                                                                alt="open calendar"
                                                                src="calendar.svg"
                                                              />
                                                            }
                                                            onAccept={[Function]}
                                                            onBlur={[Function]}
                                                            onClear={[Function]}
                                                            onDismiss={[Function]}
                                                            onFocus={[Function]}
                                                            onSetToday={[Function]}
                                                            open={false}
                                                          >
                                                            <KeyboardDateInput
                                                              InputLabelProps={
                                                                Object {
                                                                  "error": false,
                                                                  "shrink": false,
                                                                }
                                                              }
                                                              format="yyyy-MM-dd"
                                                              id="serviced-offices-from"
                                                              inputRef={
                                                                Object {
                                                                  "current": <input
                                                                    aria-invalid="false"
                                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                    id="serviced-offices-from"
                                                                    type="text"
                                                                    value="2015-06-15"
                                                                  />,
                                                                }
                                                              }
                                                              inputValue="2015-06-15"
                                                              inputVariant="outlined"
                                                              keyboardIcon={
                                                                <img
                                                                  alt="open calendar"
                                                                  src="calendar.svg"
                                                                />
                                                              }
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              openPicker={[Function]}
                                                              validationError=""
                                                            >
                                                              <Rifm
                                                                format={[Function]}
                                                                key="____-__-__"
                                                                onChange={[Function]}
                                                                refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                                value="2015-06-15"
                                                              >
                                                                <WithStyles(ForwardRef(TextField))
                                                                  InputLabelProps={
                                                                    Object {
                                                                      "error": false,
                                                                      "shrink": false,
                                                                    }
                                                                  }
                                                                  InputProps={
                                                                    Object {
                                                                      "endAdornment": <ForwardRef(WithStyles)
                                                                        position="end"
                                                                      >
                                                                        <ForwardRef(WithStyles)
                                                                          onClick={[Function]}
                                                                        >
                                                                          <img
                                                                            alt="open calendar"
                                                                            src="calendar.svg"
                                                                          />
                                                                        </ForwardRef(WithStyles)>
                                                                      </ForwardRef(WithStyles)>,
                                                                    }
                                                                  }
                                                                  error={false}
                                                                  helperText=""
                                                                  id="serviced-offices-from"
                                                                  inputRef={
                                                                    Object {
                                                                      "current": <input
                                                                        aria-invalid="false"
                                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                        id="serviced-offices-from"
                                                                        type="text"
                                                                        value="2015-06-15"
                                                                      />,
                                                                    }
                                                                  }
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  value="2015-06-15"
                                                                  variant="outlined"
                                                                >
                                                                  <ForwardRef(TextField)
                                                                    InputLabelProps={
                                                                      Object {
                                                                        "error": false,
                                                                        "shrink": false,
                                                                      }
                                                                    }
                                                                    InputProps={
                                                                      Object {
                                                                        "endAdornment": <ForwardRef(WithStyles)
                                                                          position="end"
                                                                        >
                                                                          <ForwardRef(WithStyles)
                                                                            onClick={[Function]}
                                                                          >
                                                                            <img
                                                                              alt="open calendar"
                                                                              src="calendar.svg"
                                                                            />
                                                                          </ForwardRef(WithStyles)>
                                                                        </ForwardRef(WithStyles)>,
                                                                      }
                                                                    }
                                                                    classes={
                                                                      Object {
                                                                        "root": "MuiTextField-root",
                                                                      }
                                                                    }
                                                                    error={false}
                                                                    helperText=""
                                                                    id="serviced-offices-from"
                                                                    inputRef={
                                                                      Object {
                                                                        "current": <input
                                                                          aria-invalid="false"
                                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                          id="serviced-offices-from"
                                                                          type="text"
                                                                          value="2015-06-15"
                                                                        />,
                                                                      }
                                                                    }
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    value="2015-06-15"
                                                                    variant="outlined"
                                                                  >
                                                                    <WithStyles(ForwardRef(FormControl))
                                                                      className="MuiTextField-root"
                                                                      color="primary"
                                                                      disabled={false}
                                                                      error={false}
                                                                      fullWidth={false}
                                                                      required={false}
                                                                      variant="outlined"
                                                                    >
                                                                      <ForwardRef(FormControl)
                                                                        className="MuiTextField-root"
                                                                        classes={
                                                                          Object {
                                                                            "fullWidth": "MuiFormControl-fullWidth",
                                                                            "marginDense": "MuiFormControl-marginDense",
                                                                            "marginNormal": "MuiFormControl-marginNormal",
                                                                            "root": "MuiFormControl-root",
                                                                          }
                                                                        }
                                                                        color="primary"
                                                                        disabled={false}
                                                                        error={false}
                                                                        fullWidth={false}
                                                                        required={false}
                                                                        variant="outlined"
                                                                      >
                                                                        <div
                                                                          className="MuiFormControl-root MuiTextField-root"
                                                                        >
                                                                          <WithStyles(ForwardRef(OutlinedInput))
                                                                            autoFocus={false}
                                                                            endAdornment={
                                                                              <ForwardRef(WithStyles)
                                                                                position="end"
                                                                              >
                                                                                <ForwardRef(WithStyles)
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <img
                                                                                    alt="open calendar"
                                                                                    src="calendar.svg"
                                                                                  />
                                                                                </ForwardRef(WithStyles)>
                                                                              </ForwardRef(WithStyles)>
                                                                            }
                                                                            fullWidth={false}
                                                                            id="serviced-offices-from"
                                                                            inputRef={
                                                                              Object {
                                                                                "current": <input
                                                                                  aria-invalid="false"
                                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                  id="serviced-offices-from"
                                                                                  type="text"
                                                                                  value="2015-06-15"
                                                                                />,
                                                                              }
                                                                            }
                                                                            labelWidth={0}
                                                                            multiline={false}
                                                                            notched={false}
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            value="2015-06-15"
                                                                          >
                                                                            <ForwardRef(OutlinedInput)
                                                                              autoFocus={false}
                                                                              classes={
                                                                                Object {
                                                                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                                  "disabled": "Mui-disabled",
                                                                                  "error": "Mui-error",
                                                                                  "focused": "Mui-focused",
                                                                                  "input": "MuiOutlinedInput-input",
                                                                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                                  "marginDense": "MuiOutlinedInput-marginDense",
                                                                                  "multiline": "MuiOutlinedInput-multiline",
                                                                                  "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                                  "root": "MuiOutlinedInput-root",
                                                                                }
                                                                              }
                                                                              endAdornment={
                                                                                <ForwardRef(WithStyles)
                                                                                  position="end"
                                                                                >
                                                                                  <ForwardRef(WithStyles)
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <img
                                                                                      alt="open calendar"
                                                                                      src="calendar.svg"
                                                                                    />
                                                                                  </ForwardRef(WithStyles)>
                                                                                </ForwardRef(WithStyles)>
                                                                              }
                                                                              fullWidth={false}
                                                                              id="serviced-offices-from"
                                                                              inputRef={
                                                                                Object {
                                                                                  "current": <input
                                                                                    aria-invalid="false"
                                                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                    id="serviced-offices-from"
                                                                                    type="text"
                                                                                    value="2015-06-15"
                                                                                  />,
                                                                                }
                                                                              }
                                                                              labelWidth={0}
                                                                              multiline={false}
                                                                              notched={false}
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              value="2015-06-15"
                                                                            >
                                                                              <WithStyles(ForwardRef(InputBase))
                                                                                autoFocus={false}
                                                                                classes={
                                                                                  Object {
                                                                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                                    "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                                    "disabled": "Mui-disabled",
                                                                                    "error": "Mui-error",
                                                                                    "focused": "Mui-focused",
                                                                                    "input": "MuiOutlinedInput-input",
                                                                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                                    "marginDense": "MuiOutlinedInput-marginDense",
                                                                                    "multiline": "MuiOutlinedInput-multiline",
                                                                                    "notchedOutline": null,
                                                                                    "root": "MuiOutlinedInput-root",
                                                                                  }
                                                                                }
                                                                                endAdornment={
                                                                                  <ForwardRef(WithStyles)
                                                                                    position="end"
                                                                                  >
                                                                                    <ForwardRef(WithStyles)
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <img
                                                                                        alt="open calendar"
                                                                                        src="calendar.svg"
                                                                                      />
                                                                                    </ForwardRef(WithStyles)>
                                                                                  </ForwardRef(WithStyles)>
                                                                                }
                                                                                fullWidth={false}
                                                                                id="serviced-offices-from"
                                                                                inputComponent="input"
                                                                                inputRef={
                                                                                  Object {
                                                                                    "current": <input
                                                                                      aria-invalid="false"
                                                                                      class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                      id="serviced-offices-from"
                                                                                      type="text"
                                                                                      value="2015-06-15"
                                                                                    />,
                                                                                  }
                                                                                }
                                                                                multiline={false}
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                onFocus={[Function]}
                                                                                renderSuffix={[Function]}
                                                                                type="text"
                                                                                value="2015-06-15"
                                                                              >
                                                                                <ForwardRef(InputBase)
                                                                                  autoFocus={false}
                                                                                  classes={
                                                                                    Object {
                                                                                      "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                                      "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                                      "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                                      "disabled": "Mui-disabled Mui-disabled",
                                                                                      "error": "Mui-error Mui-error",
                                                                                      "focused": "Mui-focused Mui-focused",
                                                                                      "formControl": "MuiInputBase-formControl",
                                                                                      "fullWidth": "MuiInputBase-fullWidth",
                                                                                      "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                                      "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                                      "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                                      "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                                      "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                                    }
                                                                                  }
                                                                                  endAdornment={
                                                                                    <ForwardRef(WithStyles)
                                                                                      position="end"
                                                                                    >
                                                                                      <ForwardRef(WithStyles)
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <img
                                                                                          alt="open calendar"
                                                                                          src="calendar.svg"
                                                                                        />
                                                                                      </ForwardRef(WithStyles)>
                                                                                    </ForwardRef(WithStyles)>
                                                                                  }
                                                                                  fullWidth={false}
                                                                                  id="serviced-offices-from"
                                                                                  inputComponent="input"
                                                                                  inputRef={
                                                                                    Object {
                                                                                      "current": <input
                                                                                        aria-invalid="false"
                                                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                        id="serviced-offices-from"
                                                                                        type="text"
                                                                                        value="2015-06-15"
                                                                                      />,
                                                                                    }
                                                                                  }
                                                                                  multiline={false}
                                                                                  onBlur={[Function]}
                                                                                  onChange={[Function]}
                                                                                  onFocus={[Function]}
                                                                                  renderSuffix={[Function]}
                                                                                  type="text"
                                                                                  value="2015-06-15"
                                                                                >
                                                                                  <div
                                                                                    className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <input
                                                                                      aria-invalid={false}
                                                                                      autoFocus={false}
                                                                                      className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                      disabled={false}
                                                                                      id="serviced-offices-from"
                                                                                      onAnimationStart={[Function]}
                                                                                      onBlur={[Function]}
                                                                                      onChange={[Function]}
                                                                                      onFocus={[Function]}
                                                                                      required={false}
                                                                                      type="text"
                                                                                      value="2015-06-15"
                                                                                    />
                                                                                    <WithStyles(ForwardRef(InputAdornment))
                                                                                      position="end"
                                                                                    >
                                                                                      <ForwardRef(InputAdornment)
                                                                                        classes={
                                                                                          Object {
                                                                                            "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                                            "filled": "MuiInputAdornment-filled",
                                                                                            "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                                            "marginDense": "MuiInputAdornment-marginDense",
                                                                                            "positionEnd": "MuiInputAdornment-positionEnd",
                                                                                            "positionStart": "MuiInputAdornment-positionStart",
                                                                                            "root": "MuiInputAdornment-root",
                                                                                          }
                                                                                        }
                                                                                        position="end"
                                                                                      >
                                                                                        <div
                                                                                          className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                                        >
                                                                                          <WithStyles(ForwardRef(IconButton))
                                                                                            onClick={[Function]}
                                                                                          >
                                                                                            <ForwardRef(IconButton)
                                                                                              classes={
                                                                                                Object {
                                                                                                  "colorInherit": "MuiIconButton-colorInherit",
                                                                                                  "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                                  "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                                  "disabled": "Mui-disabled",
                                                                                                  "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                                  "edgeStart": "MuiIconButton-edgeStart",
                                                                                                  "label": "MuiIconButton-label",
                                                                                                  "root": "MuiIconButton-root",
                                                                                                  "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                                }
                                                                                              }
                                                                                              onClick={[Function]}
                                                                                            >
                                                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                                                centerRipple={true}
                                                                                                className="MuiIconButton-root"
                                                                                                disabled={false}
                                                                                                focusRipple={true}
                                                                                                onClick={[Function]}
                                                                                              >
                                                                                                <ForwardRef(ButtonBase)
                                                                                                  centerRipple={true}
                                                                                                  className="MuiIconButton-root"
                                                                                                  classes={
                                                                                                    Object {
                                                                                                      "disabled": "Mui-disabled",
                                                                                                      "focusVisible": "Mui-focusVisible",
                                                                                                      "root": "MuiButtonBase-root",
                                                                                                    }
                                                                                                  }
                                                                                                  disabled={false}
                                                                                                  focusRipple={true}
                                                                                                  onClick={[Function]}
                                                                                                >
                                                                                                  <button
                                                                                                    className="MuiButtonBase-root MuiIconButton-root"
                                                                                                    disabled={false}
                                                                                                    onBlur={[Function]}
                                                                                                    onClick={[Function]}
                                                                                                    onDragLeave={[Function]}
                                                                                                    onFocus={[Function]}
                                                                                                    onKeyDown={[Function]}
                                                                                                    onKeyUp={[Function]}
                                                                                                    onMouseDown={[Function]}
                                                                                                    onMouseLeave={[Function]}
                                                                                                    onMouseUp={[Function]}
                                                                                                    onTouchEnd={[Function]}
                                                                                                    onTouchMove={[Function]}
                                                                                                    onTouchStart={[Function]}
                                                                                                    tabIndex={0}
                                                                                                    type="button"
                                                                                                  >
                                                                                                    <span
                                                                                                      className="MuiIconButton-label"
                                                                                                    >
                                                                                                      <img
                                                                                                        alt="open calendar"
                                                                                                        src="calendar.svg"
                                                                                                      />
                                                                                                    </span>
                                                                                                    <NoSsr>
                                                                                                      <WithStyles(undefined)
                                                                                                        center={true}
                                                                                                      >
                                                                                                        <ForwardRef(TouchRipple)
                                                                                                          center={true}
                                                                                                          classes={
                                                                                                            Object {
                                                                                                              "child": "MuiTouchRipple-child",
                                                                                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                                              "ripple": "MuiTouchRipple-ripple",
                                                                                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                                              "root": "MuiTouchRipple-root",
                                                                                                            }
                                                                                                          }
                                                                                                        >
                                                                                                          <span
                                                                                                            className="MuiTouchRipple-root"
                                                                                                          >
                                                                                                            <TransitionGroup
                                                                                                              childFactory={[Function]}
                                                                                                              component={null}
                                                                                                              exit={true}
                                                                                                            />
                                                                                                          </span>
                                                                                                        </ForwardRef(TouchRipple)>
                                                                                                      </WithStyles(undefined)>
                                                                                                    </NoSsr>
                                                                                                  </button>
                                                                                                </ForwardRef(ButtonBase)>
                                                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                                                            </ForwardRef(IconButton)>
                                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                                        </div>
                                                                                      </ForwardRef(InputAdornment)>
                                                                                    </WithStyles(ForwardRef(InputAdornment))>
                                                                                    <WithStyles(ForwardRef(NotchedOutline))
                                                                                      className="MuiOutlinedInput-notchedOutline"
                                                                                      labelWidth={0}
                                                                                      notched={false}
                                                                                    >
                                                                                      <ForwardRef(NotchedOutline)
                                                                                        className="MuiOutlinedInput-notchedOutline"
                                                                                        classes={
                                                                                          Object {
                                                                                            "legend": "PrivateNotchedOutline-legend-70",
                                                                                            "root": "PrivateNotchedOutline-root-69",
                                                                                          }
                                                                                        }
                                                                                        labelWidth={0}
                                                                                        notched={false}
                                                                                      >
                                                                                        <fieldset
                                                                                          aria-hidden={true}
                                                                                          className="PrivateNotchedOutline-root-69 MuiOutlinedInput-notchedOutline"
                                                                                          style={
                                                                                            Object {
                                                                                              "paddingLeft": 8,
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <legend
                                                                                            className="PrivateNotchedOutline-legend-70"
                                                                                            style={
                                                                                              Object {
                                                                                                "width": 0.01,
                                                                                              }
                                                                                            }
                                                                                          >
                                                                                            <span
                                                                                              dangerouslySetInnerHTML={
                                                                                                Object {
                                                                                                  "__html": "&#8203;",
                                                                                                }
                                                                                              }
                                                                                            />
                                                                                          </legend>
                                                                                        </fieldset>
                                                                                      </ForwardRef(NotchedOutline)>
                                                                                    </WithStyles(ForwardRef(NotchedOutline))>
                                                                                  </div>
                                                                                </ForwardRef(InputBase)>
                                                                              </WithStyles(ForwardRef(InputBase))>
                                                                            </ForwardRef(OutlinedInput)>
                                                                          </WithStyles(ForwardRef(OutlinedInput))>
                                                                        </div>
                                                                      </ForwardRef(FormControl)>
                                                                    </WithStyles(ForwardRef(FormControl))>
                                                                  </ForwardRef(TextField)>
                                                                </WithStyles(ForwardRef(TextField))>
                                                              </Rifm>
                                                            </KeyboardDateInput>
                                                            <WithStyles(ForwardRef(Popover))
                                                              anchorOrigin={
                                                                Object {
                                                                  "horizontal": "center",
                                                                  "vertical": "bottom",
                                                                }
                                                              }
                                                              onClose={[Function]}
                                                              open={false}
                                                              transformOrigin={
                                                                Object {
                                                                  "horizontal": "center",
                                                                  "vertical": "top",
                                                                }
                                                              }
                                                            >
                                                              <ForwardRef(Popover)
                                                                anchorOrigin={
                                                                  Object {
                                                                    "horizontal": "center",
                                                                    "vertical": "bottom",
                                                                  }
                                                                }
                                                                classes={
                                                                  Object {
                                                                    "paper": "MuiPopover-paper",
                                                                    "root": "MuiPopover-root",
                                                                  }
                                                                }
                                                                onClose={[Function]}
                                                                open={false}
                                                                transformOrigin={
                                                                  Object {
                                                                    "horizontal": "center",
                                                                    "vertical": "top",
                                                                  }
                                                                }
                                                              >
                                                                <ForwardRef(Modal)
                                                                  BackdropProps={
                                                                    Object {
                                                                      "invisible": true,
                                                                    }
                                                                  }
                                                                  className="MuiPopover-root"
                                                                  onClose={[Function]}
                                                                  open={false}
                                                                />
                                                              </ForwardRef(Popover)>
                                                            </WithStyles(ForwardRef(Popover))>
                                                          </InlineWrapper>
                                                        </Wrapper>
                                                      </PickerWithState>
                                                    </MuiPickersUtilsProvider>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Component>
                                          </StyledComponent>
                                        </Styled(Component)>
                                        <Styled(Input)
                                          id="serviced-offices-min-lease"
                                          label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                          min={1}
                                          onChange={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-cvbbAY",
                                                  "isStatic": false,
                                                  "lastClassName": "hNJrbl",
                                                  "rules": Array [
                                                    "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                                  ],
                                                },
                                                "displayName": "Styled(Input)",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-cvbbAY",
                                                "target": [Function],
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="serviced-offices-min-lease"
                                            label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                            min={1}
                                            onChange={[Function]}
                                            type="number"
                                            value=""
                                          >
                                            <Input
                                              className="sc-cvbbAY hNJrbl"
                                              id="serviced-offices-min-lease"
                                              label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                              min={1}
                                              onChange={[Function]}
                                              type="number"
                                              value=""
                                            >
                                              <styled.div
                                                className="sc-cvbbAY hNJrbl"
                                              >
                                                <StyledComponent
                                                  className="sc-cvbbAY hNJrbl"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-dnqmqq",
                                                        "isStatic": false,
                                                        "lastClassName": "fabHwL",
                                                        "rules": Array [
                                                          "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-dnqmqq",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-dnqmqq fabHwL sc-cvbbAY hNJrbl"
                                                  >
                                                    <label
                                                      htmlFor="serviced-offices-min-lease"
                                                    >
                                                      ONBOARDING_SPACE_FLEX_MINLEASE
                                                    </label>
                                                    <styled.input
                                                      id="serviced-offices-min-lease"
                                                      min={1}
                                                      onChange={[Function]}
                                                      onKeyDown={[Function]}
                                                      type="number"
                                                      value=""
                                                    >
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-iwsKbI",
                                                              "isStatic": false,
                                                              "lastClassName": "bvnVDt",
                                                              "rules": Array [
                                                                "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                                [Function],
                                                                ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                                [Function],
                                                                ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                                [Function],
                                                                ";
    border: 1px solid ",
                                                                [Function],
                                                                ";
  }
",
                                                              ],
                                                            },
                                                            "displayName": "styled.input",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-iwsKbI",
                                                            "target": "input",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        id="serviced-offices-min-lease"
                                                        min={1}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        type="number"
                                                        value=""
                                                      >
                                                        <input
                                                          className="sc-iwsKbI bvnVDt"
                                                          id="serviced-offices-min-lease"
                                                          min={1}
                                                          onChange={[Function]}
                                                          onKeyDown={[Function]}
                                                          type="number"
                                                          value=""
                                                        />
                                                      </StyledComponent>
                                                    </styled.input>
                                                    <styled.div>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-gZMcBi",
                                                              "isStatic": false,
                                                              "lastClassName": "cEVqmM",
                                                              "rules": Array [
                                                                "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.div",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-gZMcBi",
                                                            "target": "div",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <div
                                                          className="sc-gZMcBi cEVqmM"
                                                        />
                                                      </StyledComponent>
                                                    </styled.div>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Input>
                                          </StyledComponent>
                                        </Styled(Input)>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                  <Styled(Styled(Input))
                                    id="serviced-offices-price"
                                    label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                                    min={0}
                                    onChange={[Function]}
                                    placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                    type="number"
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-jWBwVP",
                                            "isStatic": false,
                                            "lastClassName": "jqwFAo",
                                            "rules": Array [
                                              "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                              "
  width: 178px;
",
                                            ],
                                          },
                                          "displayName": "Styled(Styled(Input))",
                                          "foldedComponentIds": Array [
                                            "sc-cvbbAY",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-jWBwVP",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="serviced-offices-price"
                                      label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                                      min={0}
                                      onChange={[Function]}
                                      placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                      type="number"
                                      value=""
                                    >
                                      <Input
                                        className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                        id="serviced-offices-price"
                                        label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                                        min={0}
                                        onChange={[Function]}
                                        placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                        type="number"
                                        value=""
                                      >
                                        <styled.div
                                          className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                        >
                                          <StyledComponent
                                            className="sc-cvbbAY sc-jWBwVP jqwFAo"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-dnqmqq",
                                                  "isStatic": false,
                                                  "lastClassName": "fabHwL",
                                                  "rules": Array [
                                                    "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-dnqmqq",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-dnqmqq fabHwL sc-cvbbAY sc-jWBwVP jqwFAo"
                                            >
                                              <label
                                                htmlFor="serviced-offices-price"
                                              >
                                                ONBOARDING_SPACE_SO_PRICE (Kr)
                                              </label>
                                              <styled.input
                                                id="serviced-offices-price"
                                                min={0}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                                type="number"
                                                value=""
                                              >
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-iwsKbI",
                                                        "isStatic": false,
                                                        "lastClassName": "bvnVDt",
                                                        "rules": Array [
                                                          "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                          [Function],
                                                          ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                          [Function],
                                                          ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                          [Function],
                                                          ";
    border: 1px solid ",
                                                          [Function],
                                                          ";
  }
",
                                                        ],
                                                      },
                                                      "displayName": "styled.input",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-iwsKbI",
                                                      "target": "input",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  id="serviced-offices-price"
                                                  min={0}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                                  type="number"
                                                  value=""
                                                >
                                                  <input
                                                    className="sc-iwsKbI bvnVDt"
                                                    id="serviced-offices-price"
                                                    min={0}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                                    type="number"
                                                    value=""
                                                  />
                                                </StyledComponent>
                                              </styled.input>
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-gZMcBi",
                                                        "isStatic": false,
                                                        "lastClassName": "cEVqmM",
                                                        "rules": Array [
                                                          "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-gZMcBi",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-gZMcBi cEVqmM"
                                                  />
                                                </StyledComponent>
                                              </styled.div>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Input>
                                    </StyledComponent>
                                  </Styled(Styled(Input))>
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-jlyJG",
                                            "isStatic": false,
                                            "lastClassName": "kdMBBh",
                                            "rules": Array [
                                              "
  button {
    margin-right: 10px;
  }
  button:last-child {
    margin-right: 0;
  }
  margin-top: 20px;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-jlyJG",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-jlyJG kdMBBh"
                                      >
                                        <styled.button
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-ckVGcZ",
                                                  "isStatic": false,
                                                  "lastClassName": "fZeyQf",
                                                  "rules": Array [
                                                    "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                                                  ],
                                                },
                                                "displayName": "styled.button",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-ckVGcZ",
                                                "target": "button",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <button
                                              className="sc-ckVGcZ fZeyQf"
                                              onClick={[Function]}
                                            >
                                              ONBOARDING_SPACE_SO_SAVE
                                            </button>
                                          </StyledComponent>
                                        </styled.button>
                                        <Styled(styled.button)
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-brqgnP",
                                                  "isStatic": false,
                                                  "lastClassName": "jWfQsJ",
                                                  "rules": Array [
                                                    "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                                                    "
  color: #6cb9d5;
  background-color: #ffffff;
  box-sizing: border-box;
  min-width: 110px;
",
                                                  ],
                                                },
                                                "displayName": "Styled(styled.button)",
                                                "foldedComponentIds": Array [
                                                  "sc-ckVGcZ",
                                                ],
                                                "render": [Function],
                                                "styledComponentId": "sc-brqgnP",
                                                "target": "button",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <button
                                              className="sc-ckVGcZ sc-brqgnP jWfQsJ"
                                              onClick={[Function]}
                                            >
                                              ONBOARDING_SPACE_SO_CANCEL
                                            </button>
                                          </StyledComponent>
                                        </Styled(styled.button)>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </ServicedOffices>
                  </SpaceAvailabilityFlex>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jwKygS",
                      "isStatic": false,
                      "lastClassName": "hMutZY",
                      "rules": Array [
                        "
  margin-bottom: 50px;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jwKygS",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-jwKygS hMutZY"
                >
                  <Styled(styled.h3)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-btzYZH",
                            "isStatic": false,
                            "lastClassName": "gGvNct",
                            "rules": Array [
                              "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                            ],
                          },
                          "displayName": "Styled(styled.h3)",
                          "foldedComponentIds": Array [
                            "sc-htoDjs",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-btzYZH",
                          "target": "h3",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h3
                        className="sc-htoDjs sc-btzYZH gGvNct"
                      >
                        ONBOARDING_SPACE_PHOTOS
                      </h3>
                    </StyledComponent>
                  </Styled(styled.h3)>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bYSBpT",
                            "isStatic": false,
                            "lastClassName": "frPtmM",
                            "rules": Array [
                              "
  padding: 0 0 20px 0;
  color: #828286
  font-size: 14px;
  font-weight: 400;
  line-height: 18px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bYSBpT",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bYSBpT frPtmM"
                      >
                        ONBOARDING_PHOTOS_INFO
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <Styled(Component)
                    accept="image/jpeg, image/png"
                    isImage={true}
                    items={Array []}
                    setItems={[Function]}
                    setUploaded={[Function]}
                  >
                    <StyledComponent
                      accept="image/jpeg, image/png"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-caSCKo",
                            "isStatic": false,
                            "lastClassName": "dUjazM",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
",
                            ],
                          },
                          "displayName": "Styled(Component)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-caSCKo",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      isImage={true}
                      items={Array []}
                      setItems={[Function]}
                      setUploaded={[Function]}
                    >
                      <Component
                        accept="image/jpeg, image/png"
                        className="sc-caSCKo dUjazM"
                        isImage={true}
                        items={Array []}
                        setItems={[Function]}
                        setUploaded={[Function]}
                      >
                        <div
                          className="sc-caSCKo dUjazM"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-fAjcbJ",
                                    "isStatic": false,
                                    "lastClassName": "ifYukh",
                                    "rules": Array [
                                      "
  display: inline-block;
  > div {
    border-radius: 4px;
    border: 1px solid #ced4da;
    box-sizing: border-box;
    width: 194px;
    height: 165px;
    :hover {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
    &.isDragging {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-fAjcbJ",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-fAjcbJ ifYukh"
                              >
                                <div
                                  className=""
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onDragEnter={[Function]}
                                  onDragLeave={[Function]}
                                  onDragOver={[Function]}
                                  onDrop={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  tabIndex={0}
                                >
                                  <input
                                    accept="image/jpeg, image/png"
                                    autoComplete="off"
                                    multiple={true}
                                    onChange={[Function]}
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "display": "none",
                                      }
                                    }
                                    tabIndex={-1}
                                    type="file"
                                  />
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-lhVmIH",
                                            "isStatic": false,
                                            "lastClassName": "exXLRv",
                                            "rules": Array [
                                              "
  padding: 20px;
  text-align: center;
  > p {
    font-size: 18px;
    font-weight: 500;
    margin-top: 5px;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-lhVmIH",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-lhVmIH exXLRv"
                                      >
                                        <Plus2
                                          size="3em"
                                        >
                                          <svg
                                            height="3em"
                                            version="1.1"
                                            viewBox="0 0 34 34"
                                            width="3em"
                                          >
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                              id="UI-KIT"
                                              stroke="#6CB9D5"
                                              strokeWidth="1"
                                            >
                                              <g
                                                fill="#6CB9D5"
                                                fillRule="nonzero"
                                                id="icons"
                                                transform="translate(-265.000000, -325.000000)"
                                              >
                                                <path
                                                  d="M293.618972,330.351591 C293.150185,329.882803 292.390811,329.882803 291.922136,330.351591 L281.970506,340.303232 L272.018989,330.351703 C271.550202,329.882916 270.790828,329.882916 270.322153,330.351703 C269.853366,330.820491 269.853366,331.579866 270.322153,332.048541 L280.27367,342.00007 L270.322153,351.951599 C269.853366,352.420387 269.853366,353.179762 270.322153,353.648437 C270.55649,353.882775 270.863615,354 271.170627,354 C271.47764,354 271.784652,353.882775 272.019102,353.648437 L281.970506,343.696908 L291.922024,353.648437 C292.156361,353.882775 292.463486,354 292.770498,354 C293.07751,354 293.384523,353.882775 293.618972,353.648437 C294.08776,353.17965 294.08776,352.420274 293.618972,351.951599 L283.667343,342.00007 L293.61886,332.048541 C294.087647,331.579754 294.087647,330.820378 293.618972,330.351591 Z"
                                                  id="add"
                                                  transform="translate(281.970563, 342.000000) rotate(45.000000) translate(-281.970563, -342.000000) "
                                                />
                                              </g>
                                            </g>
                                          </svg>
                                        </Plus2>
                                        <p>
                                          ONBOARDING_PHOTOS_ADD
                                          <br />
                                          ONBOARDING_PHOTOS_DRAG
                                        </p>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </Component>
                    </StyledComponent>
                  </Styled(Component)>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jwKygS",
                      "isStatic": false,
                      "lastClassName": "hMutZY",
                      "rules": Array [
                        "
  margin-bottom: 50px;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jwKygS",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-jwKygS hMutZY"
                >
                  <Styled(styled.h3)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-btzYZH",
                            "isStatic": false,
                            "lastClassName": "gGvNct",
                            "rules": Array [
                              "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                            ],
                          },
                          "displayName": "Styled(styled.h3)",
                          "foldedComponentIds": Array [
                            "sc-htoDjs",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-btzYZH",
                          "target": "h3",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h3
                        className="sc-htoDjs sc-btzYZH gGvNct"
                      >
                        ONBOARDING_SPACE_FLOORPLAN
                      </h3>
                    </StyledComponent>
                  </Styled(styled.h3)>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bYSBpT",
                            "isStatic": false,
                            "lastClassName": "frPtmM",
                            "rules": Array [
                              "
  padding: 0 0 20px 0;
  color: #828286
  font-size: 14px;
  font-weight: 400;
  line-height: 18px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bYSBpT",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bYSBpT frPtmM"
                      >
                        ONBOARDING_FLOORPLAN_INFO
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <Styled(Component)
                    accept="image/jpeg, image/png, application/pdf, .bim"
                    isImage={true}
                    items={Array []}
                    setItems={[Function]}
                    setUploaded={[Function]}
                  >
                    <StyledComponent
                      accept="image/jpeg, image/png, application/pdf, .bim"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-caSCKo",
                            "isStatic": false,
                            "lastClassName": "dUjazM",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
",
                            ],
                          },
                          "displayName": "Styled(Component)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-caSCKo",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      isImage={true}
                      items={Array []}
                      setItems={[Function]}
                      setUploaded={[Function]}
                    >
                      <Component
                        accept="image/jpeg, image/png, application/pdf, .bim"
                        className="sc-caSCKo dUjazM"
                        isImage={true}
                        items={Array []}
                        setItems={[Function]}
                        setUploaded={[Function]}
                      >
                        <div
                          className="sc-caSCKo dUjazM"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-fAjcbJ",
                                    "isStatic": false,
                                    "lastClassName": "ifYukh",
                                    "rules": Array [
                                      "
  display: inline-block;
  > div {
    border-radius: 4px;
    border: 1px solid #ced4da;
    box-sizing: border-box;
    width: 194px;
    height: 165px;
    :hover {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
    &.isDragging {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-fAjcbJ",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-fAjcbJ ifYukh"
                              >
                                <div
                                  className=""
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onDragEnter={[Function]}
                                  onDragLeave={[Function]}
                                  onDragOver={[Function]}
                                  onDrop={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  tabIndex={0}
                                >
                                  <input
                                    accept="image/jpeg, image/png, application/pdf, .bim"
                                    autoComplete="off"
                                    multiple={true}
                                    onChange={[Function]}
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "display": "none",
                                      }
                                    }
                                    tabIndex={-1}
                                    type="file"
                                  />
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-lhVmIH",
                                            "isStatic": false,
                                            "lastClassName": "exXLRv",
                                            "rules": Array [
                                              "
  padding: 20px;
  text-align: center;
  > p {
    font-size: 18px;
    font-weight: 500;
    margin-top: 5px;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-lhVmIH",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-lhVmIH exXLRv"
                                      >
                                        <Plus2
                                          size="3em"
                                        >
                                          <svg
                                            height="3em"
                                            version="1.1"
                                            viewBox="0 0 34 34"
                                            width="3em"
                                          >
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                              id="UI-KIT"
                                              stroke="#6CB9D5"
                                              strokeWidth="1"
                                            >
                                              <g
                                                fill="#6CB9D5"
                                                fillRule="nonzero"
                                                id="icons"
                                                transform="translate(-265.000000, -325.000000)"
                                              >
                                                <path
                                                  d="M293.618972,330.351591 C293.150185,329.882803 292.390811,329.882803 291.922136,330.351591 L281.970506,340.303232 L272.018989,330.351703 C271.550202,329.882916 270.790828,329.882916 270.322153,330.351703 C269.853366,330.820491 269.853366,331.579866 270.322153,332.048541 L280.27367,342.00007 L270.322153,351.951599 C269.853366,352.420387 269.853366,353.179762 270.322153,353.648437 C270.55649,353.882775 270.863615,354 271.170627,354 C271.47764,354 271.784652,353.882775 272.019102,353.648437 L281.970506,343.696908 L291.922024,353.648437 C292.156361,353.882775 292.463486,354 292.770498,354 C293.07751,354 293.384523,353.882775 293.618972,353.648437 C294.08776,353.17965 294.08776,352.420274 293.618972,351.951599 L283.667343,342.00007 L293.61886,332.048541 C294.087647,331.579754 294.087647,330.820378 293.618972,330.351591 Z"
                                                  id="add"
                                                  transform="translate(281.970563, 342.000000) rotate(45.000000) translate(-281.970563, -342.000000) "
                                                />
                                              </g>
                                            </g>
                                          </svg>
                                        </Plus2>
                                        <p>
                                          ONBOARDING_FLOORPLAN_ADD
                                          <br />
                                          ONBOARDING_FLOORPLAN_DRAG
                                        </p>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </Component>
                    </StyledComponent>
                  </Styled(Component)>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fYxtnH",
                      "isStatic": false,
                      "lastClassName": "ljjRmk",
                      "rules": Array [
                        "
  max-width: 516px;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-fYxtnH",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-fYxtnH ljjRmk"
                />
              </StyledComponent>
            </styled.div>
            <NextBack
              back={
                Object {
                  "label": "ONBOARDING_BACK",
                  "onClick": [Function],
                }
              }
              next={
                Object {
                  "label": "ONBOARDING_CONTINUE",
                  "onClick": [Function],
                }
              }
            >
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bRBYWo",
                        "isStatic": false,
                        "lastClassName": "dGceFG",
                        "rules": Array [
                          "
  overflow: hidden;
  padding-top: 10px;
  margin-bottom: 30px;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bRBYWo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-bRBYWo dGceFG"
                  >
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-hzDkRC",
                              "isStatic": false,
                              "lastClassName": "kzdyab",
                              "rules": Array [
                                "
  box-sizing: border-box;
  height: 1px;
  width: 100%;
  margin: 15px 0 10px 0;
  border: 1px solid #ddddd0;
  border-top: 0;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-hzDkRC",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-hzDkRC kzdyab"
                        />
                      </StyledComponent>
                    </styled.div>
                    <Styled(styled.button)
                      data-testid="button-back"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        data-testid="button-back"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-jhAzac",
                              "isStatic": false,
                              "lastClassName": "gOBEDB",
                              "rules": Array [
                                "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                                "
  color: #404042;
  background-color: #ffffff;
  float: left;
",
                              ],
                            },
                            "displayName": "Styled(styled.button)",
                            "foldedComponentIds": Array [
                              "sc-ckVGcZ",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-jhAzac",
                            "target": "button",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <button
                          className="sc-ckVGcZ sc-jhAzac gOBEDB"
                          data-testid="button-back"
                          onClick={[Function]}
                        >
                          ONBOARDING_BACK
                        </button>
                      </StyledComponent>
                    </Styled(styled.button)>
                    <Styled(styled.button)
                      data-testid="button-next"
                      id="button-next"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        data-testid="button-next"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-fBuWsC",
                              "isStatic": false,
                              "lastClassName": "csLfTa",
                              "rules": Array [
                                "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                                "
  background-color: ",
                                [Function],
                                ";
  color: #ffffff;
  float: right;
",
                              ],
                            },
                            "displayName": "Styled(styled.button)",
                            "foldedComponentIds": Array [
                              "sc-ckVGcZ",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-fBuWsC",
                            "target": "button",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="button-next"
                        onClick={[Function]}
                      >
                        <button
                          className="sc-ckVGcZ sc-fBuWsC csLfTa"
                          data-testid="button-next"
                          id="button-next"
                          onClick={[Function]}
                        >
                          ONBOARDING_CONTINUE
                        </button>
                      </StyledComponent>
                    </Styled(styled.button)>
                  </div>
                </StyledComponent>
              </styled.div>
            </NextBack>
          </SpaceForm>
        </div>
      </StyledComponent>
    </styled.div>
  </Space>
</Router>
`;
