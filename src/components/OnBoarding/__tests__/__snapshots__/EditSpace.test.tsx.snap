// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders EditSpace 1`] = `
<EditSpace>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-btzYZH",
            "isStatic": false,
            "lastClassName": "kjokPs",
            "rules": Array [
              "
  @media (min-width: 1064px) {
    margin: 0 auto;
    padding: 0 20px;
    width: 1024px;
  }
  @media (min-width: 768px) and (max-width: 1063px) {
    margin: 0;
    padding: 0 20px;
  }
  @media (max-width: 767px) {
    margin: 0;
    padding: 0 10px;
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-btzYZH",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="sc-btzYZH kjokPs"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-lhVmIH",
                  "isStatic": false,
                  "lastClassName": "hQbDLg",
                  "rules": Array [
                    "
  padding: 40px 0 0 0;
  color: #404042;
  font-size: 32px;
  font-weight: 500;
  line-height: 41px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-lhVmIH",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-lhVmIH hQbDLg"
            >
              ONBOARDING_TITLE_EDIT_SPACE
            </div>
          </StyledComponent>
        </styled.div>
        <SpaceForm
          isEditing={true}
          space={
            Object {
              "availabilityFixed": 2020-01-01T00:00:00.000Z,
              "fitout": Array [
                Object {
                  "amount": 1000,
                  "description": "FitOut1",
                  "name": "FitOut1",
                },
              ],
              "fixedDesks": Object {
                "availableFrom": 2020-01-01T00:00:00.000Z,
                "currencyCode": "NOK",
                "desks": 0,
                "frequency": "Monthly",
                "minLease": 0,
                "price": 0,
              },
              "floorPlan": Array [],
              "hotDesks": Object {
                "availableFrom": 2020-01-01T00:00:00.000Z,
                "currencyCode": "NOK",
                "desks": 0,
                "frequency": "Monthly",
                "minLease": 0,
                "price": 0,
              },
              "id": "0",
              "images": Array [],
              "months": undefined,
              "servicedOffices": Array [],
              "spaceDescription": "",
              "spaceFloor": undefined,
              "spaceFloored": "",
              "spaceHighlights": "",
              "spaceMatterPort": "",
              "spaceName": "",
              "spaceRent": undefined,
              "spaceServices": undefined,
              "spaceServicesNotNegotiable": false,
              "spaceSize": undefined,
              "spaceSizeCommon": undefined,
              "status": 1,
              "type": "FLEX",
              "use": "",
            }
          }
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dNLxif",
                    "isStatic": false,
                    "lastClassName": "TPofT",
                    "rules": Array [
                      "
  max-width: 516px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dNLxif",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={
                Object {
                  "current": <div
                    class="sc-dNLxif TPofT"
                  >
                    <div
                      class="sc-ktHwxA jprFbj"
                    >
                      <h3
                        class="sc-bwzfXH sc-hEsumM fQjbcV"
                      >
                        ONBOARDING_SPACE_DETAILS_FLEX
                      </h3>
                      <div
                        class="sc-bxivhb fnykrF sc-jqCOkK cMtsiU"
                      >
                        <label
                          for="spaceName"
                        >
                          ONBOARDING_SPACE_NAME
                        </label>
                        <input
                          class="sc-ifAKCX gtFQcX"
                          id="spaceName"
                          placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                          type="text"
                          value=""
                        />
                        <div
                          class="sc-EHOje lpgKwh"
                        />
                      </div>
                      <div
                        class="sc-bZQynM kGoOcS"
                      >
                        <label
                          for="spaceDescription"
                        >
                          ONBOARDING_SPACE_DESCRIPTION
                        </label>
                        <div />
                        <div
                          class="sc-htoDjs eFaJIF"
                        />
                      </div>
                      <div
                        class="sc-bZQynM kGoOcS"
                      >
                        <label
                          for="spaceHighlights"
                        >
                          ONBOARDING_SPACE_HIGHLIGHTS
                        </label>
                        <div />
                        <div
                          class="sc-htoDjs eFaJIF"
                        />
                      </div>
                    </div>
                    <div
                      class="sc-ktHwxA jprFbj"
                    >
                      <div
                        class="sc-bxivhb fnykrF sc-jqCOkK cMtsiU"
                      >
                        <label
                          for="spaceMatterPort"
                        >
                          ONBOARDING_SPACE_MATTERPORT
                        </label>
                        <input
                          class="sc-ifAKCX gtFQcX"
                          id="spaceMatterPort"
                          type="text"
                          value=""
                        />
                        <div
                          class="sc-EHOje lpgKwh"
                        />
                      </div>
                    </div>
                  </div>,
                }
              }
            >
              <div
                className="sc-dNLxif TPofT"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ktHwxA",
                          "isStatic": false,
                          "lastClassName": "jprFbj",
                          "rules": Array [
                            "
  margin-bottom: 50px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-ktHwxA",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-ktHwxA jprFbj"
                    >
                      <Styled(styled.h3)>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-hEsumM",
                                "isStatic": false,
                                "lastClassName": "fQjbcV",
                                "rules": Array [
                                  "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                                  "
  margin-bottom: 0;
",
                                ],
                              },
                              "displayName": "Styled(styled.h3)",
                              "foldedComponentIds": Array [
                                "sc-bwzfXH",
                              ],
                              "render": [Function],
                              "styledComponentId": "sc-hEsumM",
                              "target": "h3",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <h3
                            className="sc-bwzfXH sc-hEsumM fQjbcV"
                          >
                            ONBOARDING_SPACE_DETAILS_FLEX
                          </h3>
                        </StyledComponent>
                      </Styled(styled.h3)>
                      <Styled(Input)
                        id="spaceName"
                        label="ONBOARDING_SPACE_NAME"
                        onChange={[Function]}
                        placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                        type="text"
                        value=""
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jqCOkK",
                                "isStatic": false,
                                "lastClassName": "cMtsiU",
                                "rules": Array [
                                  "
  width: 100%;
  margin-top: 20px;
",
                                ],
                              },
                              "displayName": "Styled(Input)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-jqCOkK",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="spaceName"
                          label="ONBOARDING_SPACE_NAME"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                          type="text"
                          value=""
                        >
                          <Input
                            className="sc-jqCOkK cMtsiU"
                            id="spaceName"
                            label="ONBOARDING_SPACE_NAME"
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                            type="text"
                            value=""
                          >
                            <styled.div
                              className="sc-jqCOkK cMtsiU"
                            >
                              <StyledComponent
                                className="sc-jqCOkK cMtsiU"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "fnykrF",
                                      "rules": Array [
                                        "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-bxivhb fnykrF sc-jqCOkK cMtsiU"
                                >
                                  <label
                                    htmlFor="spaceName"
                                  >
                                    ONBOARDING_SPACE_NAME
                                  </label>
                                  <styled.input
                                    id="spaceName"
                                    onChange={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                    type="text"
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "gtFQcX",
                                            "rules": Array [
                                              "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                              [Function],
                                              ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                              [Function],
                                              ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                              [Function],
                                              ";
    border: 1px solid ",
                                              [Function],
                                              ";
  }
",
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="spaceName"
                                      onChange={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                      type="text"
                                      value=""
                                    >
                                      <input
                                        className="sc-ifAKCX gtFQcX"
                                        id="spaceName"
                                        onChange={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                        type="text"
                                        value=""
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-EHOje",
                                            "isStatic": false,
                                            "lastClassName": "lpgKwh",
                                            "rules": Array [
                                              "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-EHOje",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-EHOje lpgKwh"
                                      />
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </Input>
                        </StyledComponent>
                      </Styled(Input)>
                      <RichTextArea
                        id="spaceDescription"
                        label="ONBOARDING_SPACE_DESCRIPTION"
                        onChange={[Function]}
                        placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                        rows={4}
                        value=""
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "kGoOcS",
                                  "rules": Array [
                                    "
  margin: 20px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-bZQynM kGoOcS"
                            >
                              <label
                                htmlFor="spaceDescription"
                              >
                                ONBOARDING_SPACE_DESCRIPTION
                              </label>
                              <Styled(ComponentToMock)
                                formats={
                                  Array [
                                    "bold",
                                    "italic",
                                    "list",
                                  ]
                                }
                                height={112}
                                id="spaceDescription"
                                modules={
                                  Object {
                                    "toolbar": Array [
                                      Array [
                                        "bold",
                                        "italic",
                                      ],
                                      Array [
                                        Object {
                                          "list": "ordered",
                                        },
                                        Object {
                                          "list": "bullet",
                                        },
                                      ],
                                      Array [
                                        "clean",
                                      ],
                                    ],
                                  }
                                }
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                value=""
                              >
                                <StyledComponent
                                  formats={
                                    Array [
                                      "bold",
                                      "italic",
                                      "list",
                                    ]
                                  }
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-gzVnrw",
                                        "isStatic": false,
                                        "lastClassName": "kvtEGk",
                                        "rules": Array [
                                          "
  margin-top: 0;
  margin-bottom: 6px;
  resize: none;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                          [Function],
                                          ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  :focus {
    outline: 1px solid ",
                                          [Function],
                                          ";
    border: 1px solid ",
                                          [Function],
                                          ";
  }
  .ql-toolbar.ql-snow {
    border: 1px solid ",
                                          [Function],
                                          ";
    border-radius: 3px 3px 0 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-container.ql-snow {
    border: 1px solid ",
                                          [Function],
                                          ";
    border-radius: 0 0 3px 3px;
    border-top: 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-editor {
    min-height: ",
                                          [Function],
                                          "px;
    background: white;
  }
",
                                        ],
                                      },
                                      "displayName": "Styled(ComponentToMock)",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-gzVnrw",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  height={112}
                                  id="spaceDescription"
                                  modules={
                                    Object {
                                      "toolbar": Array [
                                        Array [
                                          "bold",
                                          "italic",
                                        ],
                                        Array [
                                          Object {
                                            "list": "ordered",
                                          },
                                          Object {
                                            "list": "bullet",
                                          },
                                        ],
                                        Array [
                                          "clean",
                                        ],
                                      ],
                                    }
                                  }
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                  value=""
                                >
                                  <ComponentToMock
                                    className="sc-gzVnrw kvtEGk"
                                    formats={
                                      Array [
                                        "bold",
                                        "italic",
                                        "list",
                                      ]
                                    }
                                    height={112}
                                    id="spaceDescription"
                                    modules={
                                      Object {
                                        "toolbar": Array [
                                          Array [
                                            "bold",
                                            "italic",
                                          ],
                                          Array [
                                            Object {
                                              "list": "ordered",
                                            },
                                            Object {
                                              "list": "bullet",
                                            },
                                          ],
                                          Array [
                                            "clean",
                                          ],
                                        ],
                                      }
                                    }
                                    onChange={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                    value=""
                                  >
                                    <div />
                                  </ComponentToMock>
                                </StyledComponent>
                              </Styled(ComponentToMock)>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htoDjs",
                                        "isStatic": false,
                                        "lastClassName": "eFaJIF",
                                        "rules": Array [
                                          "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htoDjs",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-htoDjs eFaJIF"
                                  />
                                </StyledComponent>
                              </styled.div>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </RichTextArea>
                      <RichTextArea
                        id="spaceHighlights"
                        label="ONBOARDING_SPACE_HIGHLIGHTS"
                        onChange={[Function]}
                        placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                        rows={4}
                        value=""
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "kGoOcS",
                                  "rules": Array [
                                    "
  margin: 20px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-bZQynM kGoOcS"
                            >
                              <label
                                htmlFor="spaceHighlights"
                              >
                                ONBOARDING_SPACE_HIGHLIGHTS
                              </label>
                              <Styled(ComponentToMock)
                                formats={
                                  Array [
                                    "bold",
                                    "italic",
                                    "list",
                                  ]
                                }
                                height={112}
                                id="spaceHighlights"
                                modules={
                                  Object {
                                    "toolbar": Array [
                                      Array [
                                        "bold",
                                        "italic",
                                      ],
                                      Array [
                                        Object {
                                          "list": "ordered",
                                        },
                                        Object {
                                          "list": "bullet",
                                        },
                                      ],
                                      Array [
                                        "clean",
                                      ],
                                    ],
                                  }
                                }
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                value=""
                              >
                                <StyledComponent
                                  formats={
                                    Array [
                                      "bold",
                                      "italic",
                                      "list",
                                    ]
                                  }
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-gzVnrw",
                                        "isStatic": false,
                                        "lastClassName": "kvtEGk",
                                        "rules": Array [
                                          "
  margin-top: 0;
  margin-bottom: 6px;
  resize: none;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                          [Function],
                                          ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  :focus {
    outline: 1px solid ",
                                          [Function],
                                          ";
    border: 1px solid ",
                                          [Function],
                                          ";
  }
  .ql-toolbar.ql-snow {
    border: 1px solid ",
                                          [Function],
                                          ";
    border-radius: 3px 3px 0 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-container.ql-snow {
    border: 1px solid ",
                                          [Function],
                                          ";
    border-radius: 0 0 3px 3px;
    border-top: 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-editor {
    min-height: ",
                                          [Function],
                                          "px;
    background: white;
  }
",
                                        ],
                                      },
                                      "displayName": "Styled(ComponentToMock)",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-gzVnrw",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  height={112}
                                  id="spaceHighlights"
                                  modules={
                                    Object {
                                      "toolbar": Array [
                                        Array [
                                          "bold",
                                          "italic",
                                        ],
                                        Array [
                                          Object {
                                            "list": "ordered",
                                          },
                                          Object {
                                            "list": "bullet",
                                          },
                                        ],
                                        Array [
                                          "clean",
                                        ],
                                      ],
                                    }
                                  }
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                  value=""
                                >
                                  <ComponentToMock
                                    className="sc-gzVnrw kvtEGk"
                                    formats={
                                      Array [
                                        "bold",
                                        "italic",
                                        "list",
                                      ]
                                    }
                                    height={112}
                                    id="spaceHighlights"
                                    modules={
                                      Object {
                                        "toolbar": Array [
                                          Array [
                                            "bold",
                                            "italic",
                                          ],
                                          Array [
                                            Object {
                                              "list": "ordered",
                                            },
                                            Object {
                                              "list": "bullet",
                                            },
                                          ],
                                          Array [
                                            "clean",
                                          ],
                                        ],
                                      }
                                    }
                                    onChange={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                    value=""
                                  >
                                    <div />
                                  </ComponentToMock>
                                </StyledComponent>
                              </Styled(ComponentToMock)>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htoDjs",
                                        "isStatic": false,
                                        "lastClassName": "eFaJIF",
                                        "rules": Array [
                                          "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htoDjs",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-htoDjs eFaJIF"
                                  />
                                </StyledComponent>
                              </styled.div>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </RichTextArea>
                    </div>
                  </StyledComponent>
                </styled.div>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ktHwxA",
                          "isStatic": false,
                          "lastClassName": "jprFbj",
                          "rules": Array [
                            "
  margin-bottom: 50px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-ktHwxA",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-ktHwxA jprFbj"
                    >
                      <Styled(Input)
                        id="spaceMatterPort"
                        label="ONBOARDING_SPACE_MATTERPORT"
                        onChange={[Function]}
                        type="text"
                        value=""
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jqCOkK",
                                "isStatic": false,
                                "lastClassName": "cMtsiU",
                                "rules": Array [
                                  "
  width: 100%;
  margin-top: 20px;
",
                                ],
                              },
                              "displayName": "Styled(Input)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-jqCOkK",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="spaceMatterPort"
                          label="ONBOARDING_SPACE_MATTERPORT"
                          onChange={[Function]}
                          type="text"
                          value=""
                        >
                          <Input
                            className="sc-jqCOkK cMtsiU"
                            id="spaceMatterPort"
                            label="ONBOARDING_SPACE_MATTERPORT"
                            onChange={[Function]}
                            type="text"
                            value=""
                          >
                            <styled.div
                              className="sc-jqCOkK cMtsiU"
                            >
                              <StyledComponent
                                className="sc-jqCOkK cMtsiU"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "fnykrF",
                                      "rules": Array [
                                        "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-bxivhb fnykrF sc-jqCOkK cMtsiU"
                                >
                                  <label
                                    htmlFor="spaceMatterPort"
                                  >
                                    ONBOARDING_SPACE_MATTERPORT
                                  </label>
                                  <styled.input
                                    id="spaceMatterPort"
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "gtFQcX",
                                            "rules": Array [
                                              "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                              [Function],
                                              ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                              [Function],
                                              ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                              [Function],
                                              ";
    border: 1px solid ",
                                              [Function],
                                              ";
  }
",
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="spaceMatterPort"
                                      onChange={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <input
                                        className="sc-ifAKCX gtFQcX"
                                        id="spaceMatterPort"
                                        onChange={[Function]}
                                        type="text"
                                        value=""
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-EHOje",
                                            "isStatic": false,
                                            "lastClassName": "lpgKwh",
                                            "rules": Array [
                                              "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-EHOje",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-EHOje lpgKwh"
                                      />
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </Input>
                        </StyledComponent>
                      </Styled(Input)>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ktHwxA",
                    "isStatic": false,
                    "lastClassName": "jprFbj",
                    "rules": Array [
                      "
  margin-bottom: 50px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ktHwxA",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-ktHwxA jprFbj"
              >
                <SpaceAvailabilityFlex
                  setError={[Function]}
                  space={
                    Object {
                      "availabilityFixed": 2020-01-01T00:00:00.000Z,
                      "fitout": Array [
                        Object {
                          "amount": 1000,
                          "description": "FitOut1",
                          "name": "FitOut1",
                        },
                      ],
                      "fixedDesks": Object {
                        "availableFrom": 2020-01-01T00:00:00.000Z,
                        "currencyCode": "NOK",
                        "desks": 0,
                        "frequency": "Monthly",
                        "minLease": 0,
                        "price": 0,
                      },
                      "floorPlan": Array [],
                      "hotDesks": Object {
                        "availableFrom": 2020-01-01T00:00:00.000Z,
                        "currencyCode": "NOK",
                        "desks": 0,
                        "frequency": "Monthly",
                        "minLease": 0,
                        "price": 0,
                      },
                      "id": "0",
                      "images": Array [],
                      "months": undefined,
                      "servicedOffices": Array [],
                      "spaceDescription": "",
                      "spaceFloor": undefined,
                      "spaceFloored": "",
                      "spaceHighlights": "",
                      "spaceMatterPort": "",
                      "spaceName": "",
                      "spaceRent": undefined,
                      "spaceServices": undefined,
                      "spaceServicesNotNegotiable": false,
                      "spaceSize": undefined,
                      "spaceSizeCommon": undefined,
                      "status": 1,
                      "type": "FLEX",
                      "use": "",
                    }
                  }
                >
                  <styled.h3>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bwzfXH",
                            "isStatic": false,
                            "lastClassName": "ckRbFF",
                            "rules": Array [
                              "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                            ],
                          },
                          "displayName": "styled.h3",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bwzfXH",
                          "target": "h3",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h3
                        className="sc-bwzfXH ckRbFF"
                      >
                        ONBOARDING_SPACE_AVAILABILITY_FLEX_TITLE
                      </h3>
                    </StyledComponent>
                  </styled.h3>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jAaTju",
                            "isStatic": false,
                            "lastClassName": "bAsAjR",
                            "rules": Array [
                              "
  max-width: 516px;
  box-sizing: border-box;
  display: flex;
  border-radius: 2px;
  background-color: #f4f4f4;
  padding: 20px;
  margin-bottom: 50px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jAaTju",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-jAaTju bAsAjR"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jDwBTQ",
                                  "isStatic": false,
                                  "lastClassName": "kRkIAp",
                                  "rules": Array [
                                    "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-jDwBTQ",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-jDwBTQ kRkIAp"
                            >
                              <Styled(styled.h4)>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-cMljjf",
                                        "isStatic": false,
                                        "lastClassName": "cqFJJt",
                                        "rules": Array [
                                          "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                                          "
  margin-top: 0;
",
                                        ],
                                      },
                                      "displayName": "Styled(styled.h4)",
                                      "foldedComponentIds": Array [
                                        "sc-htpNat",
                                      ],
                                      "render": [Function],
                                      "styledComponentId": "sc-cMljjf",
                                      "target": "h4",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <h4
                                    className="sc-htpNat sc-cMljjf cqFJJt"
                                  >
                                    ONBOARDING_SPACE_FLEX_HOT_DESKS
                                  </h4>
                                </StyledComponent>
                              </Styled(styled.h4)>
                              <Input
                                data-testid="hot-desks-desks"
                                id="hot-desks-desks"
                                label="ONBOARDING_SPACE_FLEX_DESKS"
                                onChange={[Function]}
                                type="number"
                                value=""
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "fnykrF",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bxivhb fnykrF"
                                    >
                                      <label
                                        htmlFor="hot-desks-desks"
                                      >
                                        ONBOARDING_SPACE_FLEX_DESKS
                                      </label>
                                      <styled.input
                                        data-testid="hot-desks-desks"
                                        id="hot-desks-desks"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          data-testid="hot-desks-desks"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "gtFQcX",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="hot-desks-desks"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-ifAKCX gtFQcX"
                                            data-testid="hot-desks-desks"
                                            id="hot-desks-desks"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-EHOje",
                                                "isStatic": false,
                                                "lastClassName": "lpgKwh",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-EHOje",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-EHOje lpgKwh"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                              <Styled(Component)
                                data-testid="hot-desks-from"
                                disablePast={true}
                                id="hot-desks-availableFrom"
                                label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                onChange={[Function]}
                                value={2020-01-01T00:00:00.000Z}
                              >
                                <StyledComponent
                                  data-testid="hot-desks-from"
                                  disablePast={true}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-gZMcBi",
                                        "isStatic": false,
                                        "lastClassName": "gSFAtH",
                                        "rules": Array [
                                          "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                          [Function],
                                          ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                        ],
                                      },
                                      "displayName": "Styled(Component)",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-gZMcBi",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  id="hot-desks-availableFrom"
                                  label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                  onChange={[Function]}
                                  value={2020-01-01T00:00:00.000Z}
                                >
                                  <Component
                                    className="sc-gZMcBi gSFAtH"
                                    data-testid="hot-desks-from"
                                    disablePast={true}
                                    id="hot-desks-availableFrom"
                                    label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                    onChange={[Function]}
                                    value={2020-01-01T00:00:00.000Z}
                                  >
                                    <styled.div
                                      className="sc-gZMcBi gSFAtH"
                                      focusOn={false}
                                    >
                                      <StyledComponent
                                        className="sc-gZMcBi gSFAtH"
                                        focusOn={false}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-iwsKbI",
                                              "isStatic": false,
                                              "lastClassName": "djsvPA",
                                              "rules": Array [
                                                "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                                [Function],
                                                ";
  }
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-iwsKbI",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-iwsKbI djsvPA sc-gZMcBi gSFAtH"
                                        >
                                          <label>
                                            ONBOARDING_SPACE_FLEX_AVAILABILITY
                                          </label>
                                          <MuiPickersUtilsProvider
                                            locale={
                                              Object {
                                                "code": "en-GB",
                                                "formatDistance": [Function],
                                                "formatLong": Object {
                                                  "date": [Function],
                                                  "dateTime": [Function],
                                                  "time": [Function],
                                                },
                                                "formatRelative": [Function],
                                                "localize": Object {
                                                  "day": [Function],
                                                  "dayPeriod": [Function],
                                                  "era": [Function],
                                                  "month": [Function],
                                                  "ordinalNumber": [Function],
                                                  "quarter": [Function],
                                                },
                                                "match": Object {
                                                  "day": [Function],
                                                  "dayPeriod": [Function],
                                                  "era": [Function],
                                                  "month": [Function],
                                                  "ordinalNumber": [Function],
                                                  "quarter": [Function],
                                                },
                                                "options": Object {
                                                  "firstWeekContainsDate": 4,
                                                  "weekStartsOn": 1,
                                                },
                                              }
                                            }
                                            utils={[Function]}
                                          >
                                            <PickerWithState
                                              InputLabelProps={
                                                Object {
                                                  "error": false,
                                                  "shrink": false,
                                                }
                                              }
                                              allowKeyboardControl={true}
                                              autoOk={true}
                                              disablePast={true}
                                              disableToolbar={true}
                                              format="yyyy-MM-dd"
                                              id="hot-desks-availableFrom"
                                              inputVariant="outlined"
                                              invalidDateMessage="Invalid Date Format"
                                              keyboardIcon={
                                                <img
                                                  alt="open calendar"
                                                  src="calendar.svg"
                                                />
                                              }
                                              maxDate={2100-01-01T00:00:00.000Z}
                                              maxDateMessage="Date should not be after maximal date"
                                              minDate={1900-01-01T00:00:00.000Z}
                                              minDateMessage="Date should not be before minimal date"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              openTo="date"
                                              value={2020-01-01T00:00:00.000Z}
                                              variant="inline"
                                              views={
                                                Array [
                                                  "year",
                                                  "date",
                                                ]
                                              }
                                            >
                                              <Wrapper
                                                DateInputProps={
                                                  Object {
                                                    "format": "yyyy-MM-dd",
                                                    "inputValue": "2020-01-01",
                                                    "onChange": [Function],
                                                    "openPicker": [Function],
                                                    "validationError": "",
                                                  }
                                                }
                                                InputComponent={[Function]}
                                                InputLabelProps={
                                                  Object {
                                                    "error": false,
                                                    "shrink": false,
                                                  }
                                                }
                                                format="yyyy-MM-dd"
                                                id="hot-desks-availableFrom"
                                                inputVariant="outlined"
                                                keyboardIcon={
                                                  <img
                                                    alt="open calendar"
                                                    src="calendar.svg"
                                                  />
                                                }
                                                onAccept={[Function]}
                                                onBlur={[Function]}
                                                onClear={[Function]}
                                                onDismiss={[Function]}
                                                onFocus={[Function]}
                                                onSetToday={[Function]}
                                                open={false}
                                                variant="inline"
                                              >
                                                <InlineWrapper
                                                  DateInputProps={
                                                    Object {
                                                      "format": "yyyy-MM-dd",
                                                      "inputValue": "2020-01-01",
                                                      "onChange": [Function],
                                                      "openPicker": [Function],
                                                      "validationError": "",
                                                    }
                                                  }
                                                  InputComponent={[Function]}
                                                  InputLabelProps={
                                                    Object {
                                                      "error": false,
                                                      "shrink": false,
                                                    }
                                                  }
                                                  format="yyyy-MM-dd"
                                                  id="hot-desks-availableFrom"
                                                  inputVariant="outlined"
                                                  keyboardIcon={
                                                    <img
                                                      alt="open calendar"
                                                      src="calendar.svg"
                                                    />
                                                  }
                                                  onAccept={[Function]}
                                                  onBlur={[Function]}
                                                  onClear={[Function]}
                                                  onDismiss={[Function]}
                                                  onFocus={[Function]}
                                                  onSetToday={[Function]}
                                                  open={false}
                                                >
                                                  <KeyboardDateInput
                                                    InputLabelProps={
                                                      Object {
                                                        "error": false,
                                                        "shrink": false,
                                                      }
                                                    }
                                                    format="yyyy-MM-dd"
                                                    id="hot-desks-availableFrom"
                                                    inputRef={
                                                      Object {
                                                        "current": <input
                                                          aria-invalid="false"
                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                          id="hot-desks-availableFrom"
                                                          type="text"
                                                          value="2020-01-01"
                                                        />,
                                                      }
                                                    }
                                                    inputValue="2020-01-01"
                                                    inputVariant="outlined"
                                                    keyboardIcon={
                                                      <img
                                                        alt="open calendar"
                                                        src="calendar.svg"
                                                      />
                                                    }
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    openPicker={[Function]}
                                                    validationError=""
                                                  >
                                                    <Rifm
                                                      format={[Function]}
                                                      key="____-__-__"
                                                      onChange={[Function]}
                                                      refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                      value="2020-01-01"
                                                    >
                                                      <WithStyles(ForwardRef(TextField))
                                                        InputLabelProps={
                                                          Object {
                                                            "error": false,
                                                            "shrink": false,
                                                          }
                                                        }
                                                        InputProps={
                                                          Object {
                                                            "endAdornment": <ForwardRef(WithStyles)
                                                              position="end"
                                                            >
                                                              <ForwardRef(WithStyles)
                                                                onClick={[Function]}
                                                              >
                                                                <img
                                                                  alt="open calendar"
                                                                  src="calendar.svg"
                                                                />
                                                              </ForwardRef(WithStyles)>
                                                            </ForwardRef(WithStyles)>,
                                                          }
                                                        }
                                                        error={false}
                                                        helperText=""
                                                        id="hot-desks-availableFrom"
                                                        inputRef={
                                                          Object {
                                                            "current": <input
                                                              aria-invalid="false"
                                                              class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                              id="hot-desks-availableFrom"
                                                              type="text"
                                                              value="2020-01-01"
                                                            />,
                                                          }
                                                        }
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        value="2020-01-01"
                                                        variant="outlined"
                                                      >
                                                        <ForwardRef(TextField)
                                                          InputLabelProps={
                                                            Object {
                                                              "error": false,
                                                              "shrink": false,
                                                            }
                                                          }
                                                          InputProps={
                                                            Object {
                                                              "endAdornment": <ForwardRef(WithStyles)
                                                                position="end"
                                                              >
                                                                <ForwardRef(WithStyles)
                                                                  onClick={[Function]}
                                                                >
                                                                  <img
                                                                    alt="open calendar"
                                                                    src="calendar.svg"
                                                                  />
                                                                </ForwardRef(WithStyles)>
                                                              </ForwardRef(WithStyles)>,
                                                            }
                                                          }
                                                          classes={
                                                            Object {
                                                              "root": "MuiTextField-root",
                                                            }
                                                          }
                                                          error={false}
                                                          helperText=""
                                                          id="hot-desks-availableFrom"
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-invalid="false"
                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                id="hot-desks-availableFrom"
                                                                type="text"
                                                                value="2020-01-01"
                                                              />,
                                                            }
                                                          }
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          value="2020-01-01"
                                                          variant="outlined"
                                                        >
                                                          <WithStyles(ForwardRef(FormControl))
                                                            className="MuiTextField-root"
                                                            color="primary"
                                                            disabled={false}
                                                            error={false}
                                                            fullWidth={false}
                                                            required={false}
                                                            variant="outlined"
                                                          >
                                                            <ForwardRef(FormControl)
                                                              className="MuiTextField-root"
                                                              classes={
                                                                Object {
                                                                  "fullWidth": "MuiFormControl-fullWidth",
                                                                  "marginDense": "MuiFormControl-marginDense",
                                                                  "marginNormal": "MuiFormControl-marginNormal",
                                                                  "root": "MuiFormControl-root",
                                                                }
                                                              }
                                                              color="primary"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={false}
                                                              required={false}
                                                              variant="outlined"
                                                            >
                                                              <div
                                                                className="MuiFormControl-root MuiTextField-root"
                                                              >
                                                                <WithStyles(ForwardRef(OutlinedInput))
                                                                  autoFocus={false}
                                                                  endAdornment={
                                                                    <ForwardRef(WithStyles)
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(WithStyles)
                                                                        onClick={[Function]}
                                                                      >
                                                                        <img
                                                                          alt="open calendar"
                                                                          src="calendar.svg"
                                                                        />
                                                                      </ForwardRef(WithStyles)>
                                                                    </ForwardRef(WithStyles)>
                                                                  }
                                                                  fullWidth={false}
                                                                  id="hot-desks-availableFrom"
                                                                  inputRef={
                                                                    Object {
                                                                      "current": <input
                                                                        aria-invalid="false"
                                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                        id="hot-desks-availableFrom"
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      />,
                                                                    }
                                                                  }
                                                                  labelWidth={0}
                                                                  multiline={false}
                                                                  notched={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  value="2020-01-01"
                                                                >
                                                                  <ForwardRef(OutlinedInput)
                                                                    autoFocus={false}
                                                                    classes={
                                                                      Object {
                                                                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                        "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                        "disabled": "Mui-disabled",
                                                                        "error": "Mui-error",
                                                                        "focused": "Mui-focused",
                                                                        "input": "MuiOutlinedInput-input",
                                                                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                        "marginDense": "MuiOutlinedInput-marginDense",
                                                                        "multiline": "MuiOutlinedInput-multiline",
                                                                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                        "root": "MuiOutlinedInput-root",
                                                                      }
                                                                    }
                                                                    endAdornment={
                                                                      <ForwardRef(WithStyles)
                                                                        position="end"
                                                                      >
                                                                        <ForwardRef(WithStyles)
                                                                          onClick={[Function]}
                                                                        >
                                                                          <img
                                                                            alt="open calendar"
                                                                            src="calendar.svg"
                                                                          />
                                                                        </ForwardRef(WithStyles)>
                                                                      </ForwardRef(WithStyles)>
                                                                    }
                                                                    fullWidth={false}
                                                                    id="hot-desks-availableFrom"
                                                                    inputRef={
                                                                      Object {
                                                                        "current": <input
                                                                          aria-invalid="false"
                                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                          id="hot-desks-availableFrom"
                                                                          type="text"
                                                                          value="2020-01-01"
                                                                        />,
                                                                      }
                                                                    }
                                                                    labelWidth={0}
                                                                    multiline={false}
                                                                    notched={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    value="2020-01-01"
                                                                  >
                                                                    <WithStyles(ForwardRef(InputBase))
                                                                      autoFocus={false}
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                          "disabled": "Mui-disabled",
                                                                          "error": "Mui-error",
                                                                          "focused": "Mui-focused",
                                                                          "input": "MuiOutlinedInput-input",
                                                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                          "marginDense": "MuiOutlinedInput-marginDense",
                                                                          "multiline": "MuiOutlinedInput-multiline",
                                                                          "notchedOutline": null,
                                                                          "root": "MuiOutlinedInput-root",
                                                                        }
                                                                      }
                                                                      endAdornment={
                                                                        <ForwardRef(WithStyles)
                                                                          position="end"
                                                                        >
                                                                          <ForwardRef(WithStyles)
                                                                            onClick={[Function]}
                                                                          >
                                                                            <img
                                                                              alt="open calendar"
                                                                              src="calendar.svg"
                                                                            />
                                                                          </ForwardRef(WithStyles)>
                                                                        </ForwardRef(WithStyles)>
                                                                      }
                                                                      fullWidth={false}
                                                                      id="hot-desks-availableFrom"
                                                                      inputComponent="input"
                                                                      inputRef={
                                                                        Object {
                                                                          "current": <input
                                                                            aria-invalid="false"
                                                                            class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                            id="hot-desks-availableFrom"
                                                                            type="text"
                                                                            value="2020-01-01"
                                                                          />,
                                                                        }
                                                                      }
                                                                      multiline={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      renderSuffix={[Function]}
                                                                      type="text"
                                                                      value="2020-01-01"
                                                                    >
                                                                      <ForwardRef(InputBase)
                                                                        autoFocus={false}
                                                                        classes={
                                                                          Object {
                                                                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                            "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                            "disabled": "Mui-disabled Mui-disabled",
                                                                            "error": "Mui-error Mui-error",
                                                                            "focused": "Mui-focused Mui-focused",
                                                                            "formControl": "MuiInputBase-formControl",
                                                                            "fullWidth": "MuiInputBase-fullWidth",
                                                                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                          }
                                                                        }
                                                                        endAdornment={
                                                                          <ForwardRef(WithStyles)
                                                                            position="end"
                                                                          >
                                                                            <ForwardRef(WithStyles)
                                                                              onClick={[Function]}
                                                                            >
                                                                              <img
                                                                                alt="open calendar"
                                                                                src="calendar.svg"
                                                                              />
                                                                            </ForwardRef(WithStyles)>
                                                                          </ForwardRef(WithStyles)>
                                                                        }
                                                                        fullWidth={false}
                                                                        id="hot-desks-availableFrom"
                                                                        inputComponent="input"
                                                                        inputRef={
                                                                          Object {
                                                                            "current": <input
                                                                              aria-invalid="false"
                                                                              class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                              id="hot-desks-availableFrom"
                                                                              type="text"
                                                                              value="2020-01-01"
                                                                            />,
                                                                          }
                                                                        }
                                                                        multiline={false}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        renderSuffix={[Function]}
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      >
                                                                        <div
                                                                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                          onClick={[Function]}
                                                                        >
                                                                          <input
                                                                            aria-invalid={false}
                                                                            autoFocus={false}
                                                                            className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                            disabled={false}
                                                                            id="hot-desks-availableFrom"
                                                                            onAnimationStart={[Function]}
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            required={false}
                                                                            type="text"
                                                                            value="2020-01-01"
                                                                          />
                                                                          <WithStyles(ForwardRef(InputAdornment))
                                                                            position="end"
                                                                          >
                                                                            <ForwardRef(InputAdornment)
                                                                              classes={
                                                                                Object {
                                                                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                                  "filled": "MuiInputAdornment-filled",
                                                                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                                  "marginDense": "MuiInputAdornment-marginDense",
                                                                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                                                                  "positionStart": "MuiInputAdornment-positionStart",
                                                                                  "root": "MuiInputAdornment-root",
                                                                                }
                                                                              }
                                                                              position="end"
                                                                            >
                                                                              <div
                                                                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                              >
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <ForwardRef(IconButton)
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorInherit": "MuiIconButton-colorInherit",
                                                                                        "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                        "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                        "disabled": "Mui-disabled",
                                                                                        "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                        "edgeStart": "MuiIconButton-edgeStart",
                                                                                        "label": "MuiIconButton-label",
                                                                                        "root": "MuiIconButton-root",
                                                                                        "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                      }
                                                                                    }
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <WithStyles(ForwardRef(ButtonBase))
                                                                                      centerRipple={true}
                                                                                      className="MuiIconButton-root"
                                                                                      disabled={false}
                                                                                      focusRipple={true}
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <ForwardRef(ButtonBase)
                                                                                        centerRipple={true}
                                                                                        className="MuiIconButton-root"
                                                                                        classes={
                                                                                          Object {
                                                                                            "disabled": "Mui-disabled",
                                                                                            "focusVisible": "Mui-focusVisible",
                                                                                            "root": "MuiButtonBase-root",
                                                                                          }
                                                                                        }
                                                                                        disabled={false}
                                                                                        focusRipple={true}
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <button
                                                                                          className="MuiButtonBase-root MuiIconButton-root"
                                                                                          disabled={false}
                                                                                          onBlur={[Function]}
                                                                                          onClick={[Function]}
                                                                                          onDragLeave={[Function]}
                                                                                          onFocus={[Function]}
                                                                                          onKeyDown={[Function]}
                                                                                          onKeyUp={[Function]}
                                                                                          onMouseDown={[Function]}
                                                                                          onMouseLeave={[Function]}
                                                                                          onMouseUp={[Function]}
                                                                                          onTouchEnd={[Function]}
                                                                                          onTouchMove={[Function]}
                                                                                          onTouchStart={[Function]}
                                                                                          tabIndex={0}
                                                                                          type="button"
                                                                                        >
                                                                                          <span
                                                                                            className="MuiIconButton-label"
                                                                                          >
                                                                                            <img
                                                                                              alt="open calendar"
                                                                                              src="calendar.svg"
                                                                                            />
                                                                                          </span>
                                                                                          <NoSsr>
                                                                                            <WithStyles(undefined)
                                                                                              center={true}
                                                                                            >
                                                                                              <ForwardRef(TouchRipple)
                                                                                                center={true}
                                                                                                classes={
                                                                                                  Object {
                                                                                                    "child": "MuiTouchRipple-child",
                                                                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                                    "ripple": "MuiTouchRipple-ripple",
                                                                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                                    "root": "MuiTouchRipple-root",
                                                                                                  }
                                                                                                }
                                                                                              >
                                                                                                <span
                                                                                                  className="MuiTouchRipple-root"
                                                                                                >
                                                                                                  <TransitionGroup
                                                                                                    childFactory={[Function]}
                                                                                                    component={null}
                                                                                                    exit={true}
                                                                                                  />
                                                                                                </span>
                                                                                              </ForwardRef(TouchRipple)>
                                                                                            </WithStyles(undefined)>
                                                                                          </NoSsr>
                                                                                        </button>
                                                                                      </ForwardRef(ButtonBase)>
                                                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                                                  </ForwardRef(IconButton)>
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                              </div>
                                                                            </ForwardRef(InputAdornment)>
                                                                          </WithStyles(ForwardRef(InputAdornment))>
                                                                          <WithStyles(ForwardRef(NotchedOutline))
                                                                            className="MuiOutlinedInput-notchedOutline"
                                                                            labelWidth={0}
                                                                            notched={false}
                                                                          >
                                                                            <ForwardRef(NotchedOutline)
                                                                              className="MuiOutlinedInput-notchedOutline"
                                                                              classes={
                                                                                Object {
                                                                                  "legend": "PrivateNotchedOutline-legend-61",
                                                                                  "root": "PrivateNotchedOutline-root-60",
                                                                                }
                                                                              }
                                                                              labelWidth={0}
                                                                              notched={false}
                                                                            >
                                                                              <fieldset
                                                                                aria-hidden={true}
                                                                                className="PrivateNotchedOutline-root-60 MuiOutlinedInput-notchedOutline"
                                                                                style={
                                                                                  Object {
                                                                                    "paddingLeft": 8,
                                                                                  }
                                                                                }
                                                                              >
                                                                                <legend
                                                                                  className="PrivateNotchedOutline-legend-61"
                                                                                  style={
                                                                                    Object {
                                                                                      "width": 0.01,
                                                                                    }
                                                                                  }
                                                                                >
                                                                                  <span
                                                                                    dangerouslySetInnerHTML={
                                                                                      Object {
                                                                                        "__html": "&#8203;",
                                                                                      }
                                                                                    }
                                                                                  />
                                                                                </legend>
                                                                              </fieldset>
                                                                            </ForwardRef(NotchedOutline)>
                                                                          </WithStyles(ForwardRef(NotchedOutline))>
                                                                        </div>
                                                                      </ForwardRef(InputBase)>
                                                                    </WithStyles(ForwardRef(InputBase))>
                                                                  </ForwardRef(OutlinedInput)>
                                                                </WithStyles(ForwardRef(OutlinedInput))>
                                                              </div>
                                                            </ForwardRef(FormControl)>
                                                          </WithStyles(ForwardRef(FormControl))>
                                                        </ForwardRef(TextField)>
                                                      </WithStyles(ForwardRef(TextField))>
                                                    </Rifm>
                                                  </KeyboardDateInput>
                                                  <WithStyles(ForwardRef(Popover))
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "bottom",
                                                      }
                                                    }
                                                    onClose={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                  >
                                                    <ForwardRef(Popover)
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "bottom",
                                                        }
                                                      }
                                                      classes={
                                                        Object {
                                                          "paper": "MuiPopover-paper",
                                                          "root": "MuiPopover-root",
                                                        }
                                                      }
                                                      onClose={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(Modal)
                                                        BackdropProps={
                                                          Object {
                                                            "invisible": true,
                                                          }
                                                        }
                                                        className="MuiPopover-root"
                                                        onClose={[Function]}
                                                        open={false}
                                                      />
                                                    </ForwardRef(Popover)>
                                                  </WithStyles(ForwardRef(Popover))>
                                                </InlineWrapper>
                                              </Wrapper>
                                            </PickerWithState>
                                          </MuiPickersUtilsProvider>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </Component>
                                </StyledComponent>
                              </Styled(Component)>
                              <Input
                                data-testid="hot-desks-min-lease"
                                id="hot-desks-minLease"
                                label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                onChange={[Function]}
                                type="number"
                                value=""
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "fnykrF",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bxivhb fnykrF"
                                    >
                                      <label
                                        htmlFor="hot-desks-minLease"
                                      >
                                        ONBOARDING_SPACE_FLEX_MINLEASE
                                      </label>
                                      <styled.input
                                        data-testid="hot-desks-min-lease"
                                        id="hot-desks-minLease"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          data-testid="hot-desks-min-lease"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "gtFQcX",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="hot-desks-minLease"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-ifAKCX gtFQcX"
                                            data-testid="hot-desks-min-lease"
                                            id="hot-desks-minLease"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-EHOje",
                                                "isStatic": false,
                                                "lastClassName": "lpgKwh",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-EHOje",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-EHOje lpgKwh"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                              <Input
                                data-testid="hot-desks-price"
                                id="hot-desks-price"
                                label="ONBOARDING_SPACE_FLEX_PRICE (Kr)"
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                type="number"
                                value=""
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "fnykrF",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bxivhb fnykrF"
                                    >
                                      <label
                                        htmlFor="hot-desks-price"
                                      >
                                        ONBOARDING_SPACE_FLEX_PRICE (Kr)
                                      </label>
                                      <styled.input
                                        data-testid="hot-desks-price"
                                        id="hot-desks-price"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          data-testid="hot-desks-price"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "gtFQcX",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="hot-desks-price"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-ifAKCX gtFQcX"
                                            data-testid="hot-desks-price"
                                            id="hot-desks-price"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-EHOje",
                                                "isStatic": false,
                                                "lastClassName": "lpgKwh",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-EHOje",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-EHOje lpgKwh"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jDwBTQ",
                                  "isStatic": false,
                                  "lastClassName": "kRkIAp",
                                  "rules": Array [
                                    "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-jDwBTQ",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-jDwBTQ kRkIAp"
                            >
                              <Styled(styled.h4)>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-cMljjf",
                                        "isStatic": false,
                                        "lastClassName": "cqFJJt",
                                        "rules": Array [
                                          "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                                          "
  margin-top: 0;
",
                                        ],
                                      },
                                      "displayName": "Styled(styled.h4)",
                                      "foldedComponentIds": Array [
                                        "sc-htpNat",
                                      ],
                                      "render": [Function],
                                      "styledComponentId": "sc-cMljjf",
                                      "target": "h4",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <h4
                                    className="sc-htpNat sc-cMljjf cqFJJt"
                                  >
                                    ONBOARDING_SPACE_FLEX_FIXED_DESKS
                                  </h4>
                                </StyledComponent>
                              </Styled(styled.h4)>
                              <Input
                                data-testid="fixed-desks-desks"
                                id="fixed-desks-desks"
                                label="ONBOARDING_SPACE_FLEX_DESKS"
                                onChange={[Function]}
                                type="number"
                                value=""
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "fnykrF",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bxivhb fnykrF"
                                    >
                                      <label
                                        htmlFor="fixed-desks-desks"
                                      >
                                        ONBOARDING_SPACE_FLEX_DESKS
                                      </label>
                                      <styled.input
                                        data-testid="fixed-desks-desks"
                                        id="fixed-desks-desks"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          data-testid="fixed-desks-desks"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "gtFQcX",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="fixed-desks-desks"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-ifAKCX gtFQcX"
                                            data-testid="fixed-desks-desks"
                                            id="fixed-desks-desks"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-EHOje",
                                                "isStatic": false,
                                                "lastClassName": "lpgKwh",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-EHOje",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-EHOje lpgKwh"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                              <Styled(Component)
                                data-testid="fixed-desks-from"
                                disablePast={true}
                                id="fixed-desks-availableFrom"
                                label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                onChange={[Function]}
                                value={2020-01-01T00:00:00.000Z}
                              >
                                <StyledComponent
                                  data-testid="fixed-desks-from"
                                  disablePast={true}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-gZMcBi",
                                        "isStatic": false,
                                        "lastClassName": "gSFAtH",
                                        "rules": Array [
                                          "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                          [Function],
                                          ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                        ],
                                      },
                                      "displayName": "Styled(Component)",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-gZMcBi",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  id="fixed-desks-availableFrom"
                                  label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                  onChange={[Function]}
                                  value={2020-01-01T00:00:00.000Z}
                                >
                                  <Component
                                    className="sc-gZMcBi gSFAtH"
                                    data-testid="fixed-desks-from"
                                    disablePast={true}
                                    id="fixed-desks-availableFrom"
                                    label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                    onChange={[Function]}
                                    value={2020-01-01T00:00:00.000Z}
                                  >
                                    <styled.div
                                      className="sc-gZMcBi gSFAtH"
                                      focusOn={false}
                                    >
                                      <StyledComponent
                                        className="sc-gZMcBi gSFAtH"
                                        focusOn={false}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-iwsKbI",
                                              "isStatic": false,
                                              "lastClassName": "djsvPA",
                                              "rules": Array [
                                                "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                                [Function],
                                                ";
  }
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-iwsKbI",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-iwsKbI djsvPA sc-gZMcBi gSFAtH"
                                        >
                                          <label>
                                            ONBOARDING_SPACE_FLEX_AVAILABILITY
                                          </label>
                                          <MuiPickersUtilsProvider
                                            locale={
                                              Object {
                                                "code": "en-GB",
                                                "formatDistance": [Function],
                                                "formatLong": Object {
                                                  "date": [Function],
                                                  "dateTime": [Function],
                                                  "time": [Function],
                                                },
                                                "formatRelative": [Function],
                                                "localize": Object {
                                                  "day": [Function],
                                                  "dayPeriod": [Function],
                                                  "era": [Function],
                                                  "month": [Function],
                                                  "ordinalNumber": [Function],
                                                  "quarter": [Function],
                                                },
                                                "match": Object {
                                                  "day": [Function],
                                                  "dayPeriod": [Function],
                                                  "era": [Function],
                                                  "month": [Function],
                                                  "ordinalNumber": [Function],
                                                  "quarter": [Function],
                                                },
                                                "options": Object {
                                                  "firstWeekContainsDate": 4,
                                                  "weekStartsOn": 1,
                                                },
                                              }
                                            }
                                            utils={[Function]}
                                          >
                                            <PickerWithState
                                              InputLabelProps={
                                                Object {
                                                  "error": false,
                                                  "shrink": false,
                                                }
                                              }
                                              allowKeyboardControl={true}
                                              autoOk={true}
                                              disablePast={true}
                                              disableToolbar={true}
                                              format="yyyy-MM-dd"
                                              id="fixed-desks-availableFrom"
                                              inputVariant="outlined"
                                              invalidDateMessage="Invalid Date Format"
                                              keyboardIcon={
                                                <img
                                                  alt="open calendar"
                                                  src="calendar.svg"
                                                />
                                              }
                                              maxDate={2100-01-01T00:00:00.000Z}
                                              maxDateMessage="Date should not be after maximal date"
                                              minDate={1900-01-01T00:00:00.000Z}
                                              minDateMessage="Date should not be before minimal date"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              openTo="date"
                                              value={2020-01-01T00:00:00.000Z}
                                              variant="inline"
                                              views={
                                                Array [
                                                  "year",
                                                  "date",
                                                ]
                                              }
                                            >
                                              <Wrapper
                                                DateInputProps={
                                                  Object {
                                                    "format": "yyyy-MM-dd",
                                                    "inputValue": "2020-01-01",
                                                    "onChange": [Function],
                                                    "openPicker": [Function],
                                                    "validationError": "",
                                                  }
                                                }
                                                InputComponent={[Function]}
                                                InputLabelProps={
                                                  Object {
                                                    "error": false,
                                                    "shrink": false,
                                                  }
                                                }
                                                format="yyyy-MM-dd"
                                                id="fixed-desks-availableFrom"
                                                inputVariant="outlined"
                                                keyboardIcon={
                                                  <img
                                                    alt="open calendar"
                                                    src="calendar.svg"
                                                  />
                                                }
                                                onAccept={[Function]}
                                                onBlur={[Function]}
                                                onClear={[Function]}
                                                onDismiss={[Function]}
                                                onFocus={[Function]}
                                                onSetToday={[Function]}
                                                open={false}
                                                variant="inline"
                                              >
                                                <InlineWrapper
                                                  DateInputProps={
                                                    Object {
                                                      "format": "yyyy-MM-dd",
                                                      "inputValue": "2020-01-01",
                                                      "onChange": [Function],
                                                      "openPicker": [Function],
                                                      "validationError": "",
                                                    }
                                                  }
                                                  InputComponent={[Function]}
                                                  InputLabelProps={
                                                    Object {
                                                      "error": false,
                                                      "shrink": false,
                                                    }
                                                  }
                                                  format="yyyy-MM-dd"
                                                  id="fixed-desks-availableFrom"
                                                  inputVariant="outlined"
                                                  keyboardIcon={
                                                    <img
                                                      alt="open calendar"
                                                      src="calendar.svg"
                                                    />
                                                  }
                                                  onAccept={[Function]}
                                                  onBlur={[Function]}
                                                  onClear={[Function]}
                                                  onDismiss={[Function]}
                                                  onFocus={[Function]}
                                                  onSetToday={[Function]}
                                                  open={false}
                                                >
                                                  <KeyboardDateInput
                                                    InputLabelProps={
                                                      Object {
                                                        "error": false,
                                                        "shrink": false,
                                                      }
                                                    }
                                                    format="yyyy-MM-dd"
                                                    id="fixed-desks-availableFrom"
                                                    inputRef={
                                                      Object {
                                                        "current": <input
                                                          aria-invalid="false"
                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                          id="fixed-desks-availableFrom"
                                                          type="text"
                                                          value="2020-01-01"
                                                        />,
                                                      }
                                                    }
                                                    inputValue="2020-01-01"
                                                    inputVariant="outlined"
                                                    keyboardIcon={
                                                      <img
                                                        alt="open calendar"
                                                        src="calendar.svg"
                                                      />
                                                    }
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    openPicker={[Function]}
                                                    validationError=""
                                                  >
                                                    <Rifm
                                                      format={[Function]}
                                                      key="____-__-__"
                                                      onChange={[Function]}
                                                      refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                      value="2020-01-01"
                                                    >
                                                      <WithStyles(ForwardRef(TextField))
                                                        InputLabelProps={
                                                          Object {
                                                            "error": false,
                                                            "shrink": false,
                                                          }
                                                        }
                                                        InputProps={
                                                          Object {
                                                            "endAdornment": <ForwardRef(WithStyles)
                                                              position="end"
                                                            >
                                                              <ForwardRef(WithStyles)
                                                                onClick={[Function]}
                                                              >
                                                                <img
                                                                  alt="open calendar"
                                                                  src="calendar.svg"
                                                                />
                                                              </ForwardRef(WithStyles)>
                                                            </ForwardRef(WithStyles)>,
                                                          }
                                                        }
                                                        error={false}
                                                        helperText=""
                                                        id="fixed-desks-availableFrom"
                                                        inputRef={
                                                          Object {
                                                            "current": <input
                                                              aria-invalid="false"
                                                              class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                              id="fixed-desks-availableFrom"
                                                              type="text"
                                                              value="2020-01-01"
                                                            />,
                                                          }
                                                        }
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        value="2020-01-01"
                                                        variant="outlined"
                                                      >
                                                        <ForwardRef(TextField)
                                                          InputLabelProps={
                                                            Object {
                                                              "error": false,
                                                              "shrink": false,
                                                            }
                                                          }
                                                          InputProps={
                                                            Object {
                                                              "endAdornment": <ForwardRef(WithStyles)
                                                                position="end"
                                                              >
                                                                <ForwardRef(WithStyles)
                                                                  onClick={[Function]}
                                                                >
                                                                  <img
                                                                    alt="open calendar"
                                                                    src="calendar.svg"
                                                                  />
                                                                </ForwardRef(WithStyles)>
                                                              </ForwardRef(WithStyles)>,
                                                            }
                                                          }
                                                          classes={
                                                            Object {
                                                              "root": "MuiTextField-root",
                                                            }
                                                          }
                                                          error={false}
                                                          helperText=""
                                                          id="fixed-desks-availableFrom"
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-invalid="false"
                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                id="fixed-desks-availableFrom"
                                                                type="text"
                                                                value="2020-01-01"
                                                              />,
                                                            }
                                                          }
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          value="2020-01-01"
                                                          variant="outlined"
                                                        >
                                                          <WithStyles(ForwardRef(FormControl))
                                                            className="MuiTextField-root"
                                                            color="primary"
                                                            disabled={false}
                                                            error={false}
                                                            fullWidth={false}
                                                            required={false}
                                                            variant="outlined"
                                                          >
                                                            <ForwardRef(FormControl)
                                                              className="MuiTextField-root"
                                                              classes={
                                                                Object {
                                                                  "fullWidth": "MuiFormControl-fullWidth",
                                                                  "marginDense": "MuiFormControl-marginDense",
                                                                  "marginNormal": "MuiFormControl-marginNormal",
                                                                  "root": "MuiFormControl-root",
                                                                }
                                                              }
                                                              color="primary"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={false}
                                                              required={false}
                                                              variant="outlined"
                                                            >
                                                              <div
                                                                className="MuiFormControl-root MuiTextField-root"
                                                              >
                                                                <WithStyles(ForwardRef(OutlinedInput))
                                                                  autoFocus={false}
                                                                  endAdornment={
                                                                    <ForwardRef(WithStyles)
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(WithStyles)
                                                                        onClick={[Function]}
                                                                      >
                                                                        <img
                                                                          alt="open calendar"
                                                                          src="calendar.svg"
                                                                        />
                                                                      </ForwardRef(WithStyles)>
                                                                    </ForwardRef(WithStyles)>
                                                                  }
                                                                  fullWidth={false}
                                                                  id="fixed-desks-availableFrom"
                                                                  inputRef={
                                                                    Object {
                                                                      "current": <input
                                                                        aria-invalid="false"
                                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                        id="fixed-desks-availableFrom"
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      />,
                                                                    }
                                                                  }
                                                                  labelWidth={0}
                                                                  multiline={false}
                                                                  notched={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  value="2020-01-01"
                                                                >
                                                                  <ForwardRef(OutlinedInput)
                                                                    autoFocus={false}
                                                                    classes={
                                                                      Object {
                                                                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                        "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                        "disabled": "Mui-disabled",
                                                                        "error": "Mui-error",
                                                                        "focused": "Mui-focused",
                                                                        "input": "MuiOutlinedInput-input",
                                                                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                        "marginDense": "MuiOutlinedInput-marginDense",
                                                                        "multiline": "MuiOutlinedInput-multiline",
                                                                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                        "root": "MuiOutlinedInput-root",
                                                                      }
                                                                    }
                                                                    endAdornment={
                                                                      <ForwardRef(WithStyles)
                                                                        position="end"
                                                                      >
                                                                        <ForwardRef(WithStyles)
                                                                          onClick={[Function]}
                                                                        >
                                                                          <img
                                                                            alt="open calendar"
                                                                            src="calendar.svg"
                                                                          />
                                                                        </ForwardRef(WithStyles)>
                                                                      </ForwardRef(WithStyles)>
                                                                    }
                                                                    fullWidth={false}
                                                                    id="fixed-desks-availableFrom"
                                                                    inputRef={
                                                                      Object {
                                                                        "current": <input
                                                                          aria-invalid="false"
                                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                          id="fixed-desks-availableFrom"
                                                                          type="text"
                                                                          value="2020-01-01"
                                                                        />,
                                                                      }
                                                                    }
                                                                    labelWidth={0}
                                                                    multiline={false}
                                                                    notched={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    value="2020-01-01"
                                                                  >
                                                                    <WithStyles(ForwardRef(InputBase))
                                                                      autoFocus={false}
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                          "disabled": "Mui-disabled",
                                                                          "error": "Mui-error",
                                                                          "focused": "Mui-focused",
                                                                          "input": "MuiOutlinedInput-input",
                                                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                          "marginDense": "MuiOutlinedInput-marginDense",
                                                                          "multiline": "MuiOutlinedInput-multiline",
                                                                          "notchedOutline": null,
                                                                          "root": "MuiOutlinedInput-root",
                                                                        }
                                                                      }
                                                                      endAdornment={
                                                                        <ForwardRef(WithStyles)
                                                                          position="end"
                                                                        >
                                                                          <ForwardRef(WithStyles)
                                                                            onClick={[Function]}
                                                                          >
                                                                            <img
                                                                              alt="open calendar"
                                                                              src="calendar.svg"
                                                                            />
                                                                          </ForwardRef(WithStyles)>
                                                                        </ForwardRef(WithStyles)>
                                                                      }
                                                                      fullWidth={false}
                                                                      id="fixed-desks-availableFrom"
                                                                      inputComponent="input"
                                                                      inputRef={
                                                                        Object {
                                                                          "current": <input
                                                                            aria-invalid="false"
                                                                            class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                            id="fixed-desks-availableFrom"
                                                                            type="text"
                                                                            value="2020-01-01"
                                                                          />,
                                                                        }
                                                                      }
                                                                      multiline={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      renderSuffix={[Function]}
                                                                      type="text"
                                                                      value="2020-01-01"
                                                                    >
                                                                      <ForwardRef(InputBase)
                                                                        autoFocus={false}
                                                                        classes={
                                                                          Object {
                                                                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                            "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                            "disabled": "Mui-disabled Mui-disabled",
                                                                            "error": "Mui-error Mui-error",
                                                                            "focused": "Mui-focused Mui-focused",
                                                                            "formControl": "MuiInputBase-formControl",
                                                                            "fullWidth": "MuiInputBase-fullWidth",
                                                                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                          }
                                                                        }
                                                                        endAdornment={
                                                                          <ForwardRef(WithStyles)
                                                                            position="end"
                                                                          >
                                                                            <ForwardRef(WithStyles)
                                                                              onClick={[Function]}
                                                                            >
                                                                              <img
                                                                                alt="open calendar"
                                                                                src="calendar.svg"
                                                                              />
                                                                            </ForwardRef(WithStyles)>
                                                                          </ForwardRef(WithStyles)>
                                                                        }
                                                                        fullWidth={false}
                                                                        id="fixed-desks-availableFrom"
                                                                        inputComponent="input"
                                                                        inputRef={
                                                                          Object {
                                                                            "current": <input
                                                                              aria-invalid="false"
                                                                              class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                              id="fixed-desks-availableFrom"
                                                                              type="text"
                                                                              value="2020-01-01"
                                                                            />,
                                                                          }
                                                                        }
                                                                        multiline={false}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        renderSuffix={[Function]}
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      >
                                                                        <div
                                                                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                          onClick={[Function]}
                                                                        >
                                                                          <input
                                                                            aria-invalid={false}
                                                                            autoFocus={false}
                                                                            className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                            disabled={false}
                                                                            id="fixed-desks-availableFrom"
                                                                            onAnimationStart={[Function]}
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            required={false}
                                                                            type="text"
                                                                            value="2020-01-01"
                                                                          />
                                                                          <WithStyles(ForwardRef(InputAdornment))
                                                                            position="end"
                                                                          >
                                                                            <ForwardRef(InputAdornment)
                                                                              classes={
                                                                                Object {
                                                                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                                  "filled": "MuiInputAdornment-filled",
                                                                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                                  "marginDense": "MuiInputAdornment-marginDense",
                                                                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                                                                  "positionStart": "MuiInputAdornment-positionStart",
                                                                                  "root": "MuiInputAdornment-root",
                                                                                }
                                                                              }
                                                                              position="end"
                                                                            >
                                                                              <div
                                                                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                              >
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <ForwardRef(IconButton)
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorInherit": "MuiIconButton-colorInherit",
                                                                                        "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                        "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                        "disabled": "Mui-disabled",
                                                                                        "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                        "edgeStart": "MuiIconButton-edgeStart",
                                                                                        "label": "MuiIconButton-label",
                                                                                        "root": "MuiIconButton-root",
                                                                                        "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                      }
                                                                                    }
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <WithStyles(ForwardRef(ButtonBase))
                                                                                      centerRipple={true}
                                                                                      className="MuiIconButton-root"
                                                                                      disabled={false}
                                                                                      focusRipple={true}
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <ForwardRef(ButtonBase)
                                                                                        centerRipple={true}
                                                                                        className="MuiIconButton-root"
                                                                                        classes={
                                                                                          Object {
                                                                                            "disabled": "Mui-disabled",
                                                                                            "focusVisible": "Mui-focusVisible",
                                                                                            "root": "MuiButtonBase-root",
                                                                                          }
                                                                                        }
                                                                                        disabled={false}
                                                                                        focusRipple={true}
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <button
                                                                                          className="MuiButtonBase-root MuiIconButton-root"
                                                                                          disabled={false}
                                                                                          onBlur={[Function]}
                                                                                          onClick={[Function]}
                                                                                          onDragLeave={[Function]}
                                                                                          onFocus={[Function]}
                                                                                          onKeyDown={[Function]}
                                                                                          onKeyUp={[Function]}
                                                                                          onMouseDown={[Function]}
                                                                                          onMouseLeave={[Function]}
                                                                                          onMouseUp={[Function]}
                                                                                          onTouchEnd={[Function]}
                                                                                          onTouchMove={[Function]}
                                                                                          onTouchStart={[Function]}
                                                                                          tabIndex={0}
                                                                                          type="button"
                                                                                        >
                                                                                          <span
                                                                                            className="MuiIconButton-label"
                                                                                          >
                                                                                            <img
                                                                                              alt="open calendar"
                                                                                              src="calendar.svg"
                                                                                            />
                                                                                          </span>
                                                                                          <NoSsr>
                                                                                            <WithStyles(undefined)
                                                                                              center={true}
                                                                                            >
                                                                                              <ForwardRef(TouchRipple)
                                                                                                center={true}
                                                                                                classes={
                                                                                                  Object {
                                                                                                    "child": "MuiTouchRipple-child",
                                                                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                                    "ripple": "MuiTouchRipple-ripple",
                                                                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                                    "root": "MuiTouchRipple-root",
                                                                                                  }
                                                                                                }
                                                                                              >
                                                                                                <span
                                                                                                  className="MuiTouchRipple-root"
                                                                                                >
                                                                                                  <TransitionGroup
                                                                                                    childFactory={[Function]}
                                                                                                    component={null}
                                                                                                    exit={true}
                                                                                                  />
                                                                                                </span>
                                                                                              </ForwardRef(TouchRipple)>
                                                                                            </WithStyles(undefined)>
                                                                                          </NoSsr>
                                                                                        </button>
                                                                                      </ForwardRef(ButtonBase)>
                                                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                                                  </ForwardRef(IconButton)>
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                              </div>
                                                                            </ForwardRef(InputAdornment)>
                                                                          </WithStyles(ForwardRef(InputAdornment))>
                                                                          <WithStyles(ForwardRef(NotchedOutline))
                                                                            className="MuiOutlinedInput-notchedOutline"
                                                                            labelWidth={0}
                                                                            notched={false}
                                                                          >
                                                                            <ForwardRef(NotchedOutline)
                                                                              className="MuiOutlinedInput-notchedOutline"
                                                                              classes={
                                                                                Object {
                                                                                  "legend": "PrivateNotchedOutline-legend-61",
                                                                                  "root": "PrivateNotchedOutline-root-60",
                                                                                }
                                                                              }
                                                                              labelWidth={0}
                                                                              notched={false}
                                                                            >
                                                                              <fieldset
                                                                                aria-hidden={true}
                                                                                className="PrivateNotchedOutline-root-60 MuiOutlinedInput-notchedOutline"
                                                                                style={
                                                                                  Object {
                                                                                    "paddingLeft": 8,
                                                                                  }
                                                                                }
                                                                              >
                                                                                <legend
                                                                                  className="PrivateNotchedOutline-legend-61"
                                                                                  style={
                                                                                    Object {
                                                                                      "width": 0.01,
                                                                                    }
                                                                                  }
                                                                                >
                                                                                  <span
                                                                                    dangerouslySetInnerHTML={
                                                                                      Object {
                                                                                        "__html": "&#8203;",
                                                                                      }
                                                                                    }
                                                                                  />
                                                                                </legend>
                                                                              </fieldset>
                                                                            </ForwardRef(NotchedOutline)>
                                                                          </WithStyles(ForwardRef(NotchedOutline))>
                                                                        </div>
                                                                      </ForwardRef(InputBase)>
                                                                    </WithStyles(ForwardRef(InputBase))>
                                                                  </ForwardRef(OutlinedInput)>
                                                                </WithStyles(ForwardRef(OutlinedInput))>
                                                              </div>
                                                            </ForwardRef(FormControl)>
                                                          </WithStyles(ForwardRef(FormControl))>
                                                        </ForwardRef(TextField)>
                                                      </WithStyles(ForwardRef(TextField))>
                                                    </Rifm>
                                                  </KeyboardDateInput>
                                                  <WithStyles(ForwardRef(Popover))
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "bottom",
                                                      }
                                                    }
                                                    onClose={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                  >
                                                    <ForwardRef(Popover)
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "bottom",
                                                        }
                                                      }
                                                      classes={
                                                        Object {
                                                          "paper": "MuiPopover-paper",
                                                          "root": "MuiPopover-root",
                                                        }
                                                      }
                                                      onClose={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(Modal)
                                                        BackdropProps={
                                                          Object {
                                                            "invisible": true,
                                                          }
                                                        }
                                                        className="MuiPopover-root"
                                                        onClose={[Function]}
                                                        open={false}
                                                      />
                                                    </ForwardRef(Popover)>
                                                  </WithStyles(ForwardRef(Popover))>
                                                </InlineWrapper>
                                              </Wrapper>
                                            </PickerWithState>
                                          </MuiPickersUtilsProvider>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </Component>
                                </StyledComponent>
                              </Styled(Component)>
                              <Input
                                data-testid="fixed-desks-min-lease"
                                id="fixed-desks-minLease"
                                label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                onChange={[Function]}
                                type="number"
                                value=""
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "fnykrF",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bxivhb fnykrF"
                                    >
                                      <label
                                        htmlFor="fixed-desks-minLease"
                                      >
                                        ONBOARDING_SPACE_FLEX_MINLEASE
                                      </label>
                                      <styled.input
                                        data-testid="fixed-desks-min-lease"
                                        id="fixed-desks-minLease"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          data-testid="fixed-desks-min-lease"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "gtFQcX",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="fixed-desks-minLease"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-ifAKCX gtFQcX"
                                            data-testid="fixed-desks-min-lease"
                                            id="fixed-desks-minLease"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-EHOje",
                                                "isStatic": false,
                                                "lastClassName": "lpgKwh",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-EHOje",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-EHOje lpgKwh"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                              <Input
                                data-testid="fixed-desks-price"
                                id="fixed-desks-price"
                                label="ONBOARDING_SPACE_FLEX_PRICE (Kr)"
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                type="number"
                                value=""
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "fnykrF",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bxivhb fnykrF"
                                    >
                                      <label
                                        htmlFor="fixed-desks-price"
                                      >
                                        ONBOARDING_SPACE_FLEX_PRICE (Kr)
                                      </label>
                                      <styled.input
                                        data-testid="fixed-desks-price"
                                        id="fixed-desks-price"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          data-testid="fixed-desks-price"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "gtFQcX",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="fixed-desks-price"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-ifAKCX gtFQcX"
                                            data-testid="fixed-desks-price"
                                            id="fixed-desks-price"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-EHOje",
                                                "isStatic": false,
                                                "lastClassName": "lpgKwh",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-EHOje",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-EHOje lpgKwh"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <ServicedOffices
                    space={
                      Object {
                        "availabilityFixed": 2020-01-01T00:00:00.000Z,
                        "fitout": Array [
                          Object {
                            "amount": 1000,
                            "description": "FitOut1",
                            "name": "FitOut1",
                          },
                        ],
                        "fixedDesks": Object {
                          "availableFrom": 2020-01-01T00:00:00.000Z,
                          "currencyCode": "NOK",
                          "desks": 0,
                          "frequency": "Monthly",
                          "minLease": 0,
                          "price": 0,
                        },
                        "floorPlan": Array [],
                        "hotDesks": Object {
                          "availableFrom": 2020-01-01T00:00:00.000Z,
                          "currencyCode": "NOK",
                          "desks": 0,
                          "frequency": "Monthly",
                          "minLease": 0,
                          "price": 0,
                        },
                        "id": "0",
                        "images": Array [],
                        "months": undefined,
                        "servicedOffices": Array [],
                        "spaceDescription": "",
                        "spaceFloor": undefined,
                        "spaceFloored": "",
                        "spaceHighlights": "",
                        "spaceMatterPort": "",
                        "spaceName": "",
                        "spaceRent": undefined,
                        "spaceServices": undefined,
                        "spaceServicesNotNegotiable": false,
                        "spaceSize": undefined,
                        "spaceSizeCommon": undefined,
                        "status": 1,
                        "type": "FLEX",
                        "use": "",
                      }
                    }
                  >
                    <styled.h3>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bwzfXH",
                              "isStatic": false,
                              "lastClassName": "ckRbFF",
                              "rules": Array [
                                "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                              ],
                            },
                            "displayName": "styled.h3",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bwzfXH",
                            "target": "h3",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <h3
                          className="sc-bwzfXH ckRbFF"
                        >
                          ONBOARDING_SPACE_FLEX_SERVICED_OFFICES
                        </h3>
                      </StyledComponent>
                    </styled.h3>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-eHgmQL",
                              "isStatic": false,
                              "lastClassName": "kmgeqH",
                              "rules": Array [
                                "
  max-width: 516px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  border-radius: 2px;
  background-color: #f4f4f4;
  padding: 20px;
  & > div {
    margin-bottom: 20px;
  }
  & > div:last-child {
    margin-bottom: 0px;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-eHgmQL",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-eHgmQL kmgeqH"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cvbbAY",
                                    "isStatic": false,
                                    "lastClassName": "esauBc",
                                    "rules": Array [
                                      "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cvbbAY",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-cvbbAY esauBc"
                              >
                                <Styled(Styled(Input))
                                  id="serviced-offices-desks"
                                  label="ONBOARDING_SPACE_SO_PEOPLE"
                                  min={1}
                                  onChange={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kEYyzF",
                                          "isStatic": false,
                                          "lastClassName": "gvqOhC",
                                          "rules": Array [
                                            "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                            "
  width: 178px;
",
                                          ],
                                        },
                                        "displayName": "Styled(Styled(Input))",
                                        "foldedComponentIds": Array [
                                          "sc-hMqMXs",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-kEYyzF",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="serviced-offices-desks"
                                    label="ONBOARDING_SPACE_SO_PEOPLE"
                                    min={1}
                                    onChange={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <Input
                                      className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                      id="serviced-offices-desks"
                                      label="ONBOARDING_SPACE_SO_PEOPLE"
                                      min={1}
                                      onChange={[Function]}
                                      type="number"
                                      value=""
                                    >
                                      <styled.div
                                        className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                      >
                                        <StyledComponent
                                          className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bxivhb",
                                                "isStatic": false,
                                                "lastClassName": "fnykrF",
                                                "rules": Array [
                                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-bxivhb",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-bxivhb fnykrF sc-hMqMXs sc-kEYyzF gvqOhC"
                                          >
                                            <label
                                              htmlFor="serviced-offices-desks"
                                            >
                                              ONBOARDING_SPACE_SO_PEOPLE
                                            </label>
                                            <styled.input
                                              id="serviced-offices-desks"
                                              min={1}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value=""
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-ifAKCX",
                                                      "isStatic": false,
                                                      "lastClassName": "gtFQcX",
                                                      "rules": Array [
                                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                        [Function],
                                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                        [Function],
                                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                        [Function],
                                                        ";
    border: 1px solid ",
                                                        [Function],
                                                        ";
  }
",
                                                      ],
                                                    },
                                                    "displayName": "styled.input",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-ifAKCX",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                id="serviced-offices-desks"
                                                min={1}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                type="number"
                                                value=""
                                              >
                                                <input
                                                  className="sc-ifAKCX gtFQcX"
                                                  id="serviced-offices-desks"
                                                  min={1}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  type="number"
                                                  value=""
                                                />
                                              </StyledComponent>
                                            </styled.input>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-EHOje",
                                                      "isStatic": false,
                                                      "lastClassName": "lpgKwh",
                                                      "rules": Array [
                                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-EHOje",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-EHOje lpgKwh"
                                                />
                                              </StyledComponent>
                                            </styled.div>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </Input>
                                  </StyledComponent>
                                </Styled(Styled(Input))>
                                <Styled(Styled(Input))
                                  id="serviced-offices-floor"
                                  label="ONBOARDING_SPACE_SO_FLOOR"
                                  onChange={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kEYyzF",
                                          "isStatic": false,
                                          "lastClassName": "gvqOhC",
                                          "rules": Array [
                                            "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                            "
  width: 178px;
",
                                          ],
                                        },
                                        "displayName": "Styled(Styled(Input))",
                                        "foldedComponentIds": Array [
                                          "sc-hMqMXs",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-kEYyzF",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="serviced-offices-floor"
                                    label="ONBOARDING_SPACE_SO_FLOOR"
                                    onChange={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <Input
                                      className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                      id="serviced-offices-floor"
                                      label="ONBOARDING_SPACE_SO_FLOOR"
                                      onChange={[Function]}
                                      type="number"
                                      value=""
                                    >
                                      <styled.div
                                        className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                      >
                                        <StyledComponent
                                          className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bxivhb",
                                                "isStatic": false,
                                                "lastClassName": "fnykrF",
                                                "rules": Array [
                                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-bxivhb",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-bxivhb fnykrF sc-hMqMXs sc-kEYyzF gvqOhC"
                                          >
                                            <label
                                              htmlFor="serviced-offices-floor"
                                            >
                                              ONBOARDING_SPACE_SO_FLOOR
                                            </label>
                                            <styled.input
                                              id="serviced-offices-floor"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value=""
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-ifAKCX",
                                                      "isStatic": false,
                                                      "lastClassName": "gtFQcX",
                                                      "rules": Array [
                                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                        [Function],
                                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                        [Function],
                                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                        [Function],
                                                        ";
    border: 1px solid ",
                                                        [Function],
                                                        ";
  }
",
                                                      ],
                                                    },
                                                    "displayName": "styled.input",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-ifAKCX",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                id="serviced-offices-floor"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                type="number"
                                                value=""
                                              >
                                                <input
                                                  className="sc-ifAKCX gtFQcX"
                                                  id="serviced-offices-floor"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  type="number"
                                                  value=""
                                                />
                                              </StyledComponent>
                                            </styled.input>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-EHOje",
                                                      "isStatic": false,
                                                      "lastClassName": "lpgKwh",
                                                      "rules": Array [
                                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-EHOje",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-EHOje lpgKwh"
                                                />
                                              </StyledComponent>
                                            </styled.div>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </Input>
                                  </StyledComponent>
                                </Styled(Styled(Input))>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-jWBwVP",
                                          "isStatic": false,
                                          "lastClassName": "iRcnXQ",
                                          "rules": Array [
                                            "
  display: flex;
  & > div {
    margin-right: 20px;
  }
  & > div:last-child {
    margin-right: 0;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-jWBwVP",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-jWBwVP iRcnXQ"
                                    >
                                      <Styled(Component)
                                        disablePast={true}
                                        id="serviced-offices-from"
                                        label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                        onChange={[Function]}
                                        value={2015-06-15T22:12:05.000Z}
                                      >
                                        <StyledComponent
                                          disablePast={true}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-gZMcBi",
                                                "isStatic": false,
                                                "lastClassName": "gSFAtH",
                                                "rules": Array [
                                                  "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                                  [Function],
                                                  ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                                ],
                                              },
                                              "displayName": "Styled(Component)",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-gZMcBi",
                                              "target": [Function],
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="serviced-offices-from"
                                          label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                          onChange={[Function]}
                                          value={2015-06-15T22:12:05.000Z}
                                        >
                                          <Component
                                            className="sc-gZMcBi gSFAtH"
                                            disablePast={true}
                                            id="serviced-offices-from"
                                            label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                            onChange={[Function]}
                                            value={2015-06-15T22:12:05.000Z}
                                          >
                                            <styled.div
                                              className="sc-gZMcBi gSFAtH"
                                              focusOn={false}
                                            >
                                              <StyledComponent
                                                className="sc-gZMcBi gSFAtH"
                                                focusOn={false}
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-iwsKbI",
                                                      "isStatic": false,
                                                      "lastClassName": "djsvPA",
                                                      "rules": Array [
                                                        "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                                        [Function],
                                                        ";
  }
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-iwsKbI",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-iwsKbI djsvPA sc-gZMcBi gSFAtH"
                                                >
                                                  <label>
                                                    ONBOARDING_SPACE_FLEX_AVAILABILITY
                                                  </label>
                                                  <MuiPickersUtilsProvider
                                                    locale={
                                                      Object {
                                                        "code": "en-GB",
                                                        "formatDistance": [Function],
                                                        "formatLong": Object {
                                                          "date": [Function],
                                                          "dateTime": [Function],
                                                          "time": [Function],
                                                        },
                                                        "formatRelative": [Function],
                                                        "localize": Object {
                                                          "day": [Function],
                                                          "dayPeriod": [Function],
                                                          "era": [Function],
                                                          "month": [Function],
                                                          "ordinalNumber": [Function],
                                                          "quarter": [Function],
                                                        },
                                                        "match": Object {
                                                          "day": [Function],
                                                          "dayPeriod": [Function],
                                                          "era": [Function],
                                                          "month": [Function],
                                                          "ordinalNumber": [Function],
                                                          "quarter": [Function],
                                                        },
                                                        "options": Object {
                                                          "firstWeekContainsDate": 4,
                                                          "weekStartsOn": 1,
                                                        },
                                                      }
                                                    }
                                                    utils={[Function]}
                                                  >
                                                    <PickerWithState
                                                      InputLabelProps={
                                                        Object {
                                                          "error": false,
                                                          "shrink": false,
                                                        }
                                                      }
                                                      allowKeyboardControl={true}
                                                      autoOk={true}
                                                      disablePast={true}
                                                      disableToolbar={true}
                                                      format="yyyy-MM-dd"
                                                      id="serviced-offices-from"
                                                      inputVariant="outlined"
                                                      invalidDateMessage="Invalid Date Format"
                                                      keyboardIcon={
                                                        <img
                                                          alt="open calendar"
                                                          src="calendar.svg"
                                                        />
                                                      }
                                                      maxDate={2100-01-01T00:00:00.000Z}
                                                      maxDateMessage="Date should not be after maximal date"
                                                      minDate={1900-01-01T00:00:00.000Z}
                                                      minDateMessage="Date should not be before minimal date"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      openTo="date"
                                                      value={2015-06-15T22:12:05.000Z}
                                                      variant="inline"
                                                      views={
                                                        Array [
                                                          "year",
                                                          "date",
                                                        ]
                                                      }
                                                    >
                                                      <Wrapper
                                                        DateInputProps={
                                                          Object {
                                                            "format": "yyyy-MM-dd",
                                                            "inputValue": "2015-06-15",
                                                            "onChange": [Function],
                                                            "openPicker": [Function],
                                                            "validationError": "",
                                                          }
                                                        }
                                                        InputComponent={[Function]}
                                                        InputLabelProps={
                                                          Object {
                                                            "error": false,
                                                            "shrink": false,
                                                          }
                                                        }
                                                        format="yyyy-MM-dd"
                                                        id="serviced-offices-from"
                                                        inputVariant="outlined"
                                                        keyboardIcon={
                                                          <img
                                                            alt="open calendar"
                                                            src="calendar.svg"
                                                          />
                                                        }
                                                        onAccept={[Function]}
                                                        onBlur={[Function]}
                                                        onClear={[Function]}
                                                        onDismiss={[Function]}
                                                        onFocus={[Function]}
                                                        onSetToday={[Function]}
                                                        open={false}
                                                        variant="inline"
                                                      >
                                                        <InlineWrapper
                                                          DateInputProps={
                                                            Object {
                                                              "format": "yyyy-MM-dd",
                                                              "inputValue": "2015-06-15",
                                                              "onChange": [Function],
                                                              "openPicker": [Function],
                                                              "validationError": "",
                                                            }
                                                          }
                                                          InputComponent={[Function]}
                                                          InputLabelProps={
                                                            Object {
                                                              "error": false,
                                                              "shrink": false,
                                                            }
                                                          }
                                                          format="yyyy-MM-dd"
                                                          id="serviced-offices-from"
                                                          inputVariant="outlined"
                                                          keyboardIcon={
                                                            <img
                                                              alt="open calendar"
                                                              src="calendar.svg"
                                                            />
                                                          }
                                                          onAccept={[Function]}
                                                          onBlur={[Function]}
                                                          onClear={[Function]}
                                                          onDismiss={[Function]}
                                                          onFocus={[Function]}
                                                          onSetToday={[Function]}
                                                          open={false}
                                                        >
                                                          <KeyboardDateInput
                                                            InputLabelProps={
                                                              Object {
                                                                "error": false,
                                                                "shrink": false,
                                                              }
                                                            }
                                                            format="yyyy-MM-dd"
                                                            id="serviced-offices-from"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                  id="serviced-offices-from"
                                                                  type="text"
                                                                  value="2015-06-15"
                                                                />,
                                                              }
                                                            }
                                                            inputValue="2015-06-15"
                                                            inputVariant="outlined"
                                                            keyboardIcon={
                                                              <img
                                                                alt="open calendar"
                                                                src="calendar.svg"
                                                              />
                                                            }
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            openPicker={[Function]}
                                                            validationError=""
                                                          >
                                                            <Rifm
                                                              format={[Function]}
                                                              key="____-__-__"
                                                              onChange={[Function]}
                                                              refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                              value="2015-06-15"
                                                            >
                                                              <WithStyles(ForwardRef(TextField))
                                                                InputLabelProps={
                                                                  Object {
                                                                    "error": false,
                                                                    "shrink": false,
                                                                  }
                                                                }
                                                                InputProps={
                                                                  Object {
                                                                    "endAdornment": <ForwardRef(WithStyles)
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(WithStyles)
                                                                        onClick={[Function]}
                                                                      >
                                                                        <img
                                                                          alt="open calendar"
                                                                          src="calendar.svg"
                                                                        />
                                                                      </ForwardRef(WithStyles)>
                                                                    </ForwardRef(WithStyles)>,
                                                                  }
                                                                }
                                                                error={false}
                                                                helperText=""
                                                                id="serviced-offices-from"
                                                                inputRef={
                                                                  Object {
                                                                    "current": <input
                                                                      aria-invalid="false"
                                                                      class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                      id="serviced-offices-from"
                                                                      type="text"
                                                                      value="2015-06-15"
                                                                    />,
                                                                  }
                                                                }
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                value="2015-06-15"
                                                                variant="outlined"
                                                              >
                                                                <ForwardRef(TextField)
                                                                  InputLabelProps={
                                                                    Object {
                                                                      "error": false,
                                                                      "shrink": false,
                                                                    }
                                                                  }
                                                                  InputProps={
                                                                    Object {
                                                                      "endAdornment": <ForwardRef(WithStyles)
                                                                        position="end"
                                                                      >
                                                                        <ForwardRef(WithStyles)
                                                                          onClick={[Function]}
                                                                        >
                                                                          <img
                                                                            alt="open calendar"
                                                                            src="calendar.svg"
                                                                          />
                                                                        </ForwardRef(WithStyles)>
                                                                      </ForwardRef(WithStyles)>,
                                                                    }
                                                                  }
                                                                  classes={
                                                                    Object {
                                                                      "root": "MuiTextField-root",
                                                                    }
                                                                  }
                                                                  error={false}
                                                                  helperText=""
                                                                  id="serviced-offices-from"
                                                                  inputRef={
                                                                    Object {
                                                                      "current": <input
                                                                        aria-invalid="false"
                                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                        id="serviced-offices-from"
                                                                        type="text"
                                                                        value="2015-06-15"
                                                                      />,
                                                                    }
                                                                  }
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  value="2015-06-15"
                                                                  variant="outlined"
                                                                >
                                                                  <WithStyles(ForwardRef(FormControl))
                                                                    className="MuiTextField-root"
                                                                    color="primary"
                                                                    disabled={false}
                                                                    error={false}
                                                                    fullWidth={false}
                                                                    required={false}
                                                                    variant="outlined"
                                                                  >
                                                                    <ForwardRef(FormControl)
                                                                      className="MuiTextField-root"
                                                                      classes={
                                                                        Object {
                                                                          "fullWidth": "MuiFormControl-fullWidth",
                                                                          "marginDense": "MuiFormControl-marginDense",
                                                                          "marginNormal": "MuiFormControl-marginNormal",
                                                                          "root": "MuiFormControl-root",
                                                                        }
                                                                      }
                                                                      color="primary"
                                                                      disabled={false}
                                                                      error={false}
                                                                      fullWidth={false}
                                                                      required={false}
                                                                      variant="outlined"
                                                                    >
                                                                      <div
                                                                        className="MuiFormControl-root MuiTextField-root"
                                                                      >
                                                                        <WithStyles(ForwardRef(OutlinedInput))
                                                                          autoFocus={false}
                                                                          endAdornment={
                                                                            <ForwardRef(WithStyles)
                                                                              position="end"
                                                                            >
                                                                              <ForwardRef(WithStyles)
                                                                                onClick={[Function]}
                                                                              >
                                                                                <img
                                                                                  alt="open calendar"
                                                                                  src="calendar.svg"
                                                                                />
                                                                              </ForwardRef(WithStyles)>
                                                                            </ForwardRef(WithStyles)>
                                                                          }
                                                                          fullWidth={false}
                                                                          id="serviced-offices-from"
                                                                          inputRef={
                                                                            Object {
                                                                              "current": <input
                                                                                aria-invalid="false"
                                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                id="serviced-offices-from"
                                                                                type="text"
                                                                                value="2015-06-15"
                                                                              />,
                                                                            }
                                                                          }
                                                                          labelWidth={0}
                                                                          multiline={false}
                                                                          notched={false}
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          value="2015-06-15"
                                                                        >
                                                                          <ForwardRef(OutlinedInput)
                                                                            autoFocus={false}
                                                                            classes={
                                                                              Object {
                                                                                "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                                "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                                "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                                "disabled": "Mui-disabled",
                                                                                "error": "Mui-error",
                                                                                "focused": "Mui-focused",
                                                                                "input": "MuiOutlinedInput-input",
                                                                                "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                                "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                                "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                                "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                                "marginDense": "MuiOutlinedInput-marginDense",
                                                                                "multiline": "MuiOutlinedInput-multiline",
                                                                                "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                                "root": "MuiOutlinedInput-root",
                                                                              }
                                                                            }
                                                                            endAdornment={
                                                                              <ForwardRef(WithStyles)
                                                                                position="end"
                                                                              >
                                                                                <ForwardRef(WithStyles)
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <img
                                                                                    alt="open calendar"
                                                                                    src="calendar.svg"
                                                                                  />
                                                                                </ForwardRef(WithStyles)>
                                                                              </ForwardRef(WithStyles)>
                                                                            }
                                                                            fullWidth={false}
                                                                            id="serviced-offices-from"
                                                                            inputRef={
                                                                              Object {
                                                                                "current": <input
                                                                                  aria-invalid="false"
                                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                  id="serviced-offices-from"
                                                                                  type="text"
                                                                                  value="2015-06-15"
                                                                                />,
                                                                              }
                                                                            }
                                                                            labelWidth={0}
                                                                            multiline={false}
                                                                            notched={false}
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            value="2015-06-15"
                                                                          >
                                                                            <WithStyles(ForwardRef(InputBase))
                                                                              autoFocus={false}
                                                                              classes={
                                                                                Object {
                                                                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                                  "disabled": "Mui-disabled",
                                                                                  "error": "Mui-error",
                                                                                  "focused": "Mui-focused",
                                                                                  "input": "MuiOutlinedInput-input",
                                                                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                                  "marginDense": "MuiOutlinedInput-marginDense",
                                                                                  "multiline": "MuiOutlinedInput-multiline",
                                                                                  "notchedOutline": null,
                                                                                  "root": "MuiOutlinedInput-root",
                                                                                }
                                                                              }
                                                                              endAdornment={
                                                                                <ForwardRef(WithStyles)
                                                                                  position="end"
                                                                                >
                                                                                  <ForwardRef(WithStyles)
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <img
                                                                                      alt="open calendar"
                                                                                      src="calendar.svg"
                                                                                    />
                                                                                  </ForwardRef(WithStyles)>
                                                                                </ForwardRef(WithStyles)>
                                                                              }
                                                                              fullWidth={false}
                                                                              id="serviced-offices-from"
                                                                              inputComponent="input"
                                                                              inputRef={
                                                                                Object {
                                                                                  "current": <input
                                                                                    aria-invalid="false"
                                                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                    id="serviced-offices-from"
                                                                                    type="text"
                                                                                    value="2015-06-15"
                                                                                  />,
                                                                                }
                                                                              }
                                                                              multiline={false}
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              renderSuffix={[Function]}
                                                                              type="text"
                                                                              value="2015-06-15"
                                                                            >
                                                                              <ForwardRef(InputBase)
                                                                                autoFocus={false}
                                                                                classes={
                                                                                  Object {
                                                                                    "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                                    "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                                    "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                                    "disabled": "Mui-disabled Mui-disabled",
                                                                                    "error": "Mui-error Mui-error",
                                                                                    "focused": "Mui-focused Mui-focused",
                                                                                    "formControl": "MuiInputBase-formControl",
                                                                                    "fullWidth": "MuiInputBase-fullWidth",
                                                                                    "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                                    "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                                    "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                                    "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                                    "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                                  }
                                                                                }
                                                                                endAdornment={
                                                                                  <ForwardRef(WithStyles)
                                                                                    position="end"
                                                                                  >
                                                                                    <ForwardRef(WithStyles)
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <img
                                                                                        alt="open calendar"
                                                                                        src="calendar.svg"
                                                                                      />
                                                                                    </ForwardRef(WithStyles)>
                                                                                  </ForwardRef(WithStyles)>
                                                                                }
                                                                                fullWidth={false}
                                                                                id="serviced-offices-from"
                                                                                inputComponent="input"
                                                                                inputRef={
                                                                                  Object {
                                                                                    "current": <input
                                                                                      aria-invalid="false"
                                                                                      class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                      id="serviced-offices-from"
                                                                                      type="text"
                                                                                      value="2015-06-15"
                                                                                    />,
                                                                                  }
                                                                                }
                                                                                multiline={false}
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                onFocus={[Function]}
                                                                                renderSuffix={[Function]}
                                                                                type="text"
                                                                                value="2015-06-15"
                                                                              >
                                                                                <div
                                                                                  className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <input
                                                                                    aria-invalid={false}
                                                                                    autoFocus={false}
                                                                                    className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                    disabled={false}
                                                                                    id="serviced-offices-from"
                                                                                    onAnimationStart={[Function]}
                                                                                    onBlur={[Function]}
                                                                                    onChange={[Function]}
                                                                                    onFocus={[Function]}
                                                                                    required={false}
                                                                                    type="text"
                                                                                    value="2015-06-15"
                                                                                  />
                                                                                  <WithStyles(ForwardRef(InputAdornment))
                                                                                    position="end"
                                                                                  >
                                                                                    <ForwardRef(InputAdornment)
                                                                                      classes={
                                                                                        Object {
                                                                                          "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                                          "filled": "MuiInputAdornment-filled",
                                                                                          "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                                          "marginDense": "MuiInputAdornment-marginDense",
                                                                                          "positionEnd": "MuiInputAdornment-positionEnd",
                                                                                          "positionStart": "MuiInputAdornment-positionStart",
                                                                                          "root": "MuiInputAdornment-root",
                                                                                        }
                                                                                      }
                                                                                      position="end"
                                                                                    >
                                                                                      <div
                                                                                        className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                                      >
                                                                                        <WithStyles(ForwardRef(IconButton))
                                                                                          onClick={[Function]}
                                                                                        >
                                                                                          <ForwardRef(IconButton)
                                                                                            classes={
                                                                                              Object {
                                                                                                "colorInherit": "MuiIconButton-colorInherit",
                                                                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                                "disabled": "Mui-disabled",
                                                                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                                "edgeStart": "MuiIconButton-edgeStart",
                                                                                                "label": "MuiIconButton-label",
                                                                                                "root": "MuiIconButton-root",
                                                                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                              }
                                                                                            }
                                                                                            onClick={[Function]}
                                                                                          >
                                                                                            <WithStyles(ForwardRef(ButtonBase))
                                                                                              centerRipple={true}
                                                                                              className="MuiIconButton-root"
                                                                                              disabled={false}
                                                                                              focusRipple={true}
                                                                                              onClick={[Function]}
                                                                                            >
                                                                                              <ForwardRef(ButtonBase)
                                                                                                centerRipple={true}
                                                                                                className="MuiIconButton-root"
                                                                                                classes={
                                                                                                  Object {
                                                                                                    "disabled": "Mui-disabled",
                                                                                                    "focusVisible": "Mui-focusVisible",
                                                                                                    "root": "MuiButtonBase-root",
                                                                                                  }
                                                                                                }
                                                                                                disabled={false}
                                                                                                focusRipple={true}
                                                                                                onClick={[Function]}
                                                                                              >
                                                                                                <button
                                                                                                  className="MuiButtonBase-root MuiIconButton-root"
                                                                                                  disabled={false}
                                                                                                  onBlur={[Function]}
                                                                                                  onClick={[Function]}
                                                                                                  onDragLeave={[Function]}
                                                                                                  onFocus={[Function]}
                                                                                                  onKeyDown={[Function]}
                                                                                                  onKeyUp={[Function]}
                                                                                                  onMouseDown={[Function]}
                                                                                                  onMouseLeave={[Function]}
                                                                                                  onMouseUp={[Function]}
                                                                                                  onTouchEnd={[Function]}
                                                                                                  onTouchMove={[Function]}
                                                                                                  onTouchStart={[Function]}
                                                                                                  tabIndex={0}
                                                                                                  type="button"
                                                                                                >
                                                                                                  <span
                                                                                                    className="MuiIconButton-label"
                                                                                                  >
                                                                                                    <img
                                                                                                      alt="open calendar"
                                                                                                      src="calendar.svg"
                                                                                                    />
                                                                                                  </span>
                                                                                                  <NoSsr>
                                                                                                    <WithStyles(undefined)
                                                                                                      center={true}
                                                                                                    >
                                                                                                      <ForwardRef(TouchRipple)
                                                                                                        center={true}
                                                                                                        classes={
                                                                                                          Object {
                                                                                                            "child": "MuiTouchRipple-child",
                                                                                                            "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                                            "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                                            "ripple": "MuiTouchRipple-ripple",
                                                                                                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                                            "root": "MuiTouchRipple-root",
                                                                                                          }
                                                                                                        }
                                                                                                      >
                                                                                                        <span
                                                                                                          className="MuiTouchRipple-root"
                                                                                                        >
                                                                                                          <TransitionGroup
                                                                                                            childFactory={[Function]}
                                                                                                            component={null}
                                                                                                            exit={true}
                                                                                                          />
                                                                                                        </span>
                                                                                                      </ForwardRef(TouchRipple)>
                                                                                                    </WithStyles(undefined)>
                                                                                                  </NoSsr>
                                                                                                </button>
                                                                                              </ForwardRef(ButtonBase)>
                                                                                            </WithStyles(ForwardRef(ButtonBase))>
                                                                                          </ForwardRef(IconButton)>
                                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                                      </div>
                                                                                    </ForwardRef(InputAdornment)>
                                                                                  </WithStyles(ForwardRef(InputAdornment))>
                                                                                  <WithStyles(ForwardRef(NotchedOutline))
                                                                                    className="MuiOutlinedInput-notchedOutline"
                                                                                    labelWidth={0}
                                                                                    notched={false}
                                                                                  >
                                                                                    <ForwardRef(NotchedOutline)
                                                                                      className="MuiOutlinedInput-notchedOutline"
                                                                                      classes={
                                                                                        Object {
                                                                                          "legend": "PrivateNotchedOutline-legend-61",
                                                                                          "root": "PrivateNotchedOutline-root-60",
                                                                                        }
                                                                                      }
                                                                                      labelWidth={0}
                                                                                      notched={false}
                                                                                    >
                                                                                      <fieldset
                                                                                        aria-hidden={true}
                                                                                        className="PrivateNotchedOutline-root-60 MuiOutlinedInput-notchedOutline"
                                                                                        style={
                                                                                          Object {
                                                                                            "paddingLeft": 8,
                                                                                          }
                                                                                        }
                                                                                      >
                                                                                        <legend
                                                                                          className="PrivateNotchedOutline-legend-61"
                                                                                          style={
                                                                                            Object {
                                                                                              "width": 0.01,
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <span
                                                                                            dangerouslySetInnerHTML={
                                                                                              Object {
                                                                                                "__html": "&#8203;",
                                                                                              }
                                                                                            }
                                                                                          />
                                                                                        </legend>
                                                                                      </fieldset>
                                                                                    </ForwardRef(NotchedOutline)>
                                                                                  </WithStyles(ForwardRef(NotchedOutline))>
                                                                                </div>
                                                                              </ForwardRef(InputBase)>
                                                                            </WithStyles(ForwardRef(InputBase))>
                                                                          </ForwardRef(OutlinedInput)>
                                                                        </WithStyles(ForwardRef(OutlinedInput))>
                                                                      </div>
                                                                    </ForwardRef(FormControl)>
                                                                  </WithStyles(ForwardRef(FormControl))>
                                                                </ForwardRef(TextField)>
                                                              </WithStyles(ForwardRef(TextField))>
                                                            </Rifm>
                                                          </KeyboardDateInput>
                                                          <WithStyles(ForwardRef(Popover))
                                                            anchorOrigin={
                                                              Object {
                                                                "horizontal": "center",
                                                                "vertical": "bottom",
                                                              }
                                                            }
                                                            onClose={[Function]}
                                                            open={false}
                                                            transformOrigin={
                                                              Object {
                                                                "horizontal": "center",
                                                                "vertical": "top",
                                                              }
                                                            }
                                                          >
                                                            <ForwardRef(Popover)
                                                              anchorOrigin={
                                                                Object {
                                                                  "horizontal": "center",
                                                                  "vertical": "bottom",
                                                                }
                                                              }
                                                              classes={
                                                                Object {
                                                                  "paper": "MuiPopover-paper",
                                                                  "root": "MuiPopover-root",
                                                                }
                                                              }
                                                              onClose={[Function]}
                                                              open={false}
                                                              transformOrigin={
                                                                Object {
                                                                  "horizontal": "center",
                                                                  "vertical": "top",
                                                                }
                                                              }
                                                            >
                                                              <ForwardRef(Modal)
                                                                BackdropProps={
                                                                  Object {
                                                                    "invisible": true,
                                                                  }
                                                                }
                                                                className="MuiPopover-root"
                                                                onClose={[Function]}
                                                                open={false}
                                                              />
                                                            </ForwardRef(Popover)>
                                                          </WithStyles(ForwardRef(Popover))>
                                                        </InlineWrapper>
                                                      </Wrapper>
                                                    </PickerWithState>
                                                  </MuiPickersUtilsProvider>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                          </Component>
                                        </StyledComponent>
                                      </Styled(Component)>
                                      <Styled(Input)
                                        id="serviced-offices-min-lease"
                                        label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                        min={1}
                                        onChange={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-hMqMXs",
                                                "isStatic": false,
                                                "lastClassName": "hgHwWv",
                                                "rules": Array [
                                                  "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                                ],
                                              },
                                              "displayName": "Styled(Input)",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-hMqMXs",
                                              "target": [Function],
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="serviced-offices-min-lease"
                                          label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                          min={1}
                                          onChange={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <Input
                                            className="sc-hMqMXs hgHwWv"
                                            id="serviced-offices-min-lease"
                                            label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                            min={1}
                                            onChange={[Function]}
                                            type="number"
                                            value=""
                                          >
                                            <styled.div
                                              className="sc-hMqMXs hgHwWv"
                                            >
                                              <StyledComponent
                                                className="sc-hMqMXs hgHwWv"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-bxivhb",
                                                      "isStatic": false,
                                                      "lastClassName": "fnykrF",
                                                      "rules": Array [
                                                        "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-bxivhb",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-bxivhb fnykrF sc-hMqMXs hgHwWv"
                                                >
                                                  <label
                                                    htmlFor="serviced-offices-min-lease"
                                                  >
                                                    ONBOARDING_SPACE_FLEX_MINLEASE
                                                  </label>
                                                  <styled.input
                                                    id="serviced-offices-min-lease"
                                                    min={1}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    type="number"
                                                    value=""
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-ifAKCX",
                                                            "isStatic": false,
                                                            "lastClassName": "gtFQcX",
                                                            "rules": Array [
                                                              "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                              [Function],
                                                              ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                              [Function],
                                                              ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                              [Function],
                                                              ";
    border: 1px solid ",
                                                              [Function],
                                                              ";
  }
",
                                                            ],
                                                          },
                                                          "displayName": "styled.input",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-ifAKCX",
                                                          "target": "input",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      id="serviced-offices-min-lease"
                                                      min={1}
                                                      onChange={[Function]}
                                                      onKeyDown={[Function]}
                                                      type="number"
                                                      value=""
                                                    >
                                                      <input
                                                        className="sc-ifAKCX gtFQcX"
                                                        id="serviced-offices-min-lease"
                                                        min={1}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        type="number"
                                                        value=""
                                                      />
                                                    </StyledComponent>
                                                  </styled.input>
                                                  <styled.div>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-EHOje",
                                                            "isStatic": false,
                                                            "lastClassName": "lpgKwh",
                                                            "rules": Array [
                                                              "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-EHOje",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="sc-EHOje lpgKwh"
                                                      />
                                                    </StyledComponent>
                                                  </styled.div>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                          </Input>
                                        </StyledComponent>
                                      </Styled(Input)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <Styled(Styled(Input))
                                  id="serviced-offices-price"
                                  label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                                  min={0}
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kEYyzF",
                                          "isStatic": false,
                                          "lastClassName": "gvqOhC",
                                          "rules": Array [
                                            "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                            "
  width: 178px;
",
                                          ],
                                        },
                                        "displayName": "Styled(Styled(Input))",
                                        "foldedComponentIds": Array [
                                          "sc-hMqMXs",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-kEYyzF",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="serviced-offices-price"
                                    label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                                    min={0}
                                    onChange={[Function]}
                                    placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                    type="number"
                                    value=""
                                  >
                                    <Input
                                      className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                      id="serviced-offices-price"
                                      label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                                      min={0}
                                      onChange={[Function]}
                                      placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                      type="number"
                                      value=""
                                    >
                                      <styled.div
                                        className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                      >
                                        <StyledComponent
                                          className="sc-hMqMXs sc-kEYyzF gvqOhC"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bxivhb",
                                                "isStatic": false,
                                                "lastClassName": "fnykrF",
                                                "rules": Array [
                                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-bxivhb",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-bxivhb fnykrF sc-hMqMXs sc-kEYyzF gvqOhC"
                                          >
                                            <label
                                              htmlFor="serviced-offices-price"
                                            >
                                              ONBOARDING_SPACE_SO_PRICE (Kr)
                                            </label>
                                            <styled.input
                                              id="serviced-offices-price"
                                              min={0}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                              type="number"
                                              value=""
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-ifAKCX",
                                                      "isStatic": false,
                                                      "lastClassName": "gtFQcX",
                                                      "rules": Array [
                                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                        [Function],
                                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                        [Function],
                                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                        [Function],
                                                        ";
    border: 1px solid ",
                                                        [Function],
                                                        ";
  }
",
                                                      ],
                                                    },
                                                    "displayName": "styled.input",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-ifAKCX",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                id="serviced-offices-price"
                                                min={0}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                                type="number"
                                                value=""
                                              >
                                                <input
                                                  className="sc-ifAKCX gtFQcX"
                                                  id="serviced-offices-price"
                                                  min={0}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                                  type="number"
                                                  value=""
                                                />
                                              </StyledComponent>
                                            </styled.input>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-EHOje",
                                                      "isStatic": false,
                                                      "lastClassName": "lpgKwh",
                                                      "rules": Array [
                                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-EHOje",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-EHOje lpgKwh"
                                                />
                                              </StyledComponent>
                                            </styled.div>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </Input>
                                  </StyledComponent>
                                </Styled(Styled(Input))>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-brqgnP",
                                          "isStatic": false,
                                          "lastClassName": "coKMEM",
                                          "rules": Array [
                                            "
  button {
    margin-right: 10px;
  }
  button:last-child {
    margin-right: 0;
  }
  margin-top: 20px;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-brqgnP",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-brqgnP coKMEM"
                                    >
                                      <styled.button
                                        onClick={[Function]}
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kAzzGY",
                                                "isStatic": false,
                                                "lastClassName": "cBUtCM",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                                                ],
                                              },
                                              "displayName": "styled.button",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kAzzGY",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="sc-kAzzGY cBUtCM"
                                            onClick={[Function]}
                                          >
                                            ONBOARDING_SPACE_SO_SAVE
                                          </button>
                                        </StyledComponent>
                                      </styled.button>
                                      <Styled(styled.button)
                                        onClick={[Function]}
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kkGfuU",
                                                "isStatic": false,
                                                "lastClassName": "gKyLEd",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                                                  "
  color: #6cb9d5;
  background-color: #ffffff;
  box-sizing: border-box;
  min-width: 110px;
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.button)",
                                              "foldedComponentIds": Array [
                                                "sc-kAzzGY",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-kkGfuU",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="sc-kAzzGY sc-kkGfuU gKyLEd"
                                            onClick={[Function]}
                                          >
                                            ONBOARDING_SPACE_SO_CANCEL
                                          </button>
                                        </StyledComponent>
                                      </Styled(styled.button)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </ServicedOffices>
                </SpaceAvailabilityFlex>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ktHwxA",
                    "isStatic": false,
                    "lastClassName": "jprFbj",
                    "rules": Array [
                      "
  margin-bottom: 50px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ktHwxA",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-ktHwxA jprFbj"
              >
                <Styled(styled.h3)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cIShpX",
                          "isStatic": false,
                          "lastClassName": "lidhqp",
                          "rules": Array [
                            "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                          ],
                        },
                        "displayName": "Styled(styled.h3)",
                        "foldedComponentIds": Array [
                          "sc-bwzfXH",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-cIShpX",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-bwzfXH sc-cIShpX lidhqp"
                    >
                      ONBOARDING_SPACE_PHOTOS
                    </h3>
                  </StyledComponent>
                </Styled(styled.h3)>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-feJyhm",
                          "isStatic": false,
                          "lastClassName": "heiwKo",
                          "rules": Array [
                            "
  padding: 0 0 20px 0;
  color: #828286
  font-size: 14px;
  font-weight: 400;
  line-height: 18px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-feJyhm",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-feJyhm heiwKo"
                    >
                      ONBOARDING_PHOTOS_INFO
                    </div>
                  </StyledComponent>
                </styled.div>
                <Styled(Component)
                  accept="image/jpeg, image/png"
                  isImage={true}
                  items={Array []}
                  setItems={[Function]}
                  setUploaded={[Function]}
                >
                  <StyledComponent
                    accept="image/jpeg, image/png"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jhAzac",
                          "isStatic": false,
                          "lastClassName": "kIXfjg",
                          "rules": Array [
                            "
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
",
                          ],
                        },
                        "displayName": "Styled(Component)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jhAzac",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isImage={true}
                    items={Array []}
                    setItems={[Function]}
                    setUploaded={[Function]}
                  >
                    <Component
                      accept="image/jpeg, image/png"
                      className="sc-jhAzac kIXfjg"
                      isImage={true}
                      items={Array []}
                      setItems={[Function]}
                      setUploaded={[Function]}
                    >
                      <div
                        className="sc-jhAzac kIXfjg"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-hzDkRC",
                                  "isStatic": false,
                                  "lastClassName": "bAIkZe",
                                  "rules": Array [
                                    "
  display: inline-block;
  > div {
    border-radius: 4px;
    border: 1px solid #ced4da;
    box-sizing: border-box;
    width: 194px;
    height: 165px;
    :hover {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
    &.isDragging {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
  }
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-hzDkRC",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-hzDkRC bAIkZe"
                            >
                              <div
                                className=""
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragEnter={[Function]}
                                onDragLeave={[Function]}
                                onDragOver={[Function]}
                                onDrop={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                tabIndex={0}
                              >
                                <input
                                  accept="image/jpeg, image/png"
                                  autoComplete="off"
                                  multiple={true}
                                  onChange={[Function]}
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "display": "none",
                                    }
                                  }
                                  tabIndex={-1}
                                  type="file"
                                />
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kafWEX",
                                          "isStatic": false,
                                          "lastClassName": "ecjEhC",
                                          "rules": Array [
                                            "
  padding: 20px;
  text-align: center;
  > p {
    font-size: 18px;
    font-weight: 500;
    margin-top: 5px;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kafWEX",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-kafWEX ecjEhC"
                                    >
                                      <Plus2
                                        size="3em"
                                      >
                                        <svg
                                          height="3em"
                                          version="1.1"
                                          viewBox="0 0 34 34"
                                          width="3em"
                                        >
                                          <g
                                            fill="none"
                                            fillRule="evenodd"
                                            id="UI-KIT"
                                            stroke="#6CB9D5"
                                            strokeWidth="1"
                                          >
                                            <g
                                              fill="#6CB9D5"
                                              fillRule="nonzero"
                                              id="icons"
                                              transform="translate(-265.000000, -325.000000)"
                                            >
                                              <path
                                                d="M293.618972,330.351591 C293.150185,329.882803 292.390811,329.882803 291.922136,330.351591 L281.970506,340.303232 L272.018989,330.351703 C271.550202,329.882916 270.790828,329.882916 270.322153,330.351703 C269.853366,330.820491 269.853366,331.579866 270.322153,332.048541 L280.27367,342.00007 L270.322153,351.951599 C269.853366,352.420387 269.853366,353.179762 270.322153,353.648437 C270.55649,353.882775 270.863615,354 271.170627,354 C271.47764,354 271.784652,353.882775 272.019102,353.648437 L281.970506,343.696908 L291.922024,353.648437 C292.156361,353.882775 292.463486,354 292.770498,354 C293.07751,354 293.384523,353.882775 293.618972,353.648437 C294.08776,353.17965 294.08776,352.420274 293.618972,351.951599 L283.667343,342.00007 L293.61886,332.048541 C294.087647,331.579754 294.087647,330.820378 293.618972,330.351591 Z"
                                                id="add"
                                                transform="translate(281.970563, 342.000000) rotate(45.000000) translate(-281.970563, -342.000000) "
                                              />
                                            </g>
                                          </g>
                                        </svg>
                                      </Plus2>
                                      <p>
                                        ONBOARDING_PHOTOS_ADD
                                        <br />
                                        ONBOARDING_PHOTOS_DRAG
                                      </p>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </Component>
                  </StyledComponent>
                </Styled(Component)>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ktHwxA",
                    "isStatic": false,
                    "lastClassName": "jprFbj",
                    "rules": Array [
                      "
  margin-bottom: 50px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ktHwxA",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-ktHwxA jprFbj"
              >
                <Styled(styled.h3)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cIShpX",
                          "isStatic": false,
                          "lastClassName": "lidhqp",
                          "rules": Array [
                            "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                          ],
                        },
                        "displayName": "Styled(styled.h3)",
                        "foldedComponentIds": Array [
                          "sc-bwzfXH",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-cIShpX",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-bwzfXH sc-cIShpX lidhqp"
                    >
                      ONBOARDING_SPACE_FLOORPLAN
                    </h3>
                  </StyledComponent>
                </Styled(styled.h3)>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-feJyhm",
                          "isStatic": false,
                          "lastClassName": "heiwKo",
                          "rules": Array [
                            "
  padding: 0 0 20px 0;
  color: #828286
  font-size: 14px;
  font-weight: 400;
  line-height: 18px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-feJyhm",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-feJyhm heiwKo"
                    >
                      ONBOARDING_FLOORPLAN_INFO
                    </div>
                  </StyledComponent>
                </styled.div>
                <Styled(Component)
                  accept="image/jpeg, image/png, application/pdf, .bim"
                  isImage={true}
                  items={Array []}
                  setItems={[Function]}
                  setUploaded={[Function]}
                >
                  <StyledComponent
                    accept="image/jpeg, image/png, application/pdf, .bim"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jhAzac",
                          "isStatic": false,
                          "lastClassName": "kIXfjg",
                          "rules": Array [
                            "
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
",
                          ],
                        },
                        "displayName": "Styled(Component)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jhAzac",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isImage={true}
                    items={Array []}
                    setItems={[Function]}
                    setUploaded={[Function]}
                  >
                    <Component
                      accept="image/jpeg, image/png, application/pdf, .bim"
                      className="sc-jhAzac kIXfjg"
                      isImage={true}
                      items={Array []}
                      setItems={[Function]}
                      setUploaded={[Function]}
                    >
                      <div
                        className="sc-jhAzac kIXfjg"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-hzDkRC",
                                  "isStatic": false,
                                  "lastClassName": "bAIkZe",
                                  "rules": Array [
                                    "
  display: inline-block;
  > div {
    border-radius: 4px;
    border: 1px solid #ced4da;
    box-sizing: border-box;
    width: 194px;
    height: 165px;
    :hover {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
    &.isDragging {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
  }
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-hzDkRC",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-hzDkRC bAIkZe"
                            >
                              <div
                                className=""
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragEnter={[Function]}
                                onDragLeave={[Function]}
                                onDragOver={[Function]}
                                onDrop={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                tabIndex={0}
                              >
                                <input
                                  accept="image/jpeg, image/png, application/pdf, .bim"
                                  autoComplete="off"
                                  multiple={true}
                                  onChange={[Function]}
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "display": "none",
                                    }
                                  }
                                  tabIndex={-1}
                                  type="file"
                                />
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kafWEX",
                                          "isStatic": false,
                                          "lastClassName": "ecjEhC",
                                          "rules": Array [
                                            "
  padding: 20px;
  text-align: center;
  > p {
    font-size: 18px;
    font-weight: 500;
    margin-top: 5px;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kafWEX",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-kafWEX ecjEhC"
                                    >
                                      <Plus2
                                        size="3em"
                                      >
                                        <svg
                                          height="3em"
                                          version="1.1"
                                          viewBox="0 0 34 34"
                                          width="3em"
                                        >
                                          <g
                                            fill="none"
                                            fillRule="evenodd"
                                            id="UI-KIT"
                                            stroke="#6CB9D5"
                                            strokeWidth="1"
                                          >
                                            <g
                                              fill="#6CB9D5"
                                              fillRule="nonzero"
                                              id="icons"
                                              transform="translate(-265.000000, -325.000000)"
                                            >
                                              <path
                                                d="M293.618972,330.351591 C293.150185,329.882803 292.390811,329.882803 291.922136,330.351591 L281.970506,340.303232 L272.018989,330.351703 C271.550202,329.882916 270.790828,329.882916 270.322153,330.351703 C269.853366,330.820491 269.853366,331.579866 270.322153,332.048541 L280.27367,342.00007 L270.322153,351.951599 C269.853366,352.420387 269.853366,353.179762 270.322153,353.648437 C270.55649,353.882775 270.863615,354 271.170627,354 C271.47764,354 271.784652,353.882775 272.019102,353.648437 L281.970506,343.696908 L291.922024,353.648437 C292.156361,353.882775 292.463486,354 292.770498,354 C293.07751,354 293.384523,353.882775 293.618972,353.648437 C294.08776,353.17965 294.08776,352.420274 293.618972,351.951599 L283.667343,342.00007 L293.61886,332.048541 C294.087647,331.579754 294.087647,330.820378 293.618972,330.351591 Z"
                                                id="add"
                                                transform="translate(281.970563, 342.000000) rotate(45.000000) translate(-281.970563, -342.000000) "
                                              />
                                            </g>
                                          </g>
                                        </svg>
                                      </Plus2>
                                      <p>
                                        ONBOARDING_FLOORPLAN_ADD
                                        <br />
                                        ONBOARDING_FLOORPLAN_DRAG
                                      </p>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </Component>
                  </StyledComponent>
                </Styled(Component)>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dNLxif",
                    "isStatic": false,
                    "lastClassName": "TPofT",
                    "rules": Array [
                      "
  max-width: 516px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dNLxif",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-dNLxif TPofT"
              />
            </StyledComponent>
          </styled.div>
          <NextBack
            back={
              Object {
                "label": "ONBOARDING_BACK",
                "onClick": [Function],
              }
            }
            next={
              Object {
                "label": "ONBOARDING_EDIT",
                "onClick": [Function],
              }
            }
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gPEVay",
                      "isStatic": false,
                      "lastClassName": "jzbRkC",
                      "rules": Array [
                        "
  overflow: hidden;
  padding-top: 10px;
  margin-bottom: 30px;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gPEVay",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gPEVay jzbRkC"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iRbamj",
                            "isStatic": false,
                            "lastClassName": "crNIJq",
                            "rules": Array [
                              "
  box-sizing: border-box;
  height: 1px;
  width: 100%;
  margin: 15px 0 10px 0;
  border: 1px solid #ddddd0;
  border-top: 0;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-iRbamj",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-iRbamj crNIJq"
                      />
                    </StyledComponent>
                  </styled.div>
                  <Styled(styled.button)
                    data-testid="button-back"
                    onClick={[Function]}
                  >
                    <StyledComponent
                      data-testid="button-back"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jlyJG",
                            "isStatic": false,
                            "lastClassName": "gqSKUm",
                            "rules": Array [
                              "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                              "
  color: #404042;
  background-color: #ffffff;
  float: left;
",
                            ],
                          },
                          "displayName": "Styled(styled.button)",
                          "foldedComponentIds": Array [
                            "sc-kAzzGY",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-jlyJG",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <button
                        className="sc-kAzzGY sc-jlyJG gqSKUm"
                        data-testid="button-back"
                        onClick={[Function]}
                      >
                        ONBOARDING_BACK
                      </button>
                    </StyledComponent>
                  </Styled(styled.button)>
                  <Styled(styled.button)
                    data-testid="button-next"
                    id="button-next"
                    onClick={[Function]}
                  >
                    <StyledComponent
                      data-testid="button-next"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gipzik",
                            "isStatic": false,
                            "lastClassName": "bvcPxw",
                            "rules": Array [
                              "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                              "
  background-color: ",
                              [Function],
                              ";
  color: #ffffff;
  float: right;
",
                            ],
                          },
                          "displayName": "Styled(styled.button)",
                          "foldedComponentIds": Array [
                            "sc-kAzzGY",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-gipzik",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      id="button-next"
                      onClick={[Function]}
                    >
                      <button
                        className="sc-kAzzGY sc-gipzik bvcPxw"
                        data-testid="button-next"
                        id="button-next"
                        onClick={[Function]}
                      >
                        ONBOARDING_EDIT
                      </button>
                    </StyledComponent>
                  </Styled(styled.button)>
                </div>
              </StyledComponent>
            </styled.div>
          </NextBack>
        </SpaceForm>
      </div>
    </StyledComponent>
  </styled.div>
</EditSpace>
`;

exports[`renders Spinner 1`] = `
<EditSpace>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-btzYZH",
            "isStatic": false,
            "lastClassName": "kjokPs",
            "rules": Array [
              "
  @media (min-width: 1064px) {
    margin: 0 auto;
    padding: 0 20px;
    width: 1024px;
  }
  @media (min-width: 768px) and (max-width: 1063px) {
    margin: 0;
    padding: 0 20px;
  }
  @media (max-width: 767px) {
    margin: 0;
    padding: 0 10px;
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-btzYZH",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="sc-btzYZH kjokPs"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-lhVmIH",
                  "isStatic": false,
                  "lastClassName": "hQbDLg",
                  "rules": Array [
                    "
  padding: 40px 0 0 0;
  color: #404042;
  font-size: 32px;
  font-weight: 500;
  line-height: 41px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-lhVmIH",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-lhVmIH hQbDLg"
            >
              ONBOARDING_TITLE_EDIT_SPACE
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bYSBpT",
                  "isStatic": false,
                  "lastClassName": "bstxzY",
                  "rules": Array [
                    "
  text-align: center;
  margin-top: 20px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bYSBpT",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-bYSBpT bstxzY"
            >
              <Styled(Component)>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bdVaJa",
                        "isStatic": false,
                        "lastClassName": "cbaNlp",
                        "rules": Array [
                          "
  color: official;
  display: inline-block;
  position: relative;
  width: 80px;
  height: 80px;
  div {
    transform-origin: 40px 40px;
    animation: ",
                          Keyframes {
                            "id": "sc-keyframes-ggXszE",
                            "inject": [Function],
                            "name": "ggXszE",
                            "rules": Array [
                              "@-webkit-keyframes ggXszE{0%{opacity:1;}100%{opacity:0;}}",
                              "@keyframes ggXszE{0%{opacity:1;}100%{opacity:0;}}",
                            ],
                            "toString": [Function],
                          },
                          " 1.2s linear infinite;
  }
  div:after {
    content: ' ';
    display: block;
    position: absolute;
    top: 3px;
    left: 37px;
    width: 6px;
    height: 18px;
    border-radius: 20%;
    background: #dddddd;
  }
  div:nth-child(1) {
    transform: rotate(0deg);
    animation-delay: -1.1s;
  }
  div:nth-child(2) {
    transform: rotate(30deg);
    animation-delay: -1s;
  }
  div:nth-child(3) {
    transform: rotate(60deg);
    animation-delay: -0.9s;
  }
  div:nth-child(4) {
    transform: rotate(90deg);
    animation-delay: -0.8s;
  }
  div:nth-child(5) {
    transform: rotate(120deg);
    animation-delay: -0.7s;
  }
  div:nth-child(6) {
    transform: rotate(150deg);
    animation-delay: -0.6s;
  }
  div:nth-child(7) {
    transform: rotate(180deg);
    animation-delay: -0.5s;
  }
  div:nth-child(8) {
    transform: rotate(210deg);
    animation-delay: -0.4s;
  }
  div:nth-child(9) {
    transform: rotate(240deg);
    animation-delay: -0.3s;
  }
  div:nth-child(10) {
    transform: rotate(270deg);
    animation-delay: -0.2s;
  }
  div:nth-child(11) {
    transform: rotate(300deg);
    animation-delay: -0.1s;
  }
  div:nth-child(12) {
    transform: rotate(330deg);
    animation-delay: 0s;
  }
",
                        ],
                      },
                      "displayName": "Styled(Component)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bdVaJa",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <Component
                    className="sc-bdVaJa cbaNlp"
                  >
                    <div
                      className="sc-bdVaJa cbaNlp"
                    >
                      <div />
                      <div />
                      <div />
                      <div />
                      <div />
                      <div />
                      <div />
                      <div />
                      <div />
                      <div />
                      <div />
                      <div />
                    </div>
                  </Component>
                </StyledComponent>
              </Styled(Component)>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</EditSpace>
`;
