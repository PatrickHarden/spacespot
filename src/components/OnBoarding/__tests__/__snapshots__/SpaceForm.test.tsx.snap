// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SpaceForm edit fixed 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getAction": [Function],
      "getActions": [Function],
      "getState": [Function],
      "isActionDispatched": [Function],
      "isActionTypeDispatched": [Function],
      "subscribe": [Function],
    }
  }
>
  <SpaceForm
    isEditing={true}
    space={
      Object {
        "availabilityFixed": 2020-01-01T00:00:00.000Z,
        "fitout": Array [
          Object {
            "amount": 1000,
            "description": "FitOut1",
            "name": "FitOut1",
          },
        ],
        "fixedDesks": Object {
          "availableFrom": 2020-01-01T00:00:00.000Z,
          "currencyCode": "NOK",
          "desks": 0,
          "frequency": "Monthly",
          "minLease": 0,
          "price": 0,
        },
        "floorPlan": Array [],
        "hotDesks": Object {
          "availableFrom": 2020-01-01T00:00:00.000Z,
          "currencyCode": "NOK",
          "desks": 0,
          "frequency": "Monthly",
          "minLease": 0,
          "price": 0,
        },
        "id": "0",
        "images": Array [],
        "months": undefined,
        "servicedOffices": Array [],
        "spaceDescription": "",
        "spaceFloor": undefined,
        "spaceFloored": "",
        "spaceHighlights": "",
        "spaceMatterPort": "",
        "spaceName": "",
        "spaceRent": undefined,
        "spaceServices": undefined,
        "spaceServicesNotNegotiable": false,
        "spaceSize": undefined,
        "spaceSizeCommon": undefined,
        "status": 1,
        "type": "FIXED",
        "use": "",
      }
    }
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jbKcbu",
              "isStatic": false,
              "lastClassName": "dnaifA",
              "rules": Array [
                "
  max-width: 516px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jbKcbu",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={
          Object {
            "current": <div
              class="sc-jbKcbu dnaifA"
            >
              <div
                class="sc-hEsumM bxuiAR"
              >
                <h3
                  class="sc-bdVaJa sc-tilXH leRPTB"
                >
                  ONBOARDING_SPACE_DETAILS_FIXED
                </h3>
                <div
                  class="sc-htpNat djDvul sc-dNLxif goihLt"
                >
                  <label
                    for="spaceName"
                  >
                    ONBOARDING_SPACE_NAME
                  </label>
                  <input
                    class="sc-bxivhb aiwDT"
                    id="spaceName"
                    placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                    type="text"
                    value=""
                  />
                  <div
                    class="sc-ifAKCX hmksNE"
                  />
                </div>
                <div
                  class="sc-EHOje GzWuu"
                >
                  <label
                    for="spaceDescription"
                  >
                    ONBOARDING_SPACE_DESCRIPTION
                  </label>
                  <textarea
                    class="sc-bZQynM dIozFz"
                    formats="bold,italic,list"
                    height="112"
                    id="spaceDescription"
                    modules="[object Object]"
                    placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                  />
                  <div
                    class="sc-gzVnrw dbiKoa"
                  />
                </div>
                <div
                  class="sc-EHOje GzWuu"
                >
                  <label
                    for="spaceHighlights"
                  >
                    ONBOARDING_SPACE_HIGHLIGHTS
                  </label>
                  <textarea
                    class="sc-bZQynM dIozFz"
                    formats="bold,italic,list"
                    height="112"
                    id="spaceHighlights"
                    modules="[object Object]"
                    placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                  />
                  <div
                    class="sc-gzVnrw dbiKoa"
                  />
                </div>
                <div
                  class="sc-jqCOkK gCHWMq"
                >
                  <div
                    class="sc-htpNat djDvul sc-bbmXgH lkIqRn"
                  >
                    <label
                      for="spaceSize"
                    >
                      ONBOARDING_SPACE_SIZE
                    </label>
                    <input
                      class="sc-bxivhb aiwDT"
                      id="spaceSize"
                      placeholder="ONBOARDING_PLACEHOLDER_EXCLUSIVE_SIZE"
                      type="number"
                      value=""
                    />
                    <div
                      class="sc-ifAKCX hmksNE"
                    />
                  </div>
                  <div
                    class="sc-htpNat djDvul sc-bbmXgH lkIqRn"
                  >
                    <label
                      for="spaceSizeCommon"
                    >
                      ONBOARDING_SPACE_SIZE_COMMON
                    </label>
                    <input
                      class="sc-bxivhb aiwDT"
                      id="spaceSizeCommon"
                      placeholder="ONBOARDING_PLACEHOLDER_COMMON_AREAS"
                      type="number"
                      value=""
                    />
                    <div
                      class="sc-ifAKCX hmksNE"
                    />
                  </div>
                  <div
                    class="sc-gGBfsJ dthCHs"
                  >
                    <label
                      class="sc-jnlKLf jKMWma"
                    >
                      ONBOARDING_SPACE_SIZE_TOTAL
                    </label>
                    <div
                      class="sc-fYxtnH iSemmH"
                    >
                      0
                    </div>
                  </div>
                </div>
                <div
                  class="sc-htpNat djDvul sc-uJMKN iYjnTi"
                >
                  <label
                    for="spaceFloor"
                  >
                    ONBOARDING_SPACE_FLOOR
                  </label>
                  <input
                    class="sc-bxivhb aiwDT"
                    id="spaceFloor"
                    placeholder="ONBOARDING_PLACEHOLDER_FLOOR"
                    type="number"
                    value=""
                  />
                  <div
                    class="sc-ifAKCX hmksNE"
                  />
                </div>
              </div>
              <div
                class="sc-hEsumM bxuiAR"
              >
                <h4
                  class="sc-bwzfXH sc-feJyhm hYRSSY"
                >
                  ONBOARDING_SPACE_USE_TITLE
                </h4>
                <div
                  class="sc-cmTdod bKMHWB"
                >
                  <div
                    class="MuiFormGroup-root"
                    role="radiogroup"
                  >
                    <label
                      class="MuiFormControlLabel-root sc-iELTvK CZnOF"
                    >
                      <span
                        aria-disabled="false"
                        class="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                      >
                        <span
                          class="MuiIconButton-label"
                        >
                          <input
                            class="PrivateSwitchBase-input-90"
                            name="use"
                            type="radio"
                            value="OFFICE"
                          />
                          <div
                            class="PrivateRadioButtonIcon-root-91"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                              />
                            </svg>
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root PrivateRadioButtonIcon-layer-92"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
                              />
                            </svg>
                          </div>
                        </span>
                      </span>
                      <span
                        class="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                      >
                        ONBOARDING_SPACE_USE_OFFICE
                      </span>
                    </label>
                    <label
                      class="MuiFormControlLabel-root sc-iELTvK CZnOF"
                    >
                      <span
                        aria-disabled="false"
                        class="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                      >
                        <span
                          class="MuiIconButton-label"
                        >
                          <input
                            class="PrivateSwitchBase-input-90"
                            name="use"
                            type="radio"
                            value="RETAIL"
                          />
                          <div
                            class="PrivateRadioButtonIcon-root-91"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                              />
                            </svg>
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root PrivateRadioButtonIcon-layer-92"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
                              />
                            </svg>
                          </div>
                        </span>
                      </span>
                      <span
                        class="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                      >
                        ONBOARDING_SPACE_USE_RETAIL
                      </span>
                    </label>
                    <label
                      class="MuiFormControlLabel-root sc-iELTvK CZnOF"
                    >
                      <span
                        aria-disabled="false"
                        class="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                      >
                        <span
                          class="MuiIconButton-label"
                        >
                          <input
                            class="PrivateSwitchBase-input-90"
                            name="use"
                            type="radio"
                            value="OFFICE_RETAIL"
                          />
                          <div
                            class="PrivateRadioButtonIcon-root-91"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                              />
                            </svg>
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root PrivateRadioButtonIcon-layer-92"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
                              />
                            </svg>
                          </div>
                        </span>
                      </span>
                      <span
                        class="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                      >
                        ONBOARDING_SPACE_USE_OFFICE_RETAIL
                      </span>
                    </label>
                  </div>
                </div>
              </div>
              <div
                class="sc-hEsumM bxuiAR"
              >
                <h4
                  class="sc-bwzfXH sc-feJyhm hYRSSY"
                >
                  ONBOARDING_FLOORED_MATTERPORT_TITLE
                </h4>
                <div
                  class="sc-htpNat djDvul sc-dNLxif goihLt"
                >
                  <label
                    for="spaceFloored"
                  >
                    ONBOARDING_SPACE_FLOORED
                  </label>
                  <input
                    class="sc-bxivhb aiwDT"
                    id="spaceFloored"
                    type="text"
                    value=""
                  />
                  <div
                    class="sc-ifAKCX hmksNE"
                  />
                </div>
                <div
                  class="sc-htpNat djDvul sc-dNLxif goihLt"
                >
                  <label
                    for="spaceMatterPort"
                  >
                    ONBOARDING_SPACE_MATTERPORT
                  </label>
                  <input
                    class="sc-bxivhb aiwDT"
                    id="spaceMatterPort"
                    type="text"
                    value=""
                  />
                  <div
                    class="sc-ifAKCX hmksNE"
                  />
                </div>
              </div>
            </div>,
          }
        }
      >
        <div
          className="sc-jbKcbu dnaifA"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hEsumM",
                    "isStatic": false,
                    "lastClassName": "bxuiAR",
                    "rules": Array [
                      "
  margin-bottom: 50px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hEsumM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-hEsumM bxuiAR"
              >
                <Styled(styled.h3)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-tilXH",
                          "isStatic": false,
                          "lastClassName": "leRPTB",
                          "rules": Array [
                            "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                            "
  margin-bottom: 0;
",
                          ],
                        },
                        "displayName": "Styled(styled.h3)",
                        "foldedComponentIds": Array [
                          "sc-bdVaJa",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-tilXH",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-bdVaJa sc-tilXH leRPTB"
                    >
                      ONBOARDING_SPACE_DETAILS_FIXED
                    </h3>
                  </StyledComponent>
                </Styled(styled.h3)>
                <Styled(Input)
                  id="spaceName"
                  label="ONBOARDING_SPACE_NAME"
                  onChange={[Function]}
                  placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                  type="text"
                  value=""
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dNLxif",
                          "isStatic": false,
                          "lastClassName": "goihLt",
                          "rules": Array [
                            "
  width: 100%;
  margin-top: 20px;
",
                          ],
                        },
                        "displayName": "Styled(Input)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dNLxif",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    id="spaceName"
                    label="ONBOARDING_SPACE_NAME"
                    onChange={[Function]}
                    placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                    type="text"
                    value=""
                  >
                    <Input
                      className="sc-dNLxif goihLt"
                      id="spaceName"
                      label="ONBOARDING_SPACE_NAME"
                      onChange={[Function]}
                      placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                      type="text"
                      value=""
                    >
                      <styled.div
                        className="sc-dNLxif goihLt"
                      >
                        <StyledComponent
                          className="sc-dNLxif goihLt"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "djDvul",
                                "rules": Array [
                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-htpNat djDvul sc-dNLxif goihLt"
                          >
                            <label
                              htmlFor="spaceName"
                            >
                              ONBOARDING_SPACE_NAME
                            </label>
                            <styled.input
                              id="spaceName"
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                              type="text"
                              value=""
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "aiwDT",
                                      "rules": Array [
                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                        [Function],
                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                        [Function],
                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                        [Function],
                                        ";
    border: 1px solid ",
                                        [Function],
                                        ";
  }
",
                                      ],
                                    },
                                    "displayName": "styled.input",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": "input",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                id="spaceName"
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                type="text"
                                value=""
                              >
                                <input
                                  className="sc-bxivhb aiwDT"
                                  id="spaceName"
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                  type="text"
                                  value=""
                                />
                              </StyledComponent>
                            </styled.input>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-ifAKCX",
                                      "isStatic": false,
                                      "lastClassName": "hmksNE",
                                      "rules": Array [
                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-ifAKCX",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-ifAKCX hmksNE"
                                />
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Input>
                  </StyledComponent>
                </Styled(Input)>
                <RichTextArea
                  id="spaceDescription"
                  label="ONBOARDING_SPACE_DESCRIPTION"
                  onChange={[Function]}
                  placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                  rows={4}
                  value=""
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "GzWuu",
                            "rules": Array [
                              "
  margin: 20px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-EHOje GzWuu"
                      >
                        <label
                          htmlFor="spaceDescription"
                        >
                          ONBOARDING_SPACE_DESCRIPTION
                        </label>
                        <Styled(ComponentToMock)
                          formats={
                            Array [
                              "bold",
                              "italic",
                              "list",
                            ]
                          }
                          height={112}
                          id="spaceDescription"
                          modules={
                            Object {
                              "toolbar": Array [
                                Array [
                                  "bold",
                                  "italic",
                                ],
                                Array [
                                  Object {
                                    "list": "ordered",
                                  },
                                  Object {
                                    "list": "bullet",
                                  },
                                ],
                                Array [
                                  "clean",
                                ],
                              ],
                            }
                          }
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                          value=""
                        >
                          <StyledComponent
                            formats={
                              Array [
                                "bold",
                                "italic",
                                "list",
                              ]
                            }
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "dIozFz",
                                  "rules": Array [
                                    "
  margin-top: 0;
  margin-bottom: 6px;
  resize: none;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                    [Function],
                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  :focus {
    outline: 1px solid ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
  }
  .ql-toolbar.ql-snow {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 3px 3px 0 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-container.ql-snow {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 0 0 3px 3px;
    border-top: 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-editor {
    min-height: ",
                                    [Function],
                                    "px;
    background: white;
  }
",
                                  ],
                                },
                                "displayName": "Styled(ComponentToMock)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            height={112}
                            id="spaceDescription"
                            modules={
                              Object {
                                "toolbar": Array [
                                  Array [
                                    "bold",
                                    "italic",
                                  ],
                                  Array [
                                    Object {
                                      "list": "ordered",
                                    },
                                    Object {
                                      "list": "bullet",
                                    },
                                  ],
                                  Array [
                                    "clean",
                                  ],
                                ],
                              }
                            }
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                            value=""
                          >
                            <ComponentToMock
                              className="sc-bZQynM dIozFz"
                              formats={
                                Array [
                                  "bold",
                                  "italic",
                                  "list",
                                ]
                              }
                              height={112}
                              id="spaceDescription"
                              modules={
                                Object {
                                  "toolbar": Array [
                                    Array [
                                      "bold",
                                      "italic",
                                    ],
                                    Array [
                                      Object {
                                        "list": "ordered",
                                      },
                                      Object {
                                        "list": "bullet",
                                      },
                                    ],
                                    Array [
                                      "clean",
                                    ],
                                  ],
                                }
                              }
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                              value=""
                            >
                              <textarea
                                className="sc-bZQynM dIozFz"
                                formats={
                                  Array [
                                    "bold",
                                    "italic",
                                    "list",
                                  ]
                                }
                                height={112}
                                id="spaceDescription"
                                modules={
                                  Object {
                                    "toolbar": Array [
                                      Array [
                                        "bold",
                                        "italic",
                                      ],
                                      Array [
                                        Object {
                                          "list": "ordered",
                                        },
                                        Object {
                                          "list": "bullet",
                                        },
                                      ],
                                      Array [
                                        "clean",
                                      ],
                                    ],
                                  }
                                }
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                value=""
                              />
                            </ComponentToMock>
                          </StyledComponent>
                        </Styled(ComponentToMock)>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gzVnrw",
                                  "isStatic": false,
                                  "lastClassName": "dbiKoa",
                                  "rules": Array [
                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gzVnrw",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-gzVnrw dbiKoa"
                            />
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </RichTextArea>
                <RichTextArea
                  id="spaceHighlights"
                  label="ONBOARDING_SPACE_HIGHLIGHTS"
                  onChange={[Function]}
                  placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                  rows={4}
                  value=""
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "GzWuu",
                            "rules": Array [
                              "
  margin: 20px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-EHOje GzWuu"
                      >
                        <label
                          htmlFor="spaceHighlights"
                        >
                          ONBOARDING_SPACE_HIGHLIGHTS
                        </label>
                        <Styled(ComponentToMock)
                          formats={
                            Array [
                              "bold",
                              "italic",
                              "list",
                            ]
                          }
                          height={112}
                          id="spaceHighlights"
                          modules={
                            Object {
                              "toolbar": Array [
                                Array [
                                  "bold",
                                  "italic",
                                ],
                                Array [
                                  Object {
                                    "list": "ordered",
                                  },
                                  Object {
                                    "list": "bullet",
                                  },
                                ],
                                Array [
                                  "clean",
                                ],
                              ],
                            }
                          }
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                          value=""
                        >
                          <StyledComponent
                            formats={
                              Array [
                                "bold",
                                "italic",
                                "list",
                              ]
                            }
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "dIozFz",
                                  "rules": Array [
                                    "
  margin-top: 0;
  margin-bottom: 6px;
  resize: none;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                    [Function],
                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  :focus {
    outline: 1px solid ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
  }
  .ql-toolbar.ql-snow {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 3px 3px 0 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-container.ql-snow {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 0 0 3px 3px;
    border-top: 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-editor {
    min-height: ",
                                    [Function],
                                    "px;
    background: white;
  }
",
                                  ],
                                },
                                "displayName": "Styled(ComponentToMock)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            height={112}
                            id="spaceHighlights"
                            modules={
                              Object {
                                "toolbar": Array [
                                  Array [
                                    "bold",
                                    "italic",
                                  ],
                                  Array [
                                    Object {
                                      "list": "ordered",
                                    },
                                    Object {
                                      "list": "bullet",
                                    },
                                  ],
                                  Array [
                                    "clean",
                                  ],
                                ],
                              }
                            }
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                            value=""
                          >
                            <ComponentToMock
                              className="sc-bZQynM dIozFz"
                              formats={
                                Array [
                                  "bold",
                                  "italic",
                                  "list",
                                ]
                              }
                              height={112}
                              id="spaceHighlights"
                              modules={
                                Object {
                                  "toolbar": Array [
                                    Array [
                                      "bold",
                                      "italic",
                                    ],
                                    Array [
                                      Object {
                                        "list": "ordered",
                                      },
                                      Object {
                                        "list": "bullet",
                                      },
                                    ],
                                    Array [
                                      "clean",
                                    ],
                                  ],
                                }
                              }
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                              value=""
                            >
                              <textarea
                                className="sc-bZQynM dIozFz"
                                formats={
                                  Array [
                                    "bold",
                                    "italic",
                                    "list",
                                  ]
                                }
                                height={112}
                                id="spaceHighlights"
                                modules={
                                  Object {
                                    "toolbar": Array [
                                      Array [
                                        "bold",
                                        "italic",
                                      ],
                                      Array [
                                        Object {
                                          "list": "ordered",
                                        },
                                        Object {
                                          "list": "bullet",
                                        },
                                      ],
                                      Array [
                                        "clean",
                                      ],
                                    ],
                                  }
                                }
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                value=""
                              />
                            </ComponentToMock>
                          </StyledComponent>
                        </Styled(ComponentToMock)>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gzVnrw",
                                  "isStatic": false,
                                  "lastClassName": "dbiKoa",
                                  "rules": Array [
                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gzVnrw",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-gzVnrw dbiKoa"
                            />
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </RichTextArea>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jqCOkK",
                          "isStatic": false,
                          "lastClassName": "gCHWMq",
                          "rules": Array [
                            "
  width: 100%;
  display: flex;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jqCOkK",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-jqCOkK gCHWMq"
                    >
                      <Styled(Input)
                        id="spaceSize"
                        label="ONBOARDING_SPACE_SIZE"
                        onChange={[Function]}
                        placeholder="ONBOARDING_PLACEHOLDER_EXCLUSIVE_SIZE"
                        type="number"
                        value=""
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bbmXgH",
                                "isStatic": false,
                                "lastClassName": "lkIqRn",
                                "rules": Array [
                                  "
  flex-grow: 1;
  margin-top: 20px;
  width: 35%;
  padding-right: 10px;
  label {
    white-space: nowrap;
  }
",
                                ],
                              },
                              "displayName": "Styled(Input)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bbmXgH",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="spaceSize"
                          label="ONBOARDING_SPACE_SIZE"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_EXCLUSIVE_SIZE"
                          type="number"
                          value=""
                        >
                          <Input
                            className="sc-bbmXgH lkIqRn"
                            id="spaceSize"
                            label="ONBOARDING_SPACE_SIZE"
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_EXCLUSIVE_SIZE"
                            type="number"
                            value=""
                          >
                            <styled.div
                              className="sc-bbmXgH lkIqRn"
                            >
                              <StyledComponent
                                className="sc-bbmXgH lkIqRn"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": false,
                                      "lastClassName": "djDvul",
                                      "rules": Array [
                                        "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-htpNat djDvul sc-bbmXgH lkIqRn"
                                >
                                  <label
                                    htmlFor="spaceSize"
                                  >
                                    ONBOARDING_SPACE_SIZE
                                  </label>
                                  <styled.input
                                    id="spaceSize"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_EXCLUSIVE_SIZE"
                                    type="number"
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bxivhb",
                                            "isStatic": false,
                                            "lastClassName": "aiwDT",
                                            "rules": Array [
                                              "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                              [Function],
                                              ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                              [Function],
                                              ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                              [Function],
                                              ";
    border: 1px solid ",
                                              [Function],
                                              ";
  }
",
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bxivhb",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="spaceSize"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_EXCLUSIVE_SIZE"
                                      type="number"
                                      value=""
                                    >
                                      <input
                                        className="sc-bxivhb aiwDT"
                                        id="spaceSize"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_EXCLUSIVE_SIZE"
                                        type="number"
                                        value=""
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "hmksNE",
                                            "rules": Array [
                                              "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-ifAKCX hmksNE"
                                      />
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </Input>
                        </StyledComponent>
                      </Styled(Input)>
                      <Styled(Input)
                        id="spaceSizeCommon"
                        label="ONBOARDING_SPACE_SIZE_COMMON"
                        onChange={[Function]}
                        placeholder="ONBOARDING_PLACEHOLDER_COMMON_AREAS"
                        type="number"
                        value=""
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bbmXgH",
                                "isStatic": false,
                                "lastClassName": "lkIqRn",
                                "rules": Array [
                                  "
  flex-grow: 1;
  margin-top: 20px;
  width: 35%;
  padding-right: 10px;
  label {
    white-space: nowrap;
  }
",
                                ],
                              },
                              "displayName": "Styled(Input)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bbmXgH",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="spaceSizeCommon"
                          label="ONBOARDING_SPACE_SIZE_COMMON"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_COMMON_AREAS"
                          type="number"
                          value=""
                        >
                          <Input
                            className="sc-bbmXgH lkIqRn"
                            id="spaceSizeCommon"
                            label="ONBOARDING_SPACE_SIZE_COMMON"
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_COMMON_AREAS"
                            type="number"
                            value=""
                          >
                            <styled.div
                              className="sc-bbmXgH lkIqRn"
                            >
                              <StyledComponent
                                className="sc-bbmXgH lkIqRn"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": false,
                                      "lastClassName": "djDvul",
                                      "rules": Array [
                                        "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-htpNat djDvul sc-bbmXgH lkIqRn"
                                >
                                  <label
                                    htmlFor="spaceSizeCommon"
                                  >
                                    ONBOARDING_SPACE_SIZE_COMMON
                                  </label>
                                  <styled.input
                                    id="spaceSizeCommon"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_COMMON_AREAS"
                                    type="number"
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bxivhb",
                                            "isStatic": false,
                                            "lastClassName": "aiwDT",
                                            "rules": Array [
                                              "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                              [Function],
                                              ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                              [Function],
                                              ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                              [Function],
                                              ";
    border: 1px solid ",
                                              [Function],
                                              ";
  }
",
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bxivhb",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="spaceSizeCommon"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_COMMON_AREAS"
                                      type="number"
                                      value=""
                                    >
                                      <input
                                        className="sc-bxivhb aiwDT"
                                        id="spaceSizeCommon"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_COMMON_AREAS"
                                        type="number"
                                        value=""
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "hmksNE",
                                            "rules": Array [
                                              "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-ifAKCX hmksNE"
                                      />
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </Input>
                        </StyledComponent>
                      </Styled(Input)>
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gGBfsJ",
                                "isStatic": false,
                                "lastClassName": "dthCHs",
                                "rules": Array [
                                  "
  margin-top: 20px;
  width: 15%;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gGBfsJ",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-gGBfsJ dthCHs"
                          >
                            <styled.label>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-jnlKLf",
                                      "isStatic": false,
                                      "lastClassName": "jKMWma",
                                      "rules": Array [],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-jnlKLf",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <label
                                  className="sc-jnlKLf jKMWma"
                                >
                                  ONBOARDING_SPACE_SIZE_TOTAL
                                </label>
                              </StyledComponent>
                            </styled.label>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-fYxtnH",
                                      "isStatic": false,
                                      "lastClassName": "iSemmH",
                                      "rules": Array [
                                        "
  text-align: left;
  padding-top: 10px;
  font-weight: 500;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-fYxtnH",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-fYxtnH iSemmH"
                                >
                                  0
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </div>
                  </StyledComponent>
                </styled.div>
                <Styled(Input)
                  id="spaceFloor"
                  label="ONBOARDING_SPACE_FLOOR"
                  onChange={[Function]}
                  placeholder="ONBOARDING_PLACEHOLDER_FLOOR"
                  type="number"
                  value=""
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-uJMKN",
                          "isStatic": false,
                          "lastClassName": "iYjnTi",
                          "rules": Array [
                            "
  width: 25%;
  margin-top: 20px;
  label {
    white-space: nowrap;
  }
",
                          ],
                        },
                        "displayName": "Styled(Input)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-uJMKN",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    id="spaceFloor"
                    label="ONBOARDING_SPACE_FLOOR"
                    onChange={[Function]}
                    placeholder="ONBOARDING_PLACEHOLDER_FLOOR"
                    type="number"
                    value=""
                  >
                    <Input
                      className="sc-uJMKN iYjnTi"
                      id="spaceFloor"
                      label="ONBOARDING_SPACE_FLOOR"
                      onChange={[Function]}
                      placeholder="ONBOARDING_PLACEHOLDER_FLOOR"
                      type="number"
                      value=""
                    >
                      <styled.div
                        className="sc-uJMKN iYjnTi"
                      >
                        <StyledComponent
                          className="sc-uJMKN iYjnTi"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "djDvul",
                                "rules": Array [
                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-htpNat djDvul sc-uJMKN iYjnTi"
                          >
                            <label
                              htmlFor="spaceFloor"
                            >
                              ONBOARDING_SPACE_FLOOR
                            </label>
                            <styled.input
                              id="spaceFloor"
                              onChange={[Function]}
                              onKeyDown={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_FLOOR"
                              type="number"
                              value=""
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "aiwDT",
                                      "rules": Array [
                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                        [Function],
                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                        [Function],
                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                        [Function],
                                        ";
    border: 1px solid ",
                                        [Function],
                                        ";
  }
",
                                      ],
                                    },
                                    "displayName": "styled.input",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": "input",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                id="spaceFloor"
                                onChange={[Function]}
                                onKeyDown={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_FLOOR"
                                type="number"
                                value=""
                              >
                                <input
                                  className="sc-bxivhb aiwDT"
                                  id="spaceFloor"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_FLOOR"
                                  type="number"
                                  value=""
                                />
                              </StyledComponent>
                            </styled.input>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-ifAKCX",
                                      "isStatic": false,
                                      "lastClassName": "hmksNE",
                                      "rules": Array [
                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-ifAKCX",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-ifAKCX hmksNE"
                                />
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Input>
                  </StyledComponent>
                </Styled(Input)>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hEsumM",
                    "isStatic": false,
                    "lastClassName": "bxuiAR",
                    "rules": Array [
                      "
  margin-bottom: 50px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hEsumM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-hEsumM bxuiAR"
              >
                <Styled(styled.h4)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-feJyhm",
                          "isStatic": false,
                          "lastClassName": "hYRSSY",
                          "rules": Array [
                            "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                          ],
                        },
                        "displayName": "Styled(styled.h4)",
                        "foldedComponentIds": Array [
                          "sc-bwzfXH",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-feJyhm",
                        "target": "h4",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h4
                      className="sc-bwzfXH sc-feJyhm hYRSSY"
                    >
                      ONBOARDING_SPACE_USE_TITLE
                    </h4>
                  </StyledComponent>
                </Styled(styled.h4)>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cmTdod",
                          "isStatic": false,
                          "lastClassName": "bKMHWB",
                          "rules": Array [
                            "
  margin-left: 15px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-cmTdod",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-cmTdod bKMHWB"
                    >
                      <ForwardRef(RadioGroup)
                        name="use"
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(ForwardRef(FormGroup))
                          role="radiogroup"
                        >
                          <ForwardRef(FormGroup)
                            classes={
                              Object {
                                "root": "MuiFormGroup-root",
                                "row": "MuiFormGroup-row",
                              }
                            }
                            role="radiogroup"
                          >
                            <div
                              className="MuiFormGroup-root"
                              role="radiogroup"
                            >
                              <Styled(WithStyles(ForwardRef(FormControlLabel)))
                                control={
                                  <ForwardRef(WithStyles)
                                    disableRipple={true}
                                  />
                                }
                                label="ONBOARDING_SPACE_USE_OFFICE"
                                value="OFFICE"
                              >
                                <StyledComponent
                                  control={
                                    <ForwardRef(WithStyles)
                                      disableRipple={true}
                                    />
                                  }
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Naked": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "propTypes": Object {
                                          "checked": [Function],
                                          "className": [Function],
                                          "classes": [Function],
                                          "control": [Function],
                                          "disabled": [Function],
                                          "inputRef": [Function],
                                          "label": [Function],
                                          "labelPlacement": [Function],
                                          "name": [Function],
                                          "onChange": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      },
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-iELTvK",
                                        "isStatic": false,
                                        "lastClassName": "CZnOF",
                                        "rules": Array [
                                          "
  .MuiFormControlLabel-label {
    font-size: 16px;
    font-weight: 400;
    line-height: 21px;
  }
  .MuiIconButton-label,
  .MuiIconButton-root {
    color: #6cb9d5;
    padding: 3px;
  }
  .MuiButtonBase-root:hover,
  .Mui-checked.MuiButtonBase-root:hover {
    background-color: rgba(108, 185, 213, 0.2);
  }
",
                                        ],
                                      },
                                      "displayName": "Styled(WithStyles(ForwardRef(FormControlLabel)))",
                                      "foldedComponentIds": Array [],
                                      "options": Object {
                                        "defaultTheme": Object {
                                          "breakpoints": Object {
                                            "between": [Function],
                                            "down": [Function],
                                            "keys": Array [
                                              "xs",
                                              "sm",
                                              "md",
                                              "lg",
                                              "xl",
                                            ],
                                            "only": [Function],
                                            "up": [Function],
                                            "values": Object {
                                              "lg": 1280,
                                              "md": 960,
                                              "sm": 600,
                                              "xl": 1920,
                                              "xs": 0,
                                            },
                                            "width": [Function],
                                          },
                                          "direction": "ltr",
                                          "mixins": Object {
                                            "gutters": [Function],
                                            "toolbar": Object {
                                              "@media (min-width:0px) and (orientation: landscape)": Object {
                                                "minHeight": 48,
                                              },
                                              "@media (min-width:600px)": Object {
                                                "minHeight": 64,
                                              },
                                              "minHeight": 56,
                                            },
                                          },
                                          "overrides": Object {},
                                          "palette": Object {
                                            "action": Object {
                                              "active": "rgba(0, 0, 0, 0.54)",
                                              "disabled": "rgba(0, 0, 0, 0.26)",
                                              "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                              "hover": "rgba(0, 0, 0, 0.08)",
                                              "hoverOpacity": 0.08,
                                              "selected": "rgba(0, 0, 0, 0.14)",
                                            },
                                            "augmentColor": [Function],
                                            "background": Object {
                                              "default": "#fafafa",
                                              "paper": "#fff",
                                            },
                                            "common": Object {
                                              "black": "#000",
                                              "white": "#fff",
                                            },
                                            "contrastThreshold": 3,
                                            "divider": "rgba(0, 0, 0, 0.12)",
                                            "error": Object {
                                              "contrastText": "#fff",
                                              "dark": "#d32f2f",
                                              "light": "#e57373",
                                              "main": "#f44336",
                                            },
                                            "getContrastText": [Function],
                                            "grey": Object {
                                              "100": "#f5f5f5",
                                              "200": "#eeeeee",
                                              "300": "#e0e0e0",
                                              "400": "#bdbdbd",
                                              "50": "#fafafa",
                                              "500": "#9e9e9e",
                                              "600": "#757575",
                                              "700": "#616161",
                                              "800": "#424242",
                                              "900": "#212121",
                                              "A100": "#d5d5d5",
                                              "A200": "#aaaaaa",
                                              "A400": "#303030",
                                              "A700": "#616161",
                                            },
                                            "primary": Object {
                                              "contrastText": "#fff",
                                              "dark": "#303f9f",
                                              "light": "#7986cb",
                                              "main": "#3f51b5",
                                            },
                                            "secondary": Object {
                                              "contrastText": "#fff",
                                              "dark": "#c51162",
                                              "light": "#ff4081",
                                              "main": "#f50057",
                                            },
                                            "text": Object {
                                              "disabled": "rgba(0, 0, 0, 0.38)",
                                              "hint": "rgba(0, 0, 0, 0.38)",
                                              "primary": "rgba(0, 0, 0, 0.87)",
                                              "secondary": "rgba(0, 0, 0, 0.54)",
                                            },
                                            "tonalOffset": 0.2,
                                            "type": "light",
                                          },
                                          "props": Object {},
                                          "shadows": Array [
                                            "none",
                                            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                          ],
                                          "shape": Object {
                                            "borderRadius": 4,
                                          },
                                          "spacing": [Function],
                                          "transitions": Object {
                                            "create": [Function],
                                            "duration": Object {
                                              "complex": 375,
                                              "enteringScreen": 225,
                                              "leavingScreen": 195,
                                              "short": 250,
                                              "shorter": 200,
                                              "shortest": 150,
                                              "standard": 300,
                                            },
                                            "easing": Object {
                                              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                            },
                                            "getAutoHeightDuration": [Function],
                                          },
                                          "typography": Object {
                                            "body1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00938em",
                                              "lineHeight": 1.5,
                                            },
                                            "body2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.01071em",
                                              "lineHeight": 1.43,
                                            },
                                            "button": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.02857em",
                                              "lineHeight": 1.75,
                                              "textTransform": "uppercase",
                                            },
                                            "caption": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.75rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.03333em",
                                              "lineHeight": 1.66,
                                            },
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": 14,
                                            "fontWeightBold": 700,
                                            "fontWeightLight": 300,
                                            "fontWeightMedium": 500,
                                            "fontWeightRegular": 400,
                                            "h1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "6rem",
                                              "fontWeight": 300,
                                              "letterSpacing": "-0.01562em",
                                              "lineHeight": 1.167,
                                            },
                                            "h2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "3.75rem",
                                              "fontWeight": 300,
                                              "letterSpacing": "-0.00833em",
                                              "lineHeight": 1.2,
                                            },
                                            "h3": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "3rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0em",
                                              "lineHeight": 1.167,
                                            },
                                            "h4": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "2.125rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00735em",
                                              "lineHeight": 1.235,
                                            },
                                            "h5": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1.5rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0em",
                                              "lineHeight": 1.334,
                                            },
                                            "h6": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1.25rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.0075em",
                                              "lineHeight": 1.6,
                                            },
                                            "htmlFontSize": 16,
                                            "overline": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.75rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.08333em",
                                              "lineHeight": 2.66,
                                              "textTransform": "uppercase",
                                            },
                                            "pxToRem": [Function],
                                            "round": [Function],
                                            "subtitle1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00938em",
                                              "lineHeight": 1.75,
                                            },
                                            "subtitle2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.00714em",
                                              "lineHeight": 1.57,
                                            },
                                          },
                                          "zIndex": Object {
                                            "appBar": 1100,
                                            "drawer": 1200,
                                            "mobileStepper": 1000,
                                            "modal": 1300,
                                            "snackbar": 1400,
                                            "speedDial": 1050,
                                            "tooltip": 1500,
                                          },
                                        },
                                        "name": "MuiFormControlLabel",
                                      },
                                      "propTypes": Object {
                                        "classes": [Function],
                                        "innerRef": [Function],
                                      },
                                      "render": [Function],
                                      "styledComponentId": "sc-iELTvK",
                                      "target": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "Naked": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "propTypes": Object {
                                            "checked": [Function],
                                            "className": [Function],
                                            "classes": [Function],
                                            "control": [Function],
                                            "disabled": [Function],
                                            "inputRef": [Function],
                                            "label": [Function],
                                            "labelPlacement": [Function],
                                            "name": [Function],
                                            "onChange": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        },
                                        "defaultProps": undefined,
                                        "displayName": "WithStyles(ForwardRef(FormControlLabel))",
                                        "options": Object {
                                          "defaultTheme": Object {
                                            "breakpoints": Object {
                                              "between": [Function],
                                              "down": [Function],
                                              "keys": Array [
                                                "xs",
                                                "sm",
                                                "md",
                                                "lg",
                                                "xl",
                                              ],
                                              "only": [Function],
                                              "up": [Function],
                                              "values": Object {
                                                "lg": 1280,
                                                "md": 960,
                                                "sm": 600,
                                                "xl": 1920,
                                                "xs": 0,
                                              },
                                              "width": [Function],
                                            },
                                            "direction": "ltr",
                                            "mixins": Object {
                                              "gutters": [Function],
                                              "toolbar": Object {
                                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                                  "minHeight": 48,
                                                },
                                                "@media (min-width:600px)": Object {
                                                  "minHeight": 64,
                                                },
                                                "minHeight": 56,
                                              },
                                            },
                                            "overrides": Object {},
                                            "palette": Object {
                                              "action": Object {
                                                "active": "rgba(0, 0, 0, 0.54)",
                                                "disabled": "rgba(0, 0, 0, 0.26)",
                                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                "hover": "rgba(0, 0, 0, 0.08)",
                                                "hoverOpacity": 0.08,
                                                "selected": "rgba(0, 0, 0, 0.14)",
                                              },
                                              "augmentColor": [Function],
                                              "background": Object {
                                                "default": "#fafafa",
                                                "paper": "#fff",
                                              },
                                              "common": Object {
                                                "black": "#000",
                                                "white": "#fff",
                                              },
                                              "contrastThreshold": 3,
                                              "divider": "rgba(0, 0, 0, 0.12)",
                                              "error": Object {
                                                "contrastText": "#fff",
                                                "dark": "#d32f2f",
                                                "light": "#e57373",
                                                "main": "#f44336",
                                              },
                                              "getContrastText": [Function],
                                              "grey": Object {
                                                "100": "#f5f5f5",
                                                "200": "#eeeeee",
                                                "300": "#e0e0e0",
                                                "400": "#bdbdbd",
                                                "50": "#fafafa",
                                                "500": "#9e9e9e",
                                                "600": "#757575",
                                                "700": "#616161",
                                                "800": "#424242",
                                                "900": "#212121",
                                                "A100": "#d5d5d5",
                                                "A200": "#aaaaaa",
                                                "A400": "#303030",
                                                "A700": "#616161",
                                              },
                                              "primary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#303f9f",
                                                "light": "#7986cb",
                                                "main": "#3f51b5",
                                              },
                                              "secondary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#c51162",
                                                "light": "#ff4081",
                                                "main": "#f50057",
                                              },
                                              "text": Object {
                                                "disabled": "rgba(0, 0, 0, 0.38)",
                                                "hint": "rgba(0, 0, 0, 0.38)",
                                                "primary": "rgba(0, 0, 0, 0.87)",
                                                "secondary": "rgba(0, 0, 0, 0.54)",
                                              },
                                              "tonalOffset": 0.2,
                                              "type": "light",
                                            },
                                            "props": Object {},
                                            "shadows": Array [
                                              "none",
                                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                            ],
                                            "shape": Object {
                                              "borderRadius": 4,
                                            },
                                            "spacing": [Function],
                                            "transitions": Object {
                                              "create": [Function],
                                              "duration": Object {
                                                "complex": 375,
                                                "enteringScreen": 225,
                                                "leavingScreen": 195,
                                                "short": 250,
                                                "shorter": 200,
                                                "shortest": 150,
                                                "standard": 300,
                                              },
                                              "easing": Object {
                                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                              },
                                              "getAutoHeightDuration": [Function],
                                            },
                                            "typography": Object {
                                              "body1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.5,
                                              },
                                              "body2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.01071em",
                                                "lineHeight": 1.43,
                                              },
                                              "button": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.02857em",
                                                "lineHeight": 1.75,
                                                "textTransform": "uppercase",
                                              },
                                              "caption": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.03333em",
                                                "lineHeight": 1.66,
                                              },
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": 14,
                                              "fontWeightBold": 700,
                                              "fontWeightLight": 300,
                                              "fontWeightMedium": 500,
                                              "fontWeightRegular": 400,
                                              "h1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "6rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-0.01562em",
                                                "lineHeight": 1.167,
                                              },
                                              "h2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3.75rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-0.00833em",
                                                "lineHeight": 1.2,
                                              },
                                              "h3": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.167,
                                              },
                                              "h4": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.125rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00735em",
                                                "lineHeight": 1.235,
                                              },
                                              "h5": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.5rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.334,
                                              },
                                              "h6": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.25rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.0075em",
                                                "lineHeight": 1.6,
                                              },
                                              "htmlFontSize": 16,
                                              "overline": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.08333em",
                                                "lineHeight": 2.66,
                                                "textTransform": "uppercase",
                                              },
                                              "pxToRem": [Function],
                                              "round": [Function],
                                              "subtitle1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.75,
                                              },
                                              "subtitle2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.00714em",
                                                "lineHeight": 1.57,
                                              },
                                            },
                                            "zIndex": Object {
                                              "appBar": 1100,
                                              "drawer": 1200,
                                              "mobileStepper": 1000,
                                              "modal": 1300,
                                              "snackbar": 1400,
                                              "speedDial": 1050,
                                              "tooltip": 1500,
                                            },
                                          },
                                          "name": "MuiFormControlLabel",
                                        },
                                        "propTypes": Object {
                                          "classes": [Function],
                                          "innerRef": [Function],
                                        },
                                        "render": [Function],
                                        "useStyles": [Function],
                                      },
                                      "toString": [Function],
                                      "useStyles": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  label="ONBOARDING_SPACE_USE_OFFICE"
                                  value="OFFICE"
                                >
                                  <WithStyles(ForwardRef(FormControlLabel))
                                    className="sc-iELTvK CZnOF"
                                    control={
                                      <ForwardRef(WithStyles)
                                        disableRipple={true}
                                      />
                                    }
                                    label="ONBOARDING_SPACE_USE_OFFICE"
                                    value="OFFICE"
                                  >
                                    <ForwardRef(FormControlLabel)
                                      className="sc-iELTvK CZnOF"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "label": "MuiFormControlLabel-label",
                                          "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                                          "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                                          "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                                          "root": "MuiFormControlLabel-root",
                                        }
                                      }
                                      control={
                                        <ForwardRef(WithStyles)
                                          disableRipple={true}
                                        />
                                      }
                                      label="ONBOARDING_SPACE_USE_OFFICE"
                                      value="OFFICE"
                                    >
                                      <label
                                        className="MuiFormControlLabel-root sc-iELTvK CZnOF"
                                      >
                                        <WithStyles(ForwardRef(Radio))
                                          disableRipple={true}
                                          value="OFFICE"
                                        >
                                          <ForwardRef(Radio)
                                            classes={
                                              Object {
                                                "checked": "Mui-checked",
                                                "colorPrimary": "MuiRadio-colorPrimary",
                                                "colorSecondary": "MuiRadio-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "root": "MuiRadio-root",
                                              }
                                            }
                                            disableRipple={true}
                                            value="OFFICE"
                                          >
                                            <WithStyles(ForwardRef(SwitchBase))
                                              checked={false}
                                              checkedIcon={
                                                <ForwardRef(WithStyles)
                                                  checked={true}
                                                  fontSize="default"
                                                />
                                              }
                                              classes={
                                                Object {
                                                  "checked": "Mui-checked",
                                                  "disabled": "Mui-disabled",
                                                  "root": "MuiRadio-root MuiRadio-colorSecondary",
                                                }
                                              }
                                              color="secondary"
                                              disableRipple={true}
                                              disabled={false}
                                              icon={
                                                <ForwardRef(WithStyles)
                                                  fontSize="default"
                                                />
                                              }
                                              name="use"
                                              onChange={[Function]}
                                              type="radio"
                                              value="OFFICE"
                                            >
                                              <ForwardRef(SwitchBase)
                                                checked={false}
                                                checkedIcon={
                                                  <ForwardRef(WithStyles)
                                                    checked={true}
                                                    fontSize="default"
                                                  />
                                                }
                                                classes={
                                                  Object {
                                                    "checked": "PrivateSwitchBase-checked-88 Mui-checked",
                                                    "disabled": "PrivateSwitchBase-disabled-89 Mui-disabled",
                                                    "input": "PrivateSwitchBase-input-90",
                                                    "root": "PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary",
                                                  }
                                                }
                                                color="secondary"
                                                disableRipple={true}
                                                disabled={false}
                                                icon={
                                                  <ForwardRef(WithStyles)
                                                    fontSize="default"
                                                  />
                                                }
                                                name="use"
                                                onChange={[Function]}
                                                type="radio"
                                                value="OFFICE"
                                              >
                                                <WithStyles(ForwardRef(IconButton))
                                                  className="PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary"
                                                  color="secondary"
                                                  component="span"
                                                  disableRipple={true}
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <ForwardRef(IconButton)
                                                    className="PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary"
                                                    classes={
                                                      Object {
                                                        "colorInherit": "MuiIconButton-colorInherit",
                                                        "colorPrimary": "MuiIconButton-colorPrimary",
                                                        "colorSecondary": "MuiIconButton-colorSecondary",
                                                        "disabled": "Mui-disabled",
                                                        "edgeEnd": "MuiIconButton-edgeEnd",
                                                        "edgeStart": "MuiIconButton-edgeStart",
                                                        "label": "MuiIconButton-label",
                                                        "root": "MuiIconButton-root",
                                                        "sizeSmall": "MuiIconButton-sizeSmall",
                                                      }
                                                    }
                                                    color="secondary"
                                                    component="span"
                                                    disableRipple={true}
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    tabIndex={null}
                                                  >
                                                    <WithStyles(ForwardRef(ButtonBase))
                                                      centerRipple={true}
                                                      className="MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                      component="span"
                                                      disableRipple={true}
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(ButtonBase)
                                                        centerRipple={true}
                                                        className="MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "disabled": "Mui-disabled",
                                                            "focusVisible": "Mui-focusVisible",
                                                            "root": "MuiButtonBase-root",
                                                          }
                                                        }
                                                        component="span"
                                                        disableRipple={true}
                                                        disabled={false}
                                                        focusRipple={true}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <span
                                                          aria-disabled={false}
                                                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                          onBlur={[Function]}
                                                          onDragLeave={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <span
                                                            className="MuiIconButton-label"
                                                          >
                                                            <input
                                                              checked={false}
                                                              className="PrivateSwitchBase-input-90"
                                                              disabled={false}
                                                              name="use"
                                                              onChange={[Function]}
                                                              type="radio"
                                                              value="OFFICE"
                                                            />
                                                            <WithStyles(RadioButtonIcon)
                                                              fontSize="default"
                                                            >
                                                              <RadioButtonIcon
                                                                classes={
                                                                  Object {
                                                                    "checked": "PrivateRadioButtonIcon-checked-93",
                                                                    "layer": "PrivateRadioButtonIcon-layer-92",
                                                                    "root": "PrivateRadioButtonIcon-root-91",
                                                                  }
                                                                }
                                                                fontSize="default"
                                                              >
                                                                <div
                                                                  className="PrivateRadioButtonIcon-root-91"
                                                                >
                                                                  <ForwardRef
                                                                    fontSize="default"
                                                                  >
                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                      fontSize="default"
                                                                    >
                                                                      <ForwardRef(SvgIcon)
                                                                        classes={
                                                                          Object {
                                                                            "colorAction": "MuiSvgIcon-colorAction",
                                                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                            "colorError": "MuiSvgIcon-colorError",
                                                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                            "root": "MuiSvgIcon-root",
                                                                          }
                                                                        }
                                                                        fontSize="default"
                                                                      >
                                                                        <svg
                                                                          aria-hidden="true"
                                                                          className="MuiSvgIcon-root"
                                                                          focusable="false"
                                                                          role="presentation"
                                                                          viewBox="0 0 24 24"
                                                                        >
                                                                          <path
                                                                            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                                                                          />
                                                                        </svg>
                                                                      </ForwardRef(SvgIcon)>
                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                  </ForwardRef>
                                                                  <ForwardRef
                                                                    className="PrivateRadioButtonIcon-layer-92"
                                                                    fontSize="default"
                                                                  >
                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                      className="PrivateRadioButtonIcon-layer-92"
                                                                      fontSize="default"
                                                                    >
                                                                      <ForwardRef(SvgIcon)
                                                                        className="PrivateRadioButtonIcon-layer-92"
                                                                        classes={
                                                                          Object {
                                                                            "colorAction": "MuiSvgIcon-colorAction",
                                                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                            "colorError": "MuiSvgIcon-colorError",
                                                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                            "root": "MuiSvgIcon-root",
                                                                          }
                                                                        }
                                                                        fontSize="default"
                                                                      >
                                                                        <svg
                                                                          aria-hidden="true"
                                                                          className="MuiSvgIcon-root PrivateRadioButtonIcon-layer-92"
                                                                          focusable="false"
                                                                          role="presentation"
                                                                          viewBox="0 0 24 24"
                                                                        >
                                                                          <path
                                                                            d="M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
                                                                          />
                                                                        </svg>
                                                                      </ForwardRef(SvgIcon)>
                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                  </ForwardRef>
                                                                </div>
                                                              </RadioButtonIcon>
                                                            </WithStyles(RadioButtonIcon)>
                                                          </span>
                                                        </span>
                                                      </ForwardRef(ButtonBase)>
                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                  </ForwardRef(IconButton)>
                                                </WithStyles(ForwardRef(IconButton))>
                                              </ForwardRef(SwitchBase)>
                                            </WithStyles(ForwardRef(SwitchBase))>
                                          </ForwardRef(Radio)>
                                        </WithStyles(ForwardRef(Radio))>
                                        <WithStyles(ForwardRef(Typography))
                                          className="MuiFormControlLabel-label"
                                          component="span"
                                        >
                                          <ForwardRef(Typography)
                                            className="MuiFormControlLabel-label"
                                            classes={
                                              Object {
                                                "alignCenter": "MuiTypography-alignCenter",
                                                "alignJustify": "MuiTypography-alignJustify",
                                                "alignLeft": "MuiTypography-alignLeft",
                                                "alignRight": "MuiTypography-alignRight",
                                                "body1": "MuiTypography-body1",
                                                "body2": "MuiTypography-body2",
                                                "button": "MuiTypography-button",
                                                "caption": "MuiTypography-caption",
                                                "colorError": "MuiTypography-colorError",
                                                "colorInherit": "MuiTypography-colorInherit",
                                                "colorPrimary": "MuiTypography-colorPrimary",
                                                "colorSecondary": "MuiTypography-colorSecondary",
                                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                "displayBlock": "MuiTypography-displayBlock",
                                                "displayInline": "MuiTypography-displayInline",
                                                "gutterBottom": "MuiTypography-gutterBottom",
                                                "h1": "MuiTypography-h1",
                                                "h2": "MuiTypography-h2",
                                                "h3": "MuiTypography-h3",
                                                "h4": "MuiTypography-h4",
                                                "h5": "MuiTypography-h5",
                                                "h6": "MuiTypography-h6",
                                                "noWrap": "MuiTypography-noWrap",
                                                "overline": "MuiTypography-overline",
                                                "paragraph": "MuiTypography-paragraph",
                                                "root": "MuiTypography-root",
                                                "srOnly": "MuiTypography-srOnly",
                                                "subtitle1": "MuiTypography-subtitle1",
                                                "subtitle2": "MuiTypography-subtitle2",
                                              }
                                            }
                                            component="span"
                                          >
                                            <span
                                              className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                                            >
                                              ONBOARDING_SPACE_USE_OFFICE
                                            </span>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </label>
                                    </ForwardRef(FormControlLabel)>
                                  </WithStyles(ForwardRef(FormControlLabel))>
                                </StyledComponent>
                              </Styled(WithStyles(ForwardRef(FormControlLabel)))>
                              <Styled(WithStyles(ForwardRef(FormControlLabel)))
                                control={
                                  <ForwardRef(WithStyles)
                                    disableRipple={true}
                                  />
                                }
                                label="ONBOARDING_SPACE_USE_RETAIL"
                                value="RETAIL"
                              >
                                <StyledComponent
                                  control={
                                    <ForwardRef(WithStyles)
                                      disableRipple={true}
                                    />
                                  }
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Naked": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "propTypes": Object {
                                          "checked": [Function],
                                          "className": [Function],
                                          "classes": [Function],
                                          "control": [Function],
                                          "disabled": [Function],
                                          "inputRef": [Function],
                                          "label": [Function],
                                          "labelPlacement": [Function],
                                          "name": [Function],
                                          "onChange": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      },
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-iELTvK",
                                        "isStatic": false,
                                        "lastClassName": "CZnOF",
                                        "rules": Array [
                                          "
  .MuiFormControlLabel-label {
    font-size: 16px;
    font-weight: 400;
    line-height: 21px;
  }
  .MuiIconButton-label,
  .MuiIconButton-root {
    color: #6cb9d5;
    padding: 3px;
  }
  .MuiButtonBase-root:hover,
  .Mui-checked.MuiButtonBase-root:hover {
    background-color: rgba(108, 185, 213, 0.2);
  }
",
                                        ],
                                      },
                                      "displayName": "Styled(WithStyles(ForwardRef(FormControlLabel)))",
                                      "foldedComponentIds": Array [],
                                      "options": Object {
                                        "defaultTheme": Object {
                                          "breakpoints": Object {
                                            "between": [Function],
                                            "down": [Function],
                                            "keys": Array [
                                              "xs",
                                              "sm",
                                              "md",
                                              "lg",
                                              "xl",
                                            ],
                                            "only": [Function],
                                            "up": [Function],
                                            "values": Object {
                                              "lg": 1280,
                                              "md": 960,
                                              "sm": 600,
                                              "xl": 1920,
                                              "xs": 0,
                                            },
                                            "width": [Function],
                                          },
                                          "direction": "ltr",
                                          "mixins": Object {
                                            "gutters": [Function],
                                            "toolbar": Object {
                                              "@media (min-width:0px) and (orientation: landscape)": Object {
                                                "minHeight": 48,
                                              },
                                              "@media (min-width:600px)": Object {
                                                "minHeight": 64,
                                              },
                                              "minHeight": 56,
                                            },
                                          },
                                          "overrides": Object {},
                                          "palette": Object {
                                            "action": Object {
                                              "active": "rgba(0, 0, 0, 0.54)",
                                              "disabled": "rgba(0, 0, 0, 0.26)",
                                              "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                              "hover": "rgba(0, 0, 0, 0.08)",
                                              "hoverOpacity": 0.08,
                                              "selected": "rgba(0, 0, 0, 0.14)",
                                            },
                                            "augmentColor": [Function],
                                            "background": Object {
                                              "default": "#fafafa",
                                              "paper": "#fff",
                                            },
                                            "common": Object {
                                              "black": "#000",
                                              "white": "#fff",
                                            },
                                            "contrastThreshold": 3,
                                            "divider": "rgba(0, 0, 0, 0.12)",
                                            "error": Object {
                                              "contrastText": "#fff",
                                              "dark": "#d32f2f",
                                              "light": "#e57373",
                                              "main": "#f44336",
                                            },
                                            "getContrastText": [Function],
                                            "grey": Object {
                                              "100": "#f5f5f5",
                                              "200": "#eeeeee",
                                              "300": "#e0e0e0",
                                              "400": "#bdbdbd",
                                              "50": "#fafafa",
                                              "500": "#9e9e9e",
                                              "600": "#757575",
                                              "700": "#616161",
                                              "800": "#424242",
                                              "900": "#212121",
                                              "A100": "#d5d5d5",
                                              "A200": "#aaaaaa",
                                              "A400": "#303030",
                                              "A700": "#616161",
                                            },
                                            "primary": Object {
                                              "contrastText": "#fff",
                                              "dark": "#303f9f",
                                              "light": "#7986cb",
                                              "main": "#3f51b5",
                                            },
                                            "secondary": Object {
                                              "contrastText": "#fff",
                                              "dark": "#c51162",
                                              "light": "#ff4081",
                                              "main": "#f50057",
                                            },
                                            "text": Object {
                                              "disabled": "rgba(0, 0, 0, 0.38)",
                                              "hint": "rgba(0, 0, 0, 0.38)",
                                              "primary": "rgba(0, 0, 0, 0.87)",
                                              "secondary": "rgba(0, 0, 0, 0.54)",
                                            },
                                            "tonalOffset": 0.2,
                                            "type": "light",
                                          },
                                          "props": Object {},
                                          "shadows": Array [
                                            "none",
                                            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                          ],
                                          "shape": Object {
                                            "borderRadius": 4,
                                          },
                                          "spacing": [Function],
                                          "transitions": Object {
                                            "create": [Function],
                                            "duration": Object {
                                              "complex": 375,
                                              "enteringScreen": 225,
                                              "leavingScreen": 195,
                                              "short": 250,
                                              "shorter": 200,
                                              "shortest": 150,
                                              "standard": 300,
                                            },
                                            "easing": Object {
                                              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                            },
                                            "getAutoHeightDuration": [Function],
                                          },
                                          "typography": Object {
                                            "body1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00938em",
                                              "lineHeight": 1.5,
                                            },
                                            "body2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.01071em",
                                              "lineHeight": 1.43,
                                            },
                                            "button": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.02857em",
                                              "lineHeight": 1.75,
                                              "textTransform": "uppercase",
                                            },
                                            "caption": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.75rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.03333em",
                                              "lineHeight": 1.66,
                                            },
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": 14,
                                            "fontWeightBold": 700,
                                            "fontWeightLight": 300,
                                            "fontWeightMedium": 500,
                                            "fontWeightRegular": 400,
                                            "h1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "6rem",
                                              "fontWeight": 300,
                                              "letterSpacing": "-0.01562em",
                                              "lineHeight": 1.167,
                                            },
                                            "h2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "3.75rem",
                                              "fontWeight": 300,
                                              "letterSpacing": "-0.00833em",
                                              "lineHeight": 1.2,
                                            },
                                            "h3": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "3rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0em",
                                              "lineHeight": 1.167,
                                            },
                                            "h4": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "2.125rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00735em",
                                              "lineHeight": 1.235,
                                            },
                                            "h5": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1.5rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0em",
                                              "lineHeight": 1.334,
                                            },
                                            "h6": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1.25rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.0075em",
                                              "lineHeight": 1.6,
                                            },
                                            "htmlFontSize": 16,
                                            "overline": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.75rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.08333em",
                                              "lineHeight": 2.66,
                                              "textTransform": "uppercase",
                                            },
                                            "pxToRem": [Function],
                                            "round": [Function],
                                            "subtitle1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00938em",
                                              "lineHeight": 1.75,
                                            },
                                            "subtitle2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.00714em",
                                              "lineHeight": 1.57,
                                            },
                                          },
                                          "zIndex": Object {
                                            "appBar": 1100,
                                            "drawer": 1200,
                                            "mobileStepper": 1000,
                                            "modal": 1300,
                                            "snackbar": 1400,
                                            "speedDial": 1050,
                                            "tooltip": 1500,
                                          },
                                        },
                                        "name": "MuiFormControlLabel",
                                      },
                                      "propTypes": Object {
                                        "classes": [Function],
                                        "innerRef": [Function],
                                      },
                                      "render": [Function],
                                      "styledComponentId": "sc-iELTvK",
                                      "target": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "Naked": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "propTypes": Object {
                                            "checked": [Function],
                                            "className": [Function],
                                            "classes": [Function],
                                            "control": [Function],
                                            "disabled": [Function],
                                            "inputRef": [Function],
                                            "label": [Function],
                                            "labelPlacement": [Function],
                                            "name": [Function],
                                            "onChange": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        },
                                        "defaultProps": undefined,
                                        "displayName": "WithStyles(ForwardRef(FormControlLabel))",
                                        "options": Object {
                                          "defaultTheme": Object {
                                            "breakpoints": Object {
                                              "between": [Function],
                                              "down": [Function],
                                              "keys": Array [
                                                "xs",
                                                "sm",
                                                "md",
                                                "lg",
                                                "xl",
                                              ],
                                              "only": [Function],
                                              "up": [Function],
                                              "values": Object {
                                                "lg": 1280,
                                                "md": 960,
                                                "sm": 600,
                                                "xl": 1920,
                                                "xs": 0,
                                              },
                                              "width": [Function],
                                            },
                                            "direction": "ltr",
                                            "mixins": Object {
                                              "gutters": [Function],
                                              "toolbar": Object {
                                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                                  "minHeight": 48,
                                                },
                                                "@media (min-width:600px)": Object {
                                                  "minHeight": 64,
                                                },
                                                "minHeight": 56,
                                              },
                                            },
                                            "overrides": Object {},
                                            "palette": Object {
                                              "action": Object {
                                                "active": "rgba(0, 0, 0, 0.54)",
                                                "disabled": "rgba(0, 0, 0, 0.26)",
                                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                "hover": "rgba(0, 0, 0, 0.08)",
                                                "hoverOpacity": 0.08,
                                                "selected": "rgba(0, 0, 0, 0.14)",
                                              },
                                              "augmentColor": [Function],
                                              "background": Object {
                                                "default": "#fafafa",
                                                "paper": "#fff",
                                              },
                                              "common": Object {
                                                "black": "#000",
                                                "white": "#fff",
                                              },
                                              "contrastThreshold": 3,
                                              "divider": "rgba(0, 0, 0, 0.12)",
                                              "error": Object {
                                                "contrastText": "#fff",
                                                "dark": "#d32f2f",
                                                "light": "#e57373",
                                                "main": "#f44336",
                                              },
                                              "getContrastText": [Function],
                                              "grey": Object {
                                                "100": "#f5f5f5",
                                                "200": "#eeeeee",
                                                "300": "#e0e0e0",
                                                "400": "#bdbdbd",
                                                "50": "#fafafa",
                                                "500": "#9e9e9e",
                                                "600": "#757575",
                                                "700": "#616161",
                                                "800": "#424242",
                                                "900": "#212121",
                                                "A100": "#d5d5d5",
                                                "A200": "#aaaaaa",
                                                "A400": "#303030",
                                                "A700": "#616161",
                                              },
                                              "primary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#303f9f",
                                                "light": "#7986cb",
                                                "main": "#3f51b5",
                                              },
                                              "secondary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#c51162",
                                                "light": "#ff4081",
                                                "main": "#f50057",
                                              },
                                              "text": Object {
                                                "disabled": "rgba(0, 0, 0, 0.38)",
                                                "hint": "rgba(0, 0, 0, 0.38)",
                                                "primary": "rgba(0, 0, 0, 0.87)",
                                                "secondary": "rgba(0, 0, 0, 0.54)",
                                              },
                                              "tonalOffset": 0.2,
                                              "type": "light",
                                            },
                                            "props": Object {},
                                            "shadows": Array [
                                              "none",
                                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                            ],
                                            "shape": Object {
                                              "borderRadius": 4,
                                            },
                                            "spacing": [Function],
                                            "transitions": Object {
                                              "create": [Function],
                                              "duration": Object {
                                                "complex": 375,
                                                "enteringScreen": 225,
                                                "leavingScreen": 195,
                                                "short": 250,
                                                "shorter": 200,
                                                "shortest": 150,
                                                "standard": 300,
                                              },
                                              "easing": Object {
                                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                              },
                                              "getAutoHeightDuration": [Function],
                                            },
                                            "typography": Object {
                                              "body1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.5,
                                              },
                                              "body2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.01071em",
                                                "lineHeight": 1.43,
                                              },
                                              "button": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.02857em",
                                                "lineHeight": 1.75,
                                                "textTransform": "uppercase",
                                              },
                                              "caption": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.03333em",
                                                "lineHeight": 1.66,
                                              },
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": 14,
                                              "fontWeightBold": 700,
                                              "fontWeightLight": 300,
                                              "fontWeightMedium": 500,
                                              "fontWeightRegular": 400,
                                              "h1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "6rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-0.01562em",
                                                "lineHeight": 1.167,
                                              },
                                              "h2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3.75rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-0.00833em",
                                                "lineHeight": 1.2,
                                              },
                                              "h3": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.167,
                                              },
                                              "h4": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.125rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00735em",
                                                "lineHeight": 1.235,
                                              },
                                              "h5": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.5rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.334,
                                              },
                                              "h6": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.25rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.0075em",
                                                "lineHeight": 1.6,
                                              },
                                              "htmlFontSize": 16,
                                              "overline": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.08333em",
                                                "lineHeight": 2.66,
                                                "textTransform": "uppercase",
                                              },
                                              "pxToRem": [Function],
                                              "round": [Function],
                                              "subtitle1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.75,
                                              },
                                              "subtitle2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.00714em",
                                                "lineHeight": 1.57,
                                              },
                                            },
                                            "zIndex": Object {
                                              "appBar": 1100,
                                              "drawer": 1200,
                                              "mobileStepper": 1000,
                                              "modal": 1300,
                                              "snackbar": 1400,
                                              "speedDial": 1050,
                                              "tooltip": 1500,
                                            },
                                          },
                                          "name": "MuiFormControlLabel",
                                        },
                                        "propTypes": Object {
                                          "classes": [Function],
                                          "innerRef": [Function],
                                        },
                                        "render": [Function],
                                        "useStyles": [Function],
                                      },
                                      "toString": [Function],
                                      "useStyles": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  label="ONBOARDING_SPACE_USE_RETAIL"
                                  value="RETAIL"
                                >
                                  <WithStyles(ForwardRef(FormControlLabel))
                                    className="sc-iELTvK CZnOF"
                                    control={
                                      <ForwardRef(WithStyles)
                                        disableRipple={true}
                                      />
                                    }
                                    label="ONBOARDING_SPACE_USE_RETAIL"
                                    value="RETAIL"
                                  >
                                    <ForwardRef(FormControlLabel)
                                      className="sc-iELTvK CZnOF"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "label": "MuiFormControlLabel-label",
                                          "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                                          "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                                          "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                                          "root": "MuiFormControlLabel-root",
                                        }
                                      }
                                      control={
                                        <ForwardRef(WithStyles)
                                          disableRipple={true}
                                        />
                                      }
                                      label="ONBOARDING_SPACE_USE_RETAIL"
                                      value="RETAIL"
                                    >
                                      <label
                                        className="MuiFormControlLabel-root sc-iELTvK CZnOF"
                                      >
                                        <WithStyles(ForwardRef(Radio))
                                          disableRipple={true}
                                          value="RETAIL"
                                        >
                                          <ForwardRef(Radio)
                                            classes={
                                              Object {
                                                "checked": "Mui-checked",
                                                "colorPrimary": "MuiRadio-colorPrimary",
                                                "colorSecondary": "MuiRadio-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "root": "MuiRadio-root",
                                              }
                                            }
                                            disableRipple={true}
                                            value="RETAIL"
                                          >
                                            <WithStyles(ForwardRef(SwitchBase))
                                              checked={false}
                                              checkedIcon={
                                                <ForwardRef(WithStyles)
                                                  checked={true}
                                                  fontSize="default"
                                                />
                                              }
                                              classes={
                                                Object {
                                                  "checked": "Mui-checked",
                                                  "disabled": "Mui-disabled",
                                                  "root": "MuiRadio-root MuiRadio-colorSecondary",
                                                }
                                              }
                                              color="secondary"
                                              disableRipple={true}
                                              disabled={false}
                                              icon={
                                                <ForwardRef(WithStyles)
                                                  fontSize="default"
                                                />
                                              }
                                              name="use"
                                              onChange={[Function]}
                                              type="radio"
                                              value="RETAIL"
                                            >
                                              <ForwardRef(SwitchBase)
                                                checked={false}
                                                checkedIcon={
                                                  <ForwardRef(WithStyles)
                                                    checked={true}
                                                    fontSize="default"
                                                  />
                                                }
                                                classes={
                                                  Object {
                                                    "checked": "PrivateSwitchBase-checked-88 Mui-checked",
                                                    "disabled": "PrivateSwitchBase-disabled-89 Mui-disabled",
                                                    "input": "PrivateSwitchBase-input-90",
                                                    "root": "PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary",
                                                  }
                                                }
                                                color="secondary"
                                                disableRipple={true}
                                                disabled={false}
                                                icon={
                                                  <ForwardRef(WithStyles)
                                                    fontSize="default"
                                                  />
                                                }
                                                name="use"
                                                onChange={[Function]}
                                                type="radio"
                                                value="RETAIL"
                                              >
                                                <WithStyles(ForwardRef(IconButton))
                                                  className="PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary"
                                                  color="secondary"
                                                  component="span"
                                                  disableRipple={true}
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <ForwardRef(IconButton)
                                                    className="PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary"
                                                    classes={
                                                      Object {
                                                        "colorInherit": "MuiIconButton-colorInherit",
                                                        "colorPrimary": "MuiIconButton-colorPrimary",
                                                        "colorSecondary": "MuiIconButton-colorSecondary",
                                                        "disabled": "Mui-disabled",
                                                        "edgeEnd": "MuiIconButton-edgeEnd",
                                                        "edgeStart": "MuiIconButton-edgeStart",
                                                        "label": "MuiIconButton-label",
                                                        "root": "MuiIconButton-root",
                                                        "sizeSmall": "MuiIconButton-sizeSmall",
                                                      }
                                                    }
                                                    color="secondary"
                                                    component="span"
                                                    disableRipple={true}
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    tabIndex={null}
                                                  >
                                                    <WithStyles(ForwardRef(ButtonBase))
                                                      centerRipple={true}
                                                      className="MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                      component="span"
                                                      disableRipple={true}
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(ButtonBase)
                                                        centerRipple={true}
                                                        className="MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "disabled": "Mui-disabled",
                                                            "focusVisible": "Mui-focusVisible",
                                                            "root": "MuiButtonBase-root",
                                                          }
                                                        }
                                                        component="span"
                                                        disableRipple={true}
                                                        disabled={false}
                                                        focusRipple={true}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <span
                                                          aria-disabled={false}
                                                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                          onBlur={[Function]}
                                                          onDragLeave={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <span
                                                            className="MuiIconButton-label"
                                                          >
                                                            <input
                                                              checked={false}
                                                              className="PrivateSwitchBase-input-90"
                                                              disabled={false}
                                                              name="use"
                                                              onChange={[Function]}
                                                              type="radio"
                                                              value="RETAIL"
                                                            />
                                                            <WithStyles(RadioButtonIcon)
                                                              fontSize="default"
                                                            >
                                                              <RadioButtonIcon
                                                                classes={
                                                                  Object {
                                                                    "checked": "PrivateRadioButtonIcon-checked-93",
                                                                    "layer": "PrivateRadioButtonIcon-layer-92",
                                                                    "root": "PrivateRadioButtonIcon-root-91",
                                                                  }
                                                                }
                                                                fontSize="default"
                                                              >
                                                                <div
                                                                  className="PrivateRadioButtonIcon-root-91"
                                                                >
                                                                  <ForwardRef
                                                                    fontSize="default"
                                                                  >
                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                      fontSize="default"
                                                                    >
                                                                      <ForwardRef(SvgIcon)
                                                                        classes={
                                                                          Object {
                                                                            "colorAction": "MuiSvgIcon-colorAction",
                                                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                            "colorError": "MuiSvgIcon-colorError",
                                                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                            "root": "MuiSvgIcon-root",
                                                                          }
                                                                        }
                                                                        fontSize="default"
                                                                      >
                                                                        <svg
                                                                          aria-hidden="true"
                                                                          className="MuiSvgIcon-root"
                                                                          focusable="false"
                                                                          role="presentation"
                                                                          viewBox="0 0 24 24"
                                                                        >
                                                                          <path
                                                                            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                                                                          />
                                                                        </svg>
                                                                      </ForwardRef(SvgIcon)>
                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                  </ForwardRef>
                                                                  <ForwardRef
                                                                    className="PrivateRadioButtonIcon-layer-92"
                                                                    fontSize="default"
                                                                  >
                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                      className="PrivateRadioButtonIcon-layer-92"
                                                                      fontSize="default"
                                                                    >
                                                                      <ForwardRef(SvgIcon)
                                                                        className="PrivateRadioButtonIcon-layer-92"
                                                                        classes={
                                                                          Object {
                                                                            "colorAction": "MuiSvgIcon-colorAction",
                                                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                            "colorError": "MuiSvgIcon-colorError",
                                                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                            "root": "MuiSvgIcon-root",
                                                                          }
                                                                        }
                                                                        fontSize="default"
                                                                      >
                                                                        <svg
                                                                          aria-hidden="true"
                                                                          className="MuiSvgIcon-root PrivateRadioButtonIcon-layer-92"
                                                                          focusable="false"
                                                                          role="presentation"
                                                                          viewBox="0 0 24 24"
                                                                        >
                                                                          <path
                                                                            d="M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
                                                                          />
                                                                        </svg>
                                                                      </ForwardRef(SvgIcon)>
                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                  </ForwardRef>
                                                                </div>
                                                              </RadioButtonIcon>
                                                            </WithStyles(RadioButtonIcon)>
                                                          </span>
                                                        </span>
                                                      </ForwardRef(ButtonBase)>
                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                  </ForwardRef(IconButton)>
                                                </WithStyles(ForwardRef(IconButton))>
                                              </ForwardRef(SwitchBase)>
                                            </WithStyles(ForwardRef(SwitchBase))>
                                          </ForwardRef(Radio)>
                                        </WithStyles(ForwardRef(Radio))>
                                        <WithStyles(ForwardRef(Typography))
                                          className="MuiFormControlLabel-label"
                                          component="span"
                                        >
                                          <ForwardRef(Typography)
                                            className="MuiFormControlLabel-label"
                                            classes={
                                              Object {
                                                "alignCenter": "MuiTypography-alignCenter",
                                                "alignJustify": "MuiTypography-alignJustify",
                                                "alignLeft": "MuiTypography-alignLeft",
                                                "alignRight": "MuiTypography-alignRight",
                                                "body1": "MuiTypography-body1",
                                                "body2": "MuiTypography-body2",
                                                "button": "MuiTypography-button",
                                                "caption": "MuiTypography-caption",
                                                "colorError": "MuiTypography-colorError",
                                                "colorInherit": "MuiTypography-colorInherit",
                                                "colorPrimary": "MuiTypography-colorPrimary",
                                                "colorSecondary": "MuiTypography-colorSecondary",
                                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                "displayBlock": "MuiTypography-displayBlock",
                                                "displayInline": "MuiTypography-displayInline",
                                                "gutterBottom": "MuiTypography-gutterBottom",
                                                "h1": "MuiTypography-h1",
                                                "h2": "MuiTypography-h2",
                                                "h3": "MuiTypography-h3",
                                                "h4": "MuiTypography-h4",
                                                "h5": "MuiTypography-h5",
                                                "h6": "MuiTypography-h6",
                                                "noWrap": "MuiTypography-noWrap",
                                                "overline": "MuiTypography-overline",
                                                "paragraph": "MuiTypography-paragraph",
                                                "root": "MuiTypography-root",
                                                "srOnly": "MuiTypography-srOnly",
                                                "subtitle1": "MuiTypography-subtitle1",
                                                "subtitle2": "MuiTypography-subtitle2",
                                              }
                                            }
                                            component="span"
                                          >
                                            <span
                                              className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                                            >
                                              ONBOARDING_SPACE_USE_RETAIL
                                            </span>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </label>
                                    </ForwardRef(FormControlLabel)>
                                  </WithStyles(ForwardRef(FormControlLabel))>
                                </StyledComponent>
                              </Styled(WithStyles(ForwardRef(FormControlLabel)))>
                              <Styled(WithStyles(ForwardRef(FormControlLabel)))
                                control={
                                  <ForwardRef(WithStyles)
                                    disableRipple={true}
                                  />
                                }
                                label="ONBOARDING_SPACE_USE_OFFICE_RETAIL"
                                value="OFFICE_RETAIL"
                              >
                                <StyledComponent
                                  control={
                                    <ForwardRef(WithStyles)
                                      disableRipple={true}
                                    />
                                  }
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Naked": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "propTypes": Object {
                                          "checked": [Function],
                                          "className": [Function],
                                          "classes": [Function],
                                          "control": [Function],
                                          "disabled": [Function],
                                          "inputRef": [Function],
                                          "label": [Function],
                                          "labelPlacement": [Function],
                                          "name": [Function],
                                          "onChange": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      },
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-iELTvK",
                                        "isStatic": false,
                                        "lastClassName": "CZnOF",
                                        "rules": Array [
                                          "
  .MuiFormControlLabel-label {
    font-size: 16px;
    font-weight: 400;
    line-height: 21px;
  }
  .MuiIconButton-label,
  .MuiIconButton-root {
    color: #6cb9d5;
    padding: 3px;
  }
  .MuiButtonBase-root:hover,
  .Mui-checked.MuiButtonBase-root:hover {
    background-color: rgba(108, 185, 213, 0.2);
  }
",
                                        ],
                                      },
                                      "displayName": "Styled(WithStyles(ForwardRef(FormControlLabel)))",
                                      "foldedComponentIds": Array [],
                                      "options": Object {
                                        "defaultTheme": Object {
                                          "breakpoints": Object {
                                            "between": [Function],
                                            "down": [Function],
                                            "keys": Array [
                                              "xs",
                                              "sm",
                                              "md",
                                              "lg",
                                              "xl",
                                            ],
                                            "only": [Function],
                                            "up": [Function],
                                            "values": Object {
                                              "lg": 1280,
                                              "md": 960,
                                              "sm": 600,
                                              "xl": 1920,
                                              "xs": 0,
                                            },
                                            "width": [Function],
                                          },
                                          "direction": "ltr",
                                          "mixins": Object {
                                            "gutters": [Function],
                                            "toolbar": Object {
                                              "@media (min-width:0px) and (orientation: landscape)": Object {
                                                "minHeight": 48,
                                              },
                                              "@media (min-width:600px)": Object {
                                                "minHeight": 64,
                                              },
                                              "minHeight": 56,
                                            },
                                          },
                                          "overrides": Object {},
                                          "palette": Object {
                                            "action": Object {
                                              "active": "rgba(0, 0, 0, 0.54)",
                                              "disabled": "rgba(0, 0, 0, 0.26)",
                                              "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                              "hover": "rgba(0, 0, 0, 0.08)",
                                              "hoverOpacity": 0.08,
                                              "selected": "rgba(0, 0, 0, 0.14)",
                                            },
                                            "augmentColor": [Function],
                                            "background": Object {
                                              "default": "#fafafa",
                                              "paper": "#fff",
                                            },
                                            "common": Object {
                                              "black": "#000",
                                              "white": "#fff",
                                            },
                                            "contrastThreshold": 3,
                                            "divider": "rgba(0, 0, 0, 0.12)",
                                            "error": Object {
                                              "contrastText": "#fff",
                                              "dark": "#d32f2f",
                                              "light": "#e57373",
                                              "main": "#f44336",
                                            },
                                            "getContrastText": [Function],
                                            "grey": Object {
                                              "100": "#f5f5f5",
                                              "200": "#eeeeee",
                                              "300": "#e0e0e0",
                                              "400": "#bdbdbd",
                                              "50": "#fafafa",
                                              "500": "#9e9e9e",
                                              "600": "#757575",
                                              "700": "#616161",
                                              "800": "#424242",
                                              "900": "#212121",
                                              "A100": "#d5d5d5",
                                              "A200": "#aaaaaa",
                                              "A400": "#303030",
                                              "A700": "#616161",
                                            },
                                            "primary": Object {
                                              "contrastText": "#fff",
                                              "dark": "#303f9f",
                                              "light": "#7986cb",
                                              "main": "#3f51b5",
                                            },
                                            "secondary": Object {
                                              "contrastText": "#fff",
                                              "dark": "#c51162",
                                              "light": "#ff4081",
                                              "main": "#f50057",
                                            },
                                            "text": Object {
                                              "disabled": "rgba(0, 0, 0, 0.38)",
                                              "hint": "rgba(0, 0, 0, 0.38)",
                                              "primary": "rgba(0, 0, 0, 0.87)",
                                              "secondary": "rgba(0, 0, 0, 0.54)",
                                            },
                                            "tonalOffset": 0.2,
                                            "type": "light",
                                          },
                                          "props": Object {},
                                          "shadows": Array [
                                            "none",
                                            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                          ],
                                          "shape": Object {
                                            "borderRadius": 4,
                                          },
                                          "spacing": [Function],
                                          "transitions": Object {
                                            "create": [Function],
                                            "duration": Object {
                                              "complex": 375,
                                              "enteringScreen": 225,
                                              "leavingScreen": 195,
                                              "short": 250,
                                              "shorter": 200,
                                              "shortest": 150,
                                              "standard": 300,
                                            },
                                            "easing": Object {
                                              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                            },
                                            "getAutoHeightDuration": [Function],
                                          },
                                          "typography": Object {
                                            "body1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00938em",
                                              "lineHeight": 1.5,
                                            },
                                            "body2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.01071em",
                                              "lineHeight": 1.43,
                                            },
                                            "button": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.02857em",
                                              "lineHeight": 1.75,
                                              "textTransform": "uppercase",
                                            },
                                            "caption": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.75rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.03333em",
                                              "lineHeight": 1.66,
                                            },
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": 14,
                                            "fontWeightBold": 700,
                                            "fontWeightLight": 300,
                                            "fontWeightMedium": 500,
                                            "fontWeightRegular": 400,
                                            "h1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "6rem",
                                              "fontWeight": 300,
                                              "letterSpacing": "-0.01562em",
                                              "lineHeight": 1.167,
                                            },
                                            "h2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "3.75rem",
                                              "fontWeight": 300,
                                              "letterSpacing": "-0.00833em",
                                              "lineHeight": 1.2,
                                            },
                                            "h3": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "3rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0em",
                                              "lineHeight": 1.167,
                                            },
                                            "h4": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "2.125rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00735em",
                                              "lineHeight": 1.235,
                                            },
                                            "h5": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1.5rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0em",
                                              "lineHeight": 1.334,
                                            },
                                            "h6": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1.25rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.0075em",
                                              "lineHeight": 1.6,
                                            },
                                            "htmlFontSize": 16,
                                            "overline": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.75rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.08333em",
                                              "lineHeight": 2.66,
                                              "textTransform": "uppercase",
                                            },
                                            "pxToRem": [Function],
                                            "round": [Function],
                                            "subtitle1": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "1rem",
                                              "fontWeight": 400,
                                              "letterSpacing": "0.00938em",
                                              "lineHeight": 1.75,
                                            },
                                            "subtitle2": Object {
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": "0.875rem",
                                              "fontWeight": 500,
                                              "letterSpacing": "0.00714em",
                                              "lineHeight": 1.57,
                                            },
                                          },
                                          "zIndex": Object {
                                            "appBar": 1100,
                                            "drawer": 1200,
                                            "mobileStepper": 1000,
                                            "modal": 1300,
                                            "snackbar": 1400,
                                            "speedDial": 1050,
                                            "tooltip": 1500,
                                          },
                                        },
                                        "name": "MuiFormControlLabel",
                                      },
                                      "propTypes": Object {
                                        "classes": [Function],
                                        "innerRef": [Function],
                                      },
                                      "render": [Function],
                                      "styledComponentId": "sc-iELTvK",
                                      "target": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "Naked": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "propTypes": Object {
                                            "checked": [Function],
                                            "className": [Function],
                                            "classes": [Function],
                                            "control": [Function],
                                            "disabled": [Function],
                                            "inputRef": [Function],
                                            "label": [Function],
                                            "labelPlacement": [Function],
                                            "name": [Function],
                                            "onChange": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        },
                                        "defaultProps": undefined,
                                        "displayName": "WithStyles(ForwardRef(FormControlLabel))",
                                        "options": Object {
                                          "defaultTheme": Object {
                                            "breakpoints": Object {
                                              "between": [Function],
                                              "down": [Function],
                                              "keys": Array [
                                                "xs",
                                                "sm",
                                                "md",
                                                "lg",
                                                "xl",
                                              ],
                                              "only": [Function],
                                              "up": [Function],
                                              "values": Object {
                                                "lg": 1280,
                                                "md": 960,
                                                "sm": 600,
                                                "xl": 1920,
                                                "xs": 0,
                                              },
                                              "width": [Function],
                                            },
                                            "direction": "ltr",
                                            "mixins": Object {
                                              "gutters": [Function],
                                              "toolbar": Object {
                                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                                  "minHeight": 48,
                                                },
                                                "@media (min-width:600px)": Object {
                                                  "minHeight": 64,
                                                },
                                                "minHeight": 56,
                                              },
                                            },
                                            "overrides": Object {},
                                            "palette": Object {
                                              "action": Object {
                                                "active": "rgba(0, 0, 0, 0.54)",
                                                "disabled": "rgba(0, 0, 0, 0.26)",
                                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                "hover": "rgba(0, 0, 0, 0.08)",
                                                "hoverOpacity": 0.08,
                                                "selected": "rgba(0, 0, 0, 0.14)",
                                              },
                                              "augmentColor": [Function],
                                              "background": Object {
                                                "default": "#fafafa",
                                                "paper": "#fff",
                                              },
                                              "common": Object {
                                                "black": "#000",
                                                "white": "#fff",
                                              },
                                              "contrastThreshold": 3,
                                              "divider": "rgba(0, 0, 0, 0.12)",
                                              "error": Object {
                                                "contrastText": "#fff",
                                                "dark": "#d32f2f",
                                                "light": "#e57373",
                                                "main": "#f44336",
                                              },
                                              "getContrastText": [Function],
                                              "grey": Object {
                                                "100": "#f5f5f5",
                                                "200": "#eeeeee",
                                                "300": "#e0e0e0",
                                                "400": "#bdbdbd",
                                                "50": "#fafafa",
                                                "500": "#9e9e9e",
                                                "600": "#757575",
                                                "700": "#616161",
                                                "800": "#424242",
                                                "900": "#212121",
                                                "A100": "#d5d5d5",
                                                "A200": "#aaaaaa",
                                                "A400": "#303030",
                                                "A700": "#616161",
                                              },
                                              "primary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#303f9f",
                                                "light": "#7986cb",
                                                "main": "#3f51b5",
                                              },
                                              "secondary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#c51162",
                                                "light": "#ff4081",
                                                "main": "#f50057",
                                              },
                                              "text": Object {
                                                "disabled": "rgba(0, 0, 0, 0.38)",
                                                "hint": "rgba(0, 0, 0, 0.38)",
                                                "primary": "rgba(0, 0, 0, 0.87)",
                                                "secondary": "rgba(0, 0, 0, 0.54)",
                                              },
                                              "tonalOffset": 0.2,
                                              "type": "light",
                                            },
                                            "props": Object {},
                                            "shadows": Array [
                                              "none",
                                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                            ],
                                            "shape": Object {
                                              "borderRadius": 4,
                                            },
                                            "spacing": [Function],
                                            "transitions": Object {
                                              "create": [Function],
                                              "duration": Object {
                                                "complex": 375,
                                                "enteringScreen": 225,
                                                "leavingScreen": 195,
                                                "short": 250,
                                                "shorter": 200,
                                                "shortest": 150,
                                                "standard": 300,
                                              },
                                              "easing": Object {
                                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                              },
                                              "getAutoHeightDuration": [Function],
                                            },
                                            "typography": Object {
                                              "body1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.5,
                                              },
                                              "body2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.01071em",
                                                "lineHeight": 1.43,
                                              },
                                              "button": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.02857em",
                                                "lineHeight": 1.75,
                                                "textTransform": "uppercase",
                                              },
                                              "caption": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.03333em",
                                                "lineHeight": 1.66,
                                              },
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": 14,
                                              "fontWeightBold": 700,
                                              "fontWeightLight": 300,
                                              "fontWeightMedium": 500,
                                              "fontWeightRegular": 400,
                                              "h1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "6rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-0.01562em",
                                                "lineHeight": 1.167,
                                              },
                                              "h2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3.75rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-0.00833em",
                                                "lineHeight": 1.2,
                                              },
                                              "h3": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.167,
                                              },
                                              "h4": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.125rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00735em",
                                                "lineHeight": 1.235,
                                              },
                                              "h5": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.5rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.334,
                                              },
                                              "h6": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.25rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.0075em",
                                                "lineHeight": 1.6,
                                              },
                                              "htmlFontSize": 16,
                                              "overline": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.08333em",
                                                "lineHeight": 2.66,
                                                "textTransform": "uppercase",
                                              },
                                              "pxToRem": [Function],
                                              "round": [Function],
                                              "subtitle1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.75,
                                              },
                                              "subtitle2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "letterSpacing": "0.00714em",
                                                "lineHeight": 1.57,
                                              },
                                            },
                                            "zIndex": Object {
                                              "appBar": 1100,
                                              "drawer": 1200,
                                              "mobileStepper": 1000,
                                              "modal": 1300,
                                              "snackbar": 1400,
                                              "speedDial": 1050,
                                              "tooltip": 1500,
                                            },
                                          },
                                          "name": "MuiFormControlLabel",
                                        },
                                        "propTypes": Object {
                                          "classes": [Function],
                                          "innerRef": [Function],
                                        },
                                        "render": [Function],
                                        "useStyles": [Function],
                                      },
                                      "toString": [Function],
                                      "useStyles": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  label="ONBOARDING_SPACE_USE_OFFICE_RETAIL"
                                  value="OFFICE_RETAIL"
                                >
                                  <WithStyles(ForwardRef(FormControlLabel))
                                    className="sc-iELTvK CZnOF"
                                    control={
                                      <ForwardRef(WithStyles)
                                        disableRipple={true}
                                      />
                                    }
                                    label="ONBOARDING_SPACE_USE_OFFICE_RETAIL"
                                    value="OFFICE_RETAIL"
                                  >
                                    <ForwardRef(FormControlLabel)
                                      className="sc-iELTvK CZnOF"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "label": "MuiFormControlLabel-label",
                                          "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                                          "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                                          "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                                          "root": "MuiFormControlLabel-root",
                                        }
                                      }
                                      control={
                                        <ForwardRef(WithStyles)
                                          disableRipple={true}
                                        />
                                      }
                                      label="ONBOARDING_SPACE_USE_OFFICE_RETAIL"
                                      value="OFFICE_RETAIL"
                                    >
                                      <label
                                        className="MuiFormControlLabel-root sc-iELTvK CZnOF"
                                      >
                                        <WithStyles(ForwardRef(Radio))
                                          disableRipple={true}
                                          value="OFFICE_RETAIL"
                                        >
                                          <ForwardRef(Radio)
                                            classes={
                                              Object {
                                                "checked": "Mui-checked",
                                                "colorPrimary": "MuiRadio-colorPrimary",
                                                "colorSecondary": "MuiRadio-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "root": "MuiRadio-root",
                                              }
                                            }
                                            disableRipple={true}
                                            value="OFFICE_RETAIL"
                                          >
                                            <WithStyles(ForwardRef(SwitchBase))
                                              checked={false}
                                              checkedIcon={
                                                <ForwardRef(WithStyles)
                                                  checked={true}
                                                  fontSize="default"
                                                />
                                              }
                                              classes={
                                                Object {
                                                  "checked": "Mui-checked",
                                                  "disabled": "Mui-disabled",
                                                  "root": "MuiRadio-root MuiRadio-colorSecondary",
                                                }
                                              }
                                              color="secondary"
                                              disableRipple={true}
                                              disabled={false}
                                              icon={
                                                <ForwardRef(WithStyles)
                                                  fontSize="default"
                                                />
                                              }
                                              name="use"
                                              onChange={[Function]}
                                              type="radio"
                                              value="OFFICE_RETAIL"
                                            >
                                              <ForwardRef(SwitchBase)
                                                checked={false}
                                                checkedIcon={
                                                  <ForwardRef(WithStyles)
                                                    checked={true}
                                                    fontSize="default"
                                                  />
                                                }
                                                classes={
                                                  Object {
                                                    "checked": "PrivateSwitchBase-checked-88 Mui-checked",
                                                    "disabled": "PrivateSwitchBase-disabled-89 Mui-disabled",
                                                    "input": "PrivateSwitchBase-input-90",
                                                    "root": "PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary",
                                                  }
                                                }
                                                color="secondary"
                                                disableRipple={true}
                                                disabled={false}
                                                icon={
                                                  <ForwardRef(WithStyles)
                                                    fontSize="default"
                                                  />
                                                }
                                                name="use"
                                                onChange={[Function]}
                                                type="radio"
                                                value="OFFICE_RETAIL"
                                              >
                                                <WithStyles(ForwardRef(IconButton))
                                                  className="PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary"
                                                  color="secondary"
                                                  component="span"
                                                  disableRipple={true}
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <ForwardRef(IconButton)
                                                    className="PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary"
                                                    classes={
                                                      Object {
                                                        "colorInherit": "MuiIconButton-colorInherit",
                                                        "colorPrimary": "MuiIconButton-colorPrimary",
                                                        "colorSecondary": "MuiIconButton-colorSecondary",
                                                        "disabled": "Mui-disabled",
                                                        "edgeEnd": "MuiIconButton-edgeEnd",
                                                        "edgeStart": "MuiIconButton-edgeStart",
                                                        "label": "MuiIconButton-label",
                                                        "root": "MuiIconButton-root",
                                                        "sizeSmall": "MuiIconButton-sizeSmall",
                                                      }
                                                    }
                                                    color="secondary"
                                                    component="span"
                                                    disableRipple={true}
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    tabIndex={null}
                                                  >
                                                    <WithStyles(ForwardRef(ButtonBase))
                                                      centerRipple={true}
                                                      className="MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                      component="span"
                                                      disableRipple={true}
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(ButtonBase)
                                                        centerRipple={true}
                                                        className="MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "disabled": "Mui-disabled",
                                                            "focusVisible": "Mui-focusVisible",
                                                            "root": "MuiButtonBase-root",
                                                          }
                                                        }
                                                        component="span"
                                                        disableRipple={true}
                                                        disabled={false}
                                                        focusRipple={true}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <span
                                                          aria-disabled={false}
                                                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-87 MuiRadio-root MuiRadio-colorSecondary MuiIconButton-colorSecondary"
                                                          onBlur={[Function]}
                                                          onDragLeave={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <span
                                                            className="MuiIconButton-label"
                                                          >
                                                            <input
                                                              checked={false}
                                                              className="PrivateSwitchBase-input-90"
                                                              disabled={false}
                                                              name="use"
                                                              onChange={[Function]}
                                                              type="radio"
                                                              value="OFFICE_RETAIL"
                                                            />
                                                            <WithStyles(RadioButtonIcon)
                                                              fontSize="default"
                                                            >
                                                              <RadioButtonIcon
                                                                classes={
                                                                  Object {
                                                                    "checked": "PrivateRadioButtonIcon-checked-93",
                                                                    "layer": "PrivateRadioButtonIcon-layer-92",
                                                                    "root": "PrivateRadioButtonIcon-root-91",
                                                                  }
                                                                }
                                                                fontSize="default"
                                                              >
                                                                <div
                                                                  className="PrivateRadioButtonIcon-root-91"
                                                                >
                                                                  <ForwardRef
                                                                    fontSize="default"
                                                                  >
                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                      fontSize="default"
                                                                    >
                                                                      <ForwardRef(SvgIcon)
                                                                        classes={
                                                                          Object {
                                                                            "colorAction": "MuiSvgIcon-colorAction",
                                                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                            "colorError": "MuiSvgIcon-colorError",
                                                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                            "root": "MuiSvgIcon-root",
                                                                          }
                                                                        }
                                                                        fontSize="default"
                                                                      >
                                                                        <svg
                                                                          aria-hidden="true"
                                                                          className="MuiSvgIcon-root"
                                                                          focusable="false"
                                                                          role="presentation"
                                                                          viewBox="0 0 24 24"
                                                                        >
                                                                          <path
                                                                            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                                                                          />
                                                                        </svg>
                                                                      </ForwardRef(SvgIcon)>
                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                  </ForwardRef>
                                                                  <ForwardRef
                                                                    className="PrivateRadioButtonIcon-layer-92"
                                                                    fontSize="default"
                                                                  >
                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                      className="PrivateRadioButtonIcon-layer-92"
                                                                      fontSize="default"
                                                                    >
                                                                      <ForwardRef(SvgIcon)
                                                                        className="PrivateRadioButtonIcon-layer-92"
                                                                        classes={
                                                                          Object {
                                                                            "colorAction": "MuiSvgIcon-colorAction",
                                                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                            "colorError": "MuiSvgIcon-colorError",
                                                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                            "root": "MuiSvgIcon-root",
                                                                          }
                                                                        }
                                                                        fontSize="default"
                                                                      >
                                                                        <svg
                                                                          aria-hidden="true"
                                                                          className="MuiSvgIcon-root PrivateRadioButtonIcon-layer-92"
                                                                          focusable="false"
                                                                          role="presentation"
                                                                          viewBox="0 0 24 24"
                                                                        >
                                                                          <path
                                                                            d="M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
                                                                          />
                                                                        </svg>
                                                                      </ForwardRef(SvgIcon)>
                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                  </ForwardRef>
                                                                </div>
                                                              </RadioButtonIcon>
                                                            </WithStyles(RadioButtonIcon)>
                                                          </span>
                                                        </span>
                                                      </ForwardRef(ButtonBase)>
                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                  </ForwardRef(IconButton)>
                                                </WithStyles(ForwardRef(IconButton))>
                                              </ForwardRef(SwitchBase)>
                                            </WithStyles(ForwardRef(SwitchBase))>
                                          </ForwardRef(Radio)>
                                        </WithStyles(ForwardRef(Radio))>
                                        <WithStyles(ForwardRef(Typography))
                                          className="MuiFormControlLabel-label"
                                          component="span"
                                        >
                                          <ForwardRef(Typography)
                                            className="MuiFormControlLabel-label"
                                            classes={
                                              Object {
                                                "alignCenter": "MuiTypography-alignCenter",
                                                "alignJustify": "MuiTypography-alignJustify",
                                                "alignLeft": "MuiTypography-alignLeft",
                                                "alignRight": "MuiTypography-alignRight",
                                                "body1": "MuiTypography-body1",
                                                "body2": "MuiTypography-body2",
                                                "button": "MuiTypography-button",
                                                "caption": "MuiTypography-caption",
                                                "colorError": "MuiTypography-colorError",
                                                "colorInherit": "MuiTypography-colorInherit",
                                                "colorPrimary": "MuiTypography-colorPrimary",
                                                "colorSecondary": "MuiTypography-colorSecondary",
                                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                "displayBlock": "MuiTypography-displayBlock",
                                                "displayInline": "MuiTypography-displayInline",
                                                "gutterBottom": "MuiTypography-gutterBottom",
                                                "h1": "MuiTypography-h1",
                                                "h2": "MuiTypography-h2",
                                                "h3": "MuiTypography-h3",
                                                "h4": "MuiTypography-h4",
                                                "h5": "MuiTypography-h5",
                                                "h6": "MuiTypography-h6",
                                                "noWrap": "MuiTypography-noWrap",
                                                "overline": "MuiTypography-overline",
                                                "paragraph": "MuiTypography-paragraph",
                                                "root": "MuiTypography-root",
                                                "srOnly": "MuiTypography-srOnly",
                                                "subtitle1": "MuiTypography-subtitle1",
                                                "subtitle2": "MuiTypography-subtitle2",
                                              }
                                            }
                                            component="span"
                                          >
                                            <span
                                              className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                                            >
                                              ONBOARDING_SPACE_USE_OFFICE_RETAIL
                                            </span>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </label>
                                    </ForwardRef(FormControlLabel)>
                                  </WithStyles(ForwardRef(FormControlLabel))>
                                </StyledComponent>
                              </Styled(WithStyles(ForwardRef(FormControlLabel)))>
                            </div>
                          </ForwardRef(FormGroup)>
                        </WithStyles(ForwardRef(FormGroup))>
                      </ForwardRef(RadioGroup)>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hEsumM",
                    "isStatic": false,
                    "lastClassName": "bxuiAR",
                    "rules": Array [
                      "
  margin-bottom: 50px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hEsumM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-hEsumM bxuiAR"
              >
                <Styled(styled.h4)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-feJyhm",
                          "isStatic": false,
                          "lastClassName": "hYRSSY",
                          "rules": Array [
                            "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                          ],
                        },
                        "displayName": "Styled(styled.h4)",
                        "foldedComponentIds": Array [
                          "sc-bwzfXH",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-feJyhm",
                        "target": "h4",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h4
                      className="sc-bwzfXH sc-feJyhm hYRSSY"
                    >
                      ONBOARDING_FLOORED_MATTERPORT_TITLE
                    </h4>
                  </StyledComponent>
                </Styled(styled.h4)>
                <Styled(Input)
                  id="spaceFloored"
                  label="ONBOARDING_SPACE_FLOORED"
                  onChange={[Function]}
                  type="text"
                  value=""
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dNLxif",
                          "isStatic": false,
                          "lastClassName": "goihLt",
                          "rules": Array [
                            "
  width: 100%;
  margin-top: 20px;
",
                          ],
                        },
                        "displayName": "Styled(Input)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dNLxif",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    id="spaceFloored"
                    label="ONBOARDING_SPACE_FLOORED"
                    onChange={[Function]}
                    type="text"
                    value=""
                  >
                    <Input
                      className="sc-dNLxif goihLt"
                      id="spaceFloored"
                      label="ONBOARDING_SPACE_FLOORED"
                      onChange={[Function]}
                      type="text"
                      value=""
                    >
                      <styled.div
                        className="sc-dNLxif goihLt"
                      >
                        <StyledComponent
                          className="sc-dNLxif goihLt"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "djDvul",
                                "rules": Array [
                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-htpNat djDvul sc-dNLxif goihLt"
                          >
                            <label
                              htmlFor="spaceFloored"
                            >
                              ONBOARDING_SPACE_FLOORED
                            </label>
                            <styled.input
                              id="spaceFloored"
                              onChange={[Function]}
                              type="text"
                              value=""
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "aiwDT",
                                      "rules": Array [
                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                        [Function],
                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                        [Function],
                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                        [Function],
                                        ";
    border: 1px solid ",
                                        [Function],
                                        ";
  }
",
                                      ],
                                    },
                                    "displayName": "styled.input",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": "input",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                id="spaceFloored"
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <input
                                  className="sc-bxivhb aiwDT"
                                  id="spaceFloored"
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                />
                              </StyledComponent>
                            </styled.input>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-ifAKCX",
                                      "isStatic": false,
                                      "lastClassName": "hmksNE",
                                      "rules": Array [
                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-ifAKCX",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-ifAKCX hmksNE"
                                />
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Input>
                  </StyledComponent>
                </Styled(Input)>
                <Styled(Input)
                  id="spaceMatterPort"
                  label="ONBOARDING_SPACE_MATTERPORT"
                  onChange={[Function]}
                  type="text"
                  value=""
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dNLxif",
                          "isStatic": false,
                          "lastClassName": "goihLt",
                          "rules": Array [
                            "
  width: 100%;
  margin-top: 20px;
",
                          ],
                        },
                        "displayName": "Styled(Input)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dNLxif",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    id="spaceMatterPort"
                    label="ONBOARDING_SPACE_MATTERPORT"
                    onChange={[Function]}
                    type="text"
                    value=""
                  >
                    <Input
                      className="sc-dNLxif goihLt"
                      id="spaceMatterPort"
                      label="ONBOARDING_SPACE_MATTERPORT"
                      onChange={[Function]}
                      type="text"
                      value=""
                    >
                      <styled.div
                        className="sc-dNLxif goihLt"
                      >
                        <StyledComponent
                          className="sc-dNLxif goihLt"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "djDvul",
                                "rules": Array [
                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-htpNat djDvul sc-dNLxif goihLt"
                          >
                            <label
                              htmlFor="spaceMatterPort"
                            >
                              ONBOARDING_SPACE_MATTERPORT
                            </label>
                            <styled.input
                              id="spaceMatterPort"
                              onChange={[Function]}
                              type="text"
                              value=""
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "aiwDT",
                                      "rules": Array [
                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                        [Function],
                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                        [Function],
                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                        [Function],
                                        ";
    border: 1px solid ",
                                        [Function],
                                        ";
  }
",
                                      ],
                                    },
                                    "displayName": "styled.input",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": "input",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                id="spaceMatterPort"
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <input
                                  className="sc-bxivhb aiwDT"
                                  id="spaceMatterPort"
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                />
                              </StyledComponent>
                            </styled.input>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-ifAKCX",
                                      "isStatic": false,
                                      "lastClassName": "hmksNE",
                                      "rules": Array [
                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-ifAKCX",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-ifAKCX hmksNE"
                                />
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Input>
                  </StyledComponent>
                </Styled(Input)>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hEsumM",
              "isStatic": false,
              "lastClassName": "bxuiAR",
              "rules": Array [
                "
  margin-bottom: 50px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hEsumM",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-hEsumM bxuiAR"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-jbKcbu",
                    "isStatic": false,
                    "lastClassName": "dnaifA",
                    "rules": Array [
                      "
  max-width: 516px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-jbKcbu",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-jbKcbu dnaifA"
              >
                <SpaceAvailabilityFixed
                  errors={Object {}}
                  fields={
                    Object {
                      "availabilityFixed": "Wed Jan 01 2020 00:00:00 GMT+0000 (Greenwich Mean Time)",
                      "months": "",
                      "spaceDescription": "",
                      "spaceFloor": "",
                      "spaceFloored": "",
                      "spaceHighlights": "",
                      "spaceMatterPort": "",
                      "spaceName": "",
                      "spaceRent": "",
                      "spaceServices": "0",
                      "spaceServicesNotNegotiable": false,
                      "spaceSize": "",
                      "spaceSizeCommon": "",
                      "use": "",
                    }
                  }
                  setFields={[Function]}
                >
                  <Styled(styled.h4)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gqjmRU",
                            "isStatic": false,
                            "lastClassName": "bsNnJl",
                            "rules": Array [
                              "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                              "
  margin-bottom: 0;
",
                            ],
                          },
                          "displayName": "Styled(styled.h4)",
                          "foldedComponentIds": Array [
                            "sc-bwzfXH",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-gqjmRU",
                          "target": "h4",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h4
                        className="sc-bwzfXH sc-gqjmRU bsNnJl"
                      >
                        ONBOARDING_SPACE_AVAILABILITY_FIXED_TITLE
                      </h4>
                    </StyledComponent>
                  </Styled(styled.h4)>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gZMcBi",
                            "isStatic": false,
                            "lastClassName": "SqEVs",
                            "rules": Array [
                              "
  width: 100%;
  display: flex;
  margin-bottom: 50px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gZMcBi",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-gZMcBi SqEVs"
                      >
                        <Styled(Styled(Component))
                          disablePast={true}
                          id="availabilityFixed"
                          label="ONBOARDING_SPACE_AVAILABILITY"
                          onChange={[Function]}
                          value={2020-01-01T00:00:00.000Z}
                        >
                          <StyledComponent
                            disablePast={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-fjdhpX",
                                  "isStatic": false,
                                  "lastClassName": "iHrbJt",
                                  "rules": Array [
                                    "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                    "
  margin-top: 20px;
  flex-grow: 1;
",
                                  ],
                                },
                                "displayName": "Styled(Styled(Component))",
                                "foldedComponentIds": Array [
                                  "sc-iwsKbI",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-fjdhpX",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="availabilityFixed"
                            label="ONBOARDING_SPACE_AVAILABILITY"
                            onChange={[Function]}
                            value={2020-01-01T00:00:00.000Z}
                          >
                            <Component
                              className="sc-iwsKbI sc-fjdhpX iHrbJt"
                              disablePast={true}
                              id="availabilityFixed"
                              label="ONBOARDING_SPACE_AVAILABILITY"
                              onChange={[Function]}
                              value={2020-01-01T00:00:00.000Z}
                            >
                              <styled.div
                                className="sc-iwsKbI sc-fjdhpX iHrbJt"
                                focusOn={false}
                              >
                                <StyledComponent
                                  className="sc-iwsKbI sc-fjdhpX iHrbJt"
                                  focusOn={false}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dnqmqq",
                                        "isStatic": false,
                                        "lastClassName": "kuuTPS",
                                        "rules": Array [
                                          "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                          [Function],
                                          ";
  }
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dnqmqq",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-dnqmqq kuuTPS sc-iwsKbI sc-fjdhpX iHrbJt"
                                  >
                                    <label>
                                      ONBOARDING_SPACE_AVAILABILITY
                                    </label>
                                    <MuiPickersUtilsProvider
                                      locale={
                                        Object {
                                          "code": "en-GB",
                                          "formatDistance": [Function],
                                          "formatLong": Object {
                                            "date": [Function],
                                            "dateTime": [Function],
                                            "time": [Function],
                                          },
                                          "formatRelative": [Function],
                                          "localize": Object {
                                            "day": [Function],
                                            "dayPeriod": [Function],
                                            "era": [Function],
                                            "month": [Function],
                                            "ordinalNumber": [Function],
                                            "quarter": [Function],
                                          },
                                          "match": Object {
                                            "day": [Function],
                                            "dayPeriod": [Function],
                                            "era": [Function],
                                            "month": [Function],
                                            "ordinalNumber": [Function],
                                            "quarter": [Function],
                                          },
                                          "options": Object {
                                            "firstWeekContainsDate": 4,
                                            "weekStartsOn": 1,
                                          },
                                        }
                                      }
                                      utils={[Function]}
                                    >
                                      <PickerWithState
                                        InputLabelProps={
                                          Object {
                                            "error": false,
                                            "shrink": false,
                                          }
                                        }
                                        allowKeyboardControl={true}
                                        autoOk={true}
                                        disablePast={true}
                                        disableToolbar={true}
                                        format="yyyy-MM-dd"
                                        id="availabilityFixed"
                                        inputVariant="outlined"
                                        invalidDateMessage="Invalid Date Format"
                                        keyboardIcon={
                                          <img
                                            alt="open calendar"
                                            src="calendar.svg"
                                          />
                                        }
                                        maxDate={2100-01-01T00:00:00.000Z}
                                        maxDateMessage="Date should not be after maximal date"
                                        minDate={1900-01-01T00:00:00.000Z}
                                        minDateMessage="Date should not be before minimal date"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        openTo="date"
                                        value={2020-01-01T00:00:00.000Z}
                                        variant="inline"
                                        views={
                                          Array [
                                            "year",
                                            "date",
                                          ]
                                        }
                                      >
                                        <Wrapper
                                          DateInputProps={
                                            Object {
                                              "format": "yyyy-MM-dd",
                                              "inputValue": "2020-01-01",
                                              "onChange": [Function],
                                              "openPicker": [Function],
                                              "validationError": "",
                                            }
                                          }
                                          InputComponent={[Function]}
                                          InputLabelProps={
                                            Object {
                                              "error": false,
                                              "shrink": false,
                                            }
                                          }
                                          format="yyyy-MM-dd"
                                          id="availabilityFixed"
                                          inputVariant="outlined"
                                          keyboardIcon={
                                            <img
                                              alt="open calendar"
                                              src="calendar.svg"
                                            />
                                          }
                                          onAccept={[Function]}
                                          onBlur={[Function]}
                                          onClear={[Function]}
                                          onDismiss={[Function]}
                                          onFocus={[Function]}
                                          onSetToday={[Function]}
                                          open={false}
                                          variant="inline"
                                        >
                                          <InlineWrapper
                                            DateInputProps={
                                              Object {
                                                "format": "yyyy-MM-dd",
                                                "inputValue": "2020-01-01",
                                                "onChange": [Function],
                                                "openPicker": [Function],
                                                "validationError": "",
                                              }
                                            }
                                            InputComponent={[Function]}
                                            InputLabelProps={
                                              Object {
                                                "error": false,
                                                "shrink": false,
                                              }
                                            }
                                            format="yyyy-MM-dd"
                                            id="availabilityFixed"
                                            inputVariant="outlined"
                                            keyboardIcon={
                                              <img
                                                alt="open calendar"
                                                src="calendar.svg"
                                              />
                                            }
                                            onAccept={[Function]}
                                            onBlur={[Function]}
                                            onClear={[Function]}
                                            onDismiss={[Function]}
                                            onFocus={[Function]}
                                            onSetToday={[Function]}
                                            open={false}
                                          >
                                            <KeyboardDateInput
                                              InputLabelProps={
                                                Object {
                                                  "error": false,
                                                  "shrink": false,
                                                }
                                              }
                                              format="yyyy-MM-dd"
                                              id="availabilityFixed"
                                              inputRef={
                                                Object {
                                                  "current": <input
                                                    aria-invalid="false"
                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                    id="availabilityFixed"
                                                    type="text"
                                                    value="2020-01-01"
                                                  />,
                                                }
                                              }
                                              inputValue="2020-01-01"
                                              inputVariant="outlined"
                                              keyboardIcon={
                                                <img
                                                  alt="open calendar"
                                                  src="calendar.svg"
                                                />
                                              }
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              openPicker={[Function]}
                                              validationError=""
                                            >
                                              <Rifm
                                                format={[Function]}
                                                key="____-__-__"
                                                onChange={[Function]}
                                                refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                value="2020-01-01"
                                              >
                                                <WithStyles(ForwardRef(TextField))
                                                  InputLabelProps={
                                                    Object {
                                                      "error": false,
                                                      "shrink": false,
                                                    }
                                                  }
                                                  InputProps={
                                                    Object {
                                                      "endAdornment": <ForwardRef(WithStyles)
                                                        position="end"
                                                      >
                                                        <ForwardRef(WithStyles)
                                                          onClick={[Function]}
                                                        >
                                                          <img
                                                            alt="open calendar"
                                                            src="calendar.svg"
                                                          />
                                                        </ForwardRef(WithStyles)>
                                                      </ForwardRef(WithStyles)>,
                                                    }
                                                  }
                                                  error={false}
                                                  helperText=""
                                                  id="availabilityFixed"
                                                  inputRef={
                                                    Object {
                                                      "current": <input
                                                        aria-invalid="false"
                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                        id="availabilityFixed"
                                                        type="text"
                                                        value="2020-01-01"
                                                      />,
                                                    }
                                                  }
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  value="2020-01-01"
                                                  variant="outlined"
                                                >
                                                  <ForwardRef(TextField)
                                                    InputLabelProps={
                                                      Object {
                                                        "error": false,
                                                        "shrink": false,
                                                      }
                                                    }
                                                    InputProps={
                                                      Object {
                                                        "endAdornment": <ForwardRef(WithStyles)
                                                          position="end"
                                                        >
                                                          <ForwardRef(WithStyles)
                                                            onClick={[Function]}
                                                          >
                                                            <img
                                                              alt="open calendar"
                                                              src="calendar.svg"
                                                            />
                                                          </ForwardRef(WithStyles)>
                                                        </ForwardRef(WithStyles)>,
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "root": "MuiTextField-root",
                                                      }
                                                    }
                                                    error={false}
                                                    helperText=""
                                                    id="availabilityFixed"
                                                    inputRef={
                                                      Object {
                                                        "current": <input
                                                          aria-invalid="false"
                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                          id="availabilityFixed"
                                                          type="text"
                                                          value="2020-01-01"
                                                        />,
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    value="2020-01-01"
                                                    variant="outlined"
                                                  >
                                                    <WithStyles(ForwardRef(FormControl))
                                                      className="MuiTextField-root"
                                                      color="primary"
                                                      disabled={false}
                                                      error={false}
                                                      fullWidth={false}
                                                      required={false}
                                                      variant="outlined"
                                                    >
                                                      <ForwardRef(FormControl)
                                                        className="MuiTextField-root"
                                                        classes={
                                                          Object {
                                                            "fullWidth": "MuiFormControl-fullWidth",
                                                            "marginDense": "MuiFormControl-marginDense",
                                                            "marginNormal": "MuiFormControl-marginNormal",
                                                            "root": "MuiFormControl-root",
                                                          }
                                                        }
                                                        color="primary"
                                                        disabled={false}
                                                        error={false}
                                                        fullWidth={false}
                                                        required={false}
                                                        variant="outlined"
                                                      >
                                                        <div
                                                          className="MuiFormControl-root MuiTextField-root"
                                                        >
                                                          <WithStyles(ForwardRef(OutlinedInput))
                                                            autoFocus={false}
                                                            endAdornment={
                                                              <ForwardRef(WithStyles)
                                                                position="end"
                                                              >
                                                                <ForwardRef(WithStyles)
                                                                  onClick={[Function]}
                                                                >
                                                                  <img
                                                                    alt="open calendar"
                                                                    src="calendar.svg"
                                                                  />
                                                                </ForwardRef(WithStyles)>
                                                              </ForwardRef(WithStyles)>
                                                            }
                                                            fullWidth={false}
                                                            id="availabilityFixed"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                  id="availabilityFixed"
                                                                  type="text"
                                                                  value="2020-01-01"
                                                                />,
                                                              }
                                                            }
                                                            labelWidth={0}
                                                            multiline={false}
                                                            notched={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            value="2020-01-01"
                                                          >
                                                            <ForwardRef(OutlinedInput)
                                                              autoFocus={false}
                                                              classes={
                                                                Object {
                                                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                  "disabled": "Mui-disabled",
                                                                  "error": "Mui-error",
                                                                  "focused": "Mui-focused",
                                                                  "input": "MuiOutlinedInput-input",
                                                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                  "marginDense": "MuiOutlinedInput-marginDense",
                                                                  "multiline": "MuiOutlinedInput-multiline",
                                                                  "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                  "root": "MuiOutlinedInput-root",
                                                                }
                                                              }
                                                              endAdornment={
                                                                <ForwardRef(WithStyles)
                                                                  position="end"
                                                                >
                                                                  <ForwardRef(WithStyles)
                                                                    onClick={[Function]}
                                                                  >
                                                                    <img
                                                                      alt="open calendar"
                                                                      src="calendar.svg"
                                                                    />
                                                                  </ForwardRef(WithStyles)>
                                                                </ForwardRef(WithStyles)>
                                                              }
                                                              fullWidth={false}
                                                              id="availabilityFixed"
                                                              inputRef={
                                                                Object {
                                                                  "current": <input
                                                                    aria-invalid="false"
                                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                    id="availabilityFixed"
                                                                    type="text"
                                                                    value="2020-01-01"
                                                                  />,
                                                                }
                                                              }
                                                              labelWidth={0}
                                                              multiline={false}
                                                              notched={false}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              value="2020-01-01"
                                                            >
                                                              <WithStyles(ForwardRef(InputBase))
                                                                autoFocus={false}
                                                                classes={
                                                                  Object {
                                                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                    "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "focused": "Mui-focused",
                                                                    "input": "MuiOutlinedInput-input",
                                                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                    "marginDense": "MuiOutlinedInput-marginDense",
                                                                    "multiline": "MuiOutlinedInput-multiline",
                                                                    "notchedOutline": null,
                                                                    "root": "MuiOutlinedInput-root",
                                                                  }
                                                                }
                                                                endAdornment={
                                                                  <ForwardRef(WithStyles)
                                                                    position="end"
                                                                  >
                                                                    <ForwardRef(WithStyles)
                                                                      onClick={[Function]}
                                                                    >
                                                                      <img
                                                                        alt="open calendar"
                                                                        src="calendar.svg"
                                                                      />
                                                                    </ForwardRef(WithStyles)>
                                                                  </ForwardRef(WithStyles)>
                                                                }
                                                                fullWidth={false}
                                                                id="availabilityFixed"
                                                                inputComponent="input"
                                                                inputRef={
                                                                  Object {
                                                                    "current": <input
                                                                      aria-invalid="false"
                                                                      class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                      id="availabilityFixed"
                                                                      type="text"
                                                                      value="2020-01-01"
                                                                    />,
                                                                  }
                                                                }
                                                                multiline={false}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                renderSuffix={[Function]}
                                                                type="text"
                                                                value="2020-01-01"
                                                              >
                                                                <ForwardRef(InputBase)
                                                                  autoFocus={false}
                                                                  classes={
                                                                    Object {
                                                                      "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                      "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                      "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                      "disabled": "Mui-disabled Mui-disabled",
                                                                      "error": "Mui-error Mui-error",
                                                                      "focused": "Mui-focused Mui-focused",
                                                                      "formControl": "MuiInputBase-formControl",
                                                                      "fullWidth": "MuiInputBase-fullWidth",
                                                                      "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                      "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                      "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                      "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                      "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                    }
                                                                  }
                                                                  endAdornment={
                                                                    <ForwardRef(WithStyles)
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(WithStyles)
                                                                        onClick={[Function]}
                                                                      >
                                                                        <img
                                                                          alt="open calendar"
                                                                          src="calendar.svg"
                                                                        />
                                                                      </ForwardRef(WithStyles)>
                                                                    </ForwardRef(WithStyles)>
                                                                  }
                                                                  fullWidth={false}
                                                                  id="availabilityFixed"
                                                                  inputComponent="input"
                                                                  inputRef={
                                                                    Object {
                                                                      "current": <input
                                                                        aria-invalid="false"
                                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                        id="availabilityFixed"
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      />,
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  renderSuffix={[Function]}
                                                                  type="text"
                                                                  value="2020-01-01"
                                                                >
                                                                  <div
                                                                    className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <input
                                                                      aria-invalid={false}
                                                                      autoFocus={false}
                                                                      className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                      disabled={false}
                                                                      id="availabilityFixed"
                                                                      onAnimationStart={[Function]}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      required={false}
                                                                      type="text"
                                                                      value="2020-01-01"
                                                                    />
                                                                    <WithStyles(ForwardRef(InputAdornment))
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(InputAdornment)
                                                                        classes={
                                                                          Object {
                                                                            "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                            "filled": "MuiInputAdornment-filled",
                                                                            "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                            "marginDense": "MuiInputAdornment-marginDense",
                                                                            "positionEnd": "MuiInputAdornment-positionEnd",
                                                                            "positionStart": "MuiInputAdornment-positionStart",
                                                                            "root": "MuiInputAdornment-root",
                                                                          }
                                                                        }
                                                                        position="end"
                                                                      >
                                                                        <div
                                                                          className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                        >
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            onClick={[Function]}
                                                                          >
                                                                            <ForwardRef(IconButton)
                                                                              classes={
                                                                                Object {
                                                                                  "colorInherit": "MuiIconButton-colorInherit",
                                                                                  "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                  "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                  "disabled": "Mui-disabled",
                                                                                  "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                  "edgeStart": "MuiIconButton-edgeStart",
                                                                                  "label": "MuiIconButton-label",
                                                                                  "root": "MuiIconButton-root",
                                                                                  "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                }
                                                                              }
                                                                              onClick={[Function]}
                                                                            >
                                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                                centerRipple={true}
                                                                                className="MuiIconButton-root"
                                                                                disabled={false}
                                                                                focusRipple={true}
                                                                                onClick={[Function]}
                                                                              >
                                                                                <ForwardRef(ButtonBase)
                                                                                  centerRipple={true}
                                                                                  className="MuiIconButton-root"
                                                                                  classes={
                                                                                    Object {
                                                                                      "disabled": "Mui-disabled",
                                                                                      "focusVisible": "Mui-focusVisible",
                                                                                      "root": "MuiButtonBase-root",
                                                                                    }
                                                                                  }
                                                                                  disabled={false}
                                                                                  focusRipple={true}
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <button
                                                                                    className="MuiButtonBase-root MuiIconButton-root"
                                                                                    disabled={false}
                                                                                    onBlur={[Function]}
                                                                                    onClick={[Function]}
                                                                                    onDragLeave={[Function]}
                                                                                    onFocus={[Function]}
                                                                                    onKeyDown={[Function]}
                                                                                    onKeyUp={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseLeave={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                    onTouchEnd={[Function]}
                                                                                    onTouchMove={[Function]}
                                                                                    onTouchStart={[Function]}
                                                                                    tabIndex={0}
                                                                                    type="button"
                                                                                  >
                                                                                    <span
                                                                                      className="MuiIconButton-label"
                                                                                    >
                                                                                      <img
                                                                                        alt="open calendar"
                                                                                        src="calendar.svg"
                                                                                      />
                                                                                    </span>
                                                                                    <NoSsr>
                                                                                      <WithStyles(undefined)
                                                                                        center={true}
                                                                                      >
                                                                                        <ForwardRef(TouchRipple)
                                                                                          center={true}
                                                                                          classes={
                                                                                            Object {
                                                                                              "child": "MuiTouchRipple-child",
                                                                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                              "ripple": "MuiTouchRipple-ripple",
                                                                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                              "root": "MuiTouchRipple-root",
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <span
                                                                                            className="MuiTouchRipple-root"
                                                                                          >
                                                                                            <TransitionGroup
                                                                                              childFactory={[Function]}
                                                                                              component={null}
                                                                                              exit={true}
                                                                                            />
                                                                                          </span>
                                                                                        </ForwardRef(TouchRipple)>
                                                                                      </WithStyles(undefined)>
                                                                                    </NoSsr>
                                                                                  </button>
                                                                                </ForwardRef(ButtonBase)>
                                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                                            </ForwardRef(IconButton)>
                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                        </div>
                                                                      </ForwardRef(InputAdornment)>
                                                                    </WithStyles(ForwardRef(InputAdornment))>
                                                                    <WithStyles(ForwardRef(NotchedOutline))
                                                                      className="MuiOutlinedInput-notchedOutline"
                                                                      labelWidth={0}
                                                                      notched={false}
                                                                    >
                                                                      <ForwardRef(NotchedOutline)
                                                                        className="MuiOutlinedInput-notchedOutline"
                                                                        classes={
                                                                          Object {
                                                                            "legend": "PrivateNotchedOutline-legend-61",
                                                                            "root": "PrivateNotchedOutline-root-60",
                                                                          }
                                                                        }
                                                                        labelWidth={0}
                                                                        notched={false}
                                                                      >
                                                                        <fieldset
                                                                          aria-hidden={true}
                                                                          className="PrivateNotchedOutline-root-60 MuiOutlinedInput-notchedOutline"
                                                                          style={
                                                                            Object {
                                                                              "paddingLeft": 8,
                                                                            }
                                                                          }
                                                                        >
                                                                          <legend
                                                                            className="PrivateNotchedOutline-legend-61"
                                                                            style={
                                                                              Object {
                                                                                "width": 0.01,
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              dangerouslySetInnerHTML={
                                                                                Object {
                                                                                  "__html": "&#8203;",
                                                                                }
                                                                              }
                                                                            />
                                                                          </legend>
                                                                        </fieldset>
                                                                      </ForwardRef(NotchedOutline)>
                                                                    </WithStyles(ForwardRef(NotchedOutline))>
                                                                  </div>
                                                                </ForwardRef(InputBase)>
                                                              </WithStyles(ForwardRef(InputBase))>
                                                            </ForwardRef(OutlinedInput)>
                                                          </WithStyles(ForwardRef(OutlinedInput))>
                                                        </div>
                                                      </ForwardRef(FormControl)>
                                                    </WithStyles(ForwardRef(FormControl))>
                                                  </ForwardRef(TextField)>
                                                </WithStyles(ForwardRef(TextField))>
                                              </Rifm>
                                            </KeyboardDateInput>
                                            <WithStyles(ForwardRef(Popover))
                                              anchorOrigin={
                                                Object {
                                                  "horizontal": "center",
                                                  "vertical": "bottom",
                                                }
                                              }
                                              onClose={[Function]}
                                              open={false}
                                              transformOrigin={
                                                Object {
                                                  "horizontal": "center",
                                                  "vertical": "top",
                                                }
                                              }
                                            >
                                              <ForwardRef(Popover)
                                                anchorOrigin={
                                                  Object {
                                                    "horizontal": "center",
                                                    "vertical": "bottom",
                                                  }
                                                }
                                                classes={
                                                  Object {
                                                    "paper": "MuiPopover-paper",
                                                    "root": "MuiPopover-root",
                                                  }
                                                }
                                                onClose={[Function]}
                                                open={false}
                                                transformOrigin={
                                                  Object {
                                                    "horizontal": "center",
                                                    "vertical": "top",
                                                  }
                                                }
                                              >
                                                <ForwardRef(Modal)
                                                  BackdropProps={
                                                    Object {
                                                      "invisible": true,
                                                    }
                                                  }
                                                  className="MuiPopover-root"
                                                  onClose={[Function]}
                                                  open={false}
                                                />
                                              </ForwardRef(Popover)>
                                            </WithStyles(ForwardRef(Popover))>
                                          </InlineWrapper>
                                        </Wrapper>
                                      </PickerWithState>
                                    </MuiPickersUtilsProvider>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Component>
                          </StyledComponent>
                        </Styled(Styled(Component))>
                        <Styled(Input)
                          id="months"
                          isRight={true}
                          label="ONBOARDING_SPACE_MONTHS"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_MONTHS"
                          type="number"
                          value=""
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-VigVT",
                                  "isStatic": false,
                                  "lastClassName": "krhPsx",
                                  "rules": Array [
                                    "
  margin-top: 20px;
  flex-grow: 1;
  width: 50%;
  padding-left: ",
                                    [Function],
                                    ";
  label {
    white-space: nowrap;
  }
",
                                  ],
                                },
                                "displayName": "Styled(Input)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-VigVT",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="months"
                            isRight={true}
                            label="ONBOARDING_SPACE_MONTHS"
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_MONTHS"
                            type="number"
                            value=""
                          >
                            <Input
                              className="sc-VigVT krhPsx"
                              id="months"
                              isRight={true}
                              label="ONBOARDING_SPACE_MONTHS"
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_MONTHS"
                              type="number"
                              value=""
                            >
                              <styled.div
                                className="sc-VigVT krhPsx"
                              >
                                <StyledComponent
                                  className="sc-VigVT krhPsx"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htpNat",
                                        "isStatic": false,
                                        "lastClassName": "djDvul",
                                        "rules": Array [
                                          "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htpNat",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-htpNat djDvul sc-VigVT krhPsx"
                                  >
                                    <label
                                      htmlFor="months"
                                    >
                                      ONBOARDING_SPACE_MONTHS
                                    </label>
                                    <styled.input
                                      id="months"
                                      isRight={true}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_MONTHS"
                                      type="number"
                                      value=""
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-bxivhb",
                                              "isStatic": false,
                                              "lastClassName": "aiwDT",
                                              "rules": Array [
                                                "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                [Function],
                                                ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                [Function],
                                                ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                [Function],
                                                ";
    border: 1px solid ",
                                                [Function],
                                                ";
  }
",
                                              ],
                                            },
                                            "displayName": "styled.input",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-bxivhb",
                                            "target": "input",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        id="months"
                                        isRight={true}
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_MONTHS"
                                        type="number"
                                        value=""
                                      >
                                        <input
                                          className="sc-bxivhb aiwDT"
                                          id="months"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="ONBOARDING_PLACEHOLDER_MONTHS"
                                          type="number"
                                          value=""
                                        />
                                      </StyledComponent>
                                    </styled.input>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-ifAKCX",
                                              "isStatic": false,
                                              "lastClassName": "hmksNE",
                                              "rules": Array [
                                                "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-ifAKCX",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-ifAKCX hmksNE"
                                        />
                                      </StyledComponent>
                                    </styled.div>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Input>
                          </StyledComponent>
                        </Styled(Input)>
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <Styled(styled.h4)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gqjmRU",
                            "isStatic": false,
                            "lastClassName": "bsNnJl",
                            "rules": Array [
                              "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                              "
  margin-bottom: 0;
",
                            ],
                          },
                          "displayName": "Styled(styled.h4)",
                          "foldedComponentIds": Array [
                            "sc-bwzfXH",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-gqjmRU",
                          "target": "h4",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h4
                        className="sc-bwzfXH sc-gqjmRU bsNnJl"
                      >
                        ONBOARDING_SPACE_MONTHLY_PAYMENT
                      </h4>
                    </StyledComponent>
                  </Styled(styled.h4)>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gZMcBi",
                            "isStatic": false,
                            "lastClassName": "SqEVs",
                            "rules": Array [
                              "
  width: 100%;
  display: flex;
  margin-bottom: 50px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gZMcBi",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-gZMcBi SqEVs"
                      >
                        <Styled(Styled(Input))
                          id="spaceRent"
                          isSmall={true}
                          label="ONBOARDING_SPACE_RENT (Kr)"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_RENT"
                          type="number"
                          value=""
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jTzLTM",
                                  "isStatic": false,
                                  "lastClassName": "cSnvDp",
                                  "rules": Array [
                                    "
  margin-top: 20px;
  flex-grow: 1;
  width: 50%;
  padding-left: ",
                                    [Function],
                                    ";
  label {
    white-space: nowrap;
  }
",
                                    "
  padding-right: 10px;
  width: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "Styled(Styled(Input))",
                                "foldedComponentIds": Array [
                                  "sc-VigVT",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-jTzLTM",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="spaceRent"
                            isSmall={true}
                            label="ONBOARDING_SPACE_RENT (Kr)"
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_RENT"
                            type="number"
                            value=""
                          >
                            <Input
                              className="sc-VigVT sc-jTzLTM jHKzqw"
                              id="spaceRent"
                              isSmall={true}
                              label="ONBOARDING_SPACE_RENT (Kr)"
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_RENT"
                              type="number"
                              value=""
                            >
                              <styled.div
                                className="sc-VigVT sc-jTzLTM jHKzqw"
                              >
                                <StyledComponent
                                  className="sc-VigVT sc-jTzLTM jHKzqw"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htpNat",
                                        "isStatic": false,
                                        "lastClassName": "djDvul",
                                        "rules": Array [
                                          "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htpNat",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-htpNat djDvul sc-VigVT sc-jTzLTM jHKzqw"
                                  >
                                    <label
                                      htmlFor="spaceRent"
                                    >
                                      ONBOARDING_SPACE_RENT (Kr)
                                    </label>
                                    <styled.input
                                      id="spaceRent"
                                      isSmall={true}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_RENT"
                                      type="number"
                                      value=""
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-bxivhb",
                                              "isStatic": false,
                                              "lastClassName": "aiwDT",
                                              "rules": Array [
                                                "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                [Function],
                                                ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                [Function],
                                                ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                [Function],
                                                ";
    border: 1px solid ",
                                                [Function],
                                                ";
  }
",
                                              ],
                                            },
                                            "displayName": "styled.input",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-bxivhb",
                                            "target": "input",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        id="spaceRent"
                                        isSmall={true}
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_RENT"
                                        type="number"
                                        value=""
                                      >
                                        <input
                                          className="sc-bxivhb aiwDT"
                                          id="spaceRent"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="ONBOARDING_PLACEHOLDER_RENT"
                                          type="number"
                                          value=""
                                        />
                                      </StyledComponent>
                                    </styled.input>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-ifAKCX",
                                              "isStatic": false,
                                              "lastClassName": "hmksNE",
                                              "rules": Array [
                                                "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-ifAKCX",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-ifAKCX hmksNE"
                                        />
                                      </StyledComponent>
                                    </styled.div>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Input>
                          </StyledComponent>
                        </Styled(Styled(Input))>
                        <Styled(Styled(Input))
                          id="spaceServices"
                          label="ONBOARDING_SPACE_SERVICES (Kr)"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_MONTHLY_SERVICE"
                          type="number"
                          value="0"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jTzLTM",
                                  "isStatic": false,
                                  "lastClassName": "cSnvDp",
                                  "rules": Array [
                                    "
  margin-top: 20px;
  flex-grow: 1;
  width: 50%;
  padding-left: ",
                                    [Function],
                                    ";
  label {
    white-space: nowrap;
  }
",
                                    "
  padding-right: 10px;
  width: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "Styled(Styled(Input))",
                                "foldedComponentIds": Array [
                                  "sc-VigVT",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-jTzLTM",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="spaceServices"
                            label="ONBOARDING_SPACE_SERVICES (Kr)"
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_MONTHLY_SERVICE"
                            type="number"
                            value="0"
                          >
                            <Input
                              className="sc-VigVT sc-jTzLTM cSnvDp"
                              id="spaceServices"
                              label="ONBOARDING_SPACE_SERVICES (Kr)"
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_MONTHLY_SERVICE"
                              type="number"
                              value="0"
                            >
                              <styled.div
                                className="sc-VigVT sc-jTzLTM cSnvDp"
                              >
                                <StyledComponent
                                  className="sc-VigVT sc-jTzLTM cSnvDp"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htpNat",
                                        "isStatic": false,
                                        "lastClassName": "djDvul",
                                        "rules": Array [
                                          "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htpNat",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-htpNat djDvul sc-VigVT sc-jTzLTM cSnvDp"
                                  >
                                    <label
                                      htmlFor="spaceServices"
                                    >
                                      ONBOARDING_SPACE_SERVICES (Kr)
                                    </label>
                                    <styled.input
                                      id="spaceServices"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_MONTHLY_SERVICE"
                                      type="number"
                                      value="0"
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-bxivhb",
                                              "isStatic": false,
                                              "lastClassName": "aiwDT",
                                              "rules": Array [
                                                "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                [Function],
                                                ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                [Function],
                                                ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                [Function],
                                                ";
    border: 1px solid ",
                                                [Function],
                                                ";
  }
",
                                              ],
                                            },
                                            "displayName": "styled.input",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-bxivhb",
                                            "target": "input",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        id="spaceServices"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="ONBOARDING_PLACEHOLDER_MONTHLY_SERVICE"
                                        type="number"
                                        value="0"
                                      >
                                        <input
                                          className="sc-bxivhb aiwDT"
                                          id="spaceServices"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="ONBOARDING_PLACEHOLDER_MONTHLY_SERVICE"
                                          type="number"
                                          value="0"
                                        />
                                      </StyledComponent>
                                    </styled.input>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-ifAKCX",
                                              "isStatic": false,
                                              "lastClassName": "hmksNE",
                                              "rules": Array [
                                                "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-ifAKCX",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-ifAKCX hmksNE"
                                        />
                                      </StyledComponent>
                                    </styled.div>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Input>
                          </StyledComponent>
                        </Styled(Styled(Input))>
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <Styled(styled.h4)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gqjmRU",
                            "isStatic": false,
                            "lastClassName": "bsNnJl",
                            "rules": Array [
                              "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                              "
  margin-bottom: 0;
",
                            ],
                          },
                          "displayName": "Styled(styled.h4)",
                          "foldedComponentIds": Array [
                            "sc-bwzfXH",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-gqjmRU",
                          "target": "h4",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h4
                        className="sc-bwzfXH sc-gqjmRU bsNnJl"
                      >
                        ONBOARDING_SPACE_YEARLY_PRICE_PER_SIZE
                      </h4>
                    </StyledComponent>
                  </Styled(styled.h4)>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jzJRlG",
                            "isStatic": false,
                            "lastClassName": "kKvFuo",
                            "rules": Array [
                              "
  text-align: left;
  padding-top: 10px;
  font-weight: 500;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jzJRlG",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-jzJRlG kKvFuo"
                      >
                        0
                      </div>
                    </StyledComponent>
                  </styled.div>
                </SpaceAvailabilityFixed>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hEsumM",
              "isStatic": false,
              "lastClassName": "bxuiAR",
              "rules": Array [
                "
  margin-bottom: 50px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hEsumM",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-hEsumM bxuiAR"
        >
          <Styled(styled.h3)>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ktHwxA",
                    "isStatic": false,
                    "lastClassName": "kvRFIv",
                    "rules": Array [
                      "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                    ],
                  },
                  "displayName": "Styled(styled.h3)",
                  "foldedComponentIds": Array [
                    "sc-bdVaJa",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-ktHwxA",
                  "target": "h3",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <h3
                className="sc-bdVaJa sc-ktHwxA kvRFIv"
              >
                ONBOARDING_SPACE_PHOTOS
              </h3>
            </StyledComponent>
          </Styled(styled.h3)>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kafWEX",
                    "isStatic": false,
                    "lastClassName": "hIuzBi",
                    "rules": Array [
                      "
  padding: 0 0 20px 0;
  color: #828286
  font-size: 14px;
  font-weight: 400;
  line-height: 18px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kafWEX",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kafWEX hIuzBi"
              >
                ONBOARDING_PHOTOS_INFO
              </div>
            </StyledComponent>
          </styled.div>
          <Styled(Component)
            accept="image/jpeg, image/png"
            isImage={true}
            items={Array []}
            setItems={[Function]}
            setUploaded={[Function]}
          >
            <StyledComponent
              accept="image/jpeg, image/png"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hzDkRC",
                    "isStatic": false,
                    "lastClassName": "kQBdIX",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
",
                    ],
                  },
                  "displayName": "Styled(Component)",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hzDkRC",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isImage={true}
              items={Array []}
              setItems={[Function]}
              setUploaded={[Function]}
            >
              <Component
                accept="image/jpeg, image/png"
                className="sc-hzDkRC kQBdIX"
                isImage={true}
                items={Array []}
                setItems={[Function]}
                setUploaded={[Function]}
              >
                <div
                  className="sc-hzDkRC kQBdIX"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bRBYWo",
                            "isStatic": false,
                            "lastClassName": "pIQHV",
                            "rules": Array [
                              "
  display: inline-block;
  > div {
    border-radius: 4px;
    border: 1px solid #ced4da;
    box-sizing: border-box;
    width: 194px;
    height: 165px;
    :hover {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
    &.isDragging {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bRBYWo",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bRBYWo pIQHV"
                      >
                        <div
                          className=""
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragEnter={[Function]}
                          onDragLeave={[Function]}
                          onDragOver={[Function]}
                          onDrop={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          tabIndex={0}
                        >
                          <input
                            accept="image/jpeg, image/png"
                            autoComplete="off"
                            multiple={true}
                            onChange={[Function]}
                            onClick={[Function]}
                            style={
                              Object {
                                "display": "none",
                              }
                            }
                            tabIndex={-1}
                            type="file"
                          />
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cIShpX",
                                    "isStatic": false,
                                    "lastClassName": "dwjWlz",
                                    "rules": Array [
                                      "
  padding: 20px;
  text-align: center;
  > p {
    font-size: 18px;
    font-weight: 500;
    margin-top: 5px;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cIShpX",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-cIShpX dwjWlz"
                              >
                                <Plus2
                                  size="3em"
                                >
                                  <svg
                                    height="3em"
                                    version="1.1"
                                    viewBox="0 0 34 34"
                                    width="3em"
                                  >
                                    <g
                                      fill="none"
                                      fillRule="evenodd"
                                      id="UI-KIT"
                                      stroke="#6CB9D5"
                                      strokeWidth="1"
                                    >
                                      <g
                                        fill="#6CB9D5"
                                        fillRule="nonzero"
                                        id="icons"
                                        transform="translate(-265.000000, -325.000000)"
                                      >
                                        <path
                                          d="M293.618972,330.351591 C293.150185,329.882803 292.390811,329.882803 291.922136,330.351591 L281.970506,340.303232 L272.018989,330.351703 C271.550202,329.882916 270.790828,329.882916 270.322153,330.351703 C269.853366,330.820491 269.853366,331.579866 270.322153,332.048541 L280.27367,342.00007 L270.322153,351.951599 C269.853366,352.420387 269.853366,353.179762 270.322153,353.648437 C270.55649,353.882775 270.863615,354 271.170627,354 C271.47764,354 271.784652,353.882775 272.019102,353.648437 L281.970506,343.696908 L291.922024,353.648437 C292.156361,353.882775 292.463486,354 292.770498,354 C293.07751,354 293.384523,353.882775 293.618972,353.648437 C294.08776,353.17965 294.08776,352.420274 293.618972,351.951599 L283.667343,342.00007 L293.61886,332.048541 C294.087647,331.579754 294.087647,330.820378 293.618972,330.351591 Z"
                                          id="add"
                                          transform="translate(281.970563, 342.000000) rotate(45.000000) translate(-281.970563, -342.000000) "
                                        />
                                      </g>
                                    </g>
                                  </svg>
                                </Plus2>
                                <p>
                                  ONBOARDING_PHOTOS_ADD
                                  <br />
                                  ONBOARDING_PHOTOS_DRAG
                                </p>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </Component>
            </StyledComponent>
          </Styled(Component)>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hEsumM",
              "isStatic": false,
              "lastClassName": "bxuiAR",
              "rules": Array [
                "
  margin-bottom: 50px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hEsumM",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-hEsumM bxuiAR"
        >
          <Styled(styled.h3)>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ktHwxA",
                    "isStatic": false,
                    "lastClassName": "kvRFIv",
                    "rules": Array [
                      "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                    ],
                  },
                  "displayName": "Styled(styled.h3)",
                  "foldedComponentIds": Array [
                    "sc-bdVaJa",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-ktHwxA",
                  "target": "h3",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <h3
                className="sc-bdVaJa sc-ktHwxA kvRFIv"
              >
                ONBOARDING_SPACE_FLOORPLAN
              </h3>
            </StyledComponent>
          </Styled(styled.h3)>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kafWEX",
                    "isStatic": false,
                    "lastClassName": "hIuzBi",
                    "rules": Array [
                      "
  padding: 0 0 20px 0;
  color: #828286
  font-size: 14px;
  font-weight: 400;
  line-height: 18px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kafWEX",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kafWEX hIuzBi"
              >
                ONBOARDING_FLOORPLAN_INFO
              </div>
            </StyledComponent>
          </styled.div>
          <Styled(Component)
            accept="image/jpeg, image/png, application/pdf, .bim"
            isImage={true}
            items={Array []}
            setItems={[Function]}
            setUploaded={[Function]}
          >
            <StyledComponent
              accept="image/jpeg, image/png, application/pdf, .bim"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hzDkRC",
                    "isStatic": false,
                    "lastClassName": "kQBdIX",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
",
                    ],
                  },
                  "displayName": "Styled(Component)",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hzDkRC",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isImage={true}
              items={Array []}
              setItems={[Function]}
              setUploaded={[Function]}
            >
              <Component
                accept="image/jpeg, image/png, application/pdf, .bim"
                className="sc-hzDkRC kQBdIX"
                isImage={true}
                items={Array []}
                setItems={[Function]}
                setUploaded={[Function]}
              >
                <div
                  className="sc-hzDkRC kQBdIX"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bRBYWo",
                            "isStatic": false,
                            "lastClassName": "pIQHV",
                            "rules": Array [
                              "
  display: inline-block;
  > div {
    border-radius: 4px;
    border: 1px solid #ced4da;
    box-sizing: border-box;
    width: 194px;
    height: 165px;
    :hover {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
    &.isDragging {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bRBYWo",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bRBYWo pIQHV"
                      >
                        <div
                          className=""
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragEnter={[Function]}
                          onDragLeave={[Function]}
                          onDragOver={[Function]}
                          onDrop={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          tabIndex={0}
                        >
                          <input
                            accept="image/jpeg, image/png, application/pdf, .bim"
                            autoComplete="off"
                            multiple={true}
                            onChange={[Function]}
                            onClick={[Function]}
                            style={
                              Object {
                                "display": "none",
                              }
                            }
                            tabIndex={-1}
                            type="file"
                          />
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cIShpX",
                                    "isStatic": false,
                                    "lastClassName": "dwjWlz",
                                    "rules": Array [
                                      "
  padding: 20px;
  text-align: center;
  > p {
    font-size: 18px;
    font-weight: 500;
    margin-top: 5px;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cIShpX",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-cIShpX dwjWlz"
                              >
                                <Plus2
                                  size="3em"
                                >
                                  <svg
                                    height="3em"
                                    version="1.1"
                                    viewBox="0 0 34 34"
                                    width="3em"
                                  >
                                    <g
                                      fill="none"
                                      fillRule="evenodd"
                                      id="UI-KIT"
                                      stroke="#6CB9D5"
                                      strokeWidth="1"
                                    >
                                      <g
                                        fill="#6CB9D5"
                                        fillRule="nonzero"
                                        id="icons"
                                        transform="translate(-265.000000, -325.000000)"
                                      >
                                        <path
                                          d="M293.618972,330.351591 C293.150185,329.882803 292.390811,329.882803 291.922136,330.351591 L281.970506,340.303232 L272.018989,330.351703 C271.550202,329.882916 270.790828,329.882916 270.322153,330.351703 C269.853366,330.820491 269.853366,331.579866 270.322153,332.048541 L280.27367,342.00007 L270.322153,351.951599 C269.853366,352.420387 269.853366,353.179762 270.322153,353.648437 C270.55649,353.882775 270.863615,354 271.170627,354 C271.47764,354 271.784652,353.882775 272.019102,353.648437 L281.970506,343.696908 L291.922024,353.648437 C292.156361,353.882775 292.463486,354 292.770498,354 C293.07751,354 293.384523,353.882775 293.618972,353.648437 C294.08776,353.17965 294.08776,352.420274 293.618972,351.951599 L283.667343,342.00007 L293.61886,332.048541 C294.087647,331.579754 294.087647,330.820378 293.618972,330.351591 Z"
                                          id="add"
                                          transform="translate(281.970563, 342.000000) rotate(45.000000) translate(-281.970563, -342.000000) "
                                        />
                                      </g>
                                    </g>
                                  </svg>
                                </Plus2>
                                <p>
                                  ONBOARDING_FLOORPLAN_ADD
                                  <br />
                                  ONBOARDING_FLOORPLAN_DRAG
                                </p>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </Component>
            </StyledComponent>
          </Styled(Component)>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jbKcbu",
              "isStatic": false,
              "lastClassName": "dnaifA",
              "rules": Array [
                "
  max-width: 516px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jbKcbu",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-jbKcbu dnaifA"
        >
          <FitoutOptions
            space={
              Object {
                "availabilityFixed": 2020-01-01T00:00:00.000Z,
                "fitout": Array [
                  Object {
                    "amount": 1000,
                    "description": "FitOut1",
                    "name": "FitOut1",
                  },
                ],
                "fixedDesks": Object {
                  "availableFrom": 2020-01-01T00:00:00.000Z,
                  "currencyCode": "NOK",
                  "desks": 0,
                  "frequency": "Monthly",
                  "minLease": 0,
                  "price": 0,
                },
                "floorPlan": Array [],
                "hotDesks": Object {
                  "availableFrom": 2020-01-01T00:00:00.000Z,
                  "currencyCode": "NOK",
                  "desks": 0,
                  "frequency": "Monthly",
                  "minLease": 0,
                  "price": 0,
                },
                "id": "0",
                "images": Array [],
                "months": undefined,
                "servicedOffices": Array [],
                "spaceDescription": "",
                "spaceFloor": undefined,
                "spaceFloored": "",
                "spaceHighlights": "",
                "spaceMatterPort": "",
                "spaceName": "",
                "spaceRent": undefined,
                "spaceServices": undefined,
                "spaceServicesNotNegotiable": false,
                "spaceSize": undefined,
                "spaceSizeCommon": undefined,
                "status": 1,
                "type": "FIXED",
                "use": "",
              }
            }
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-kjoXOD",
                      "isStatic": false,
                      "lastClassName": "hpTAeq",
                      "rules": Array [],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-kjoXOD",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-kjoXOD hpTAeq"
                >
                  <styled.h3>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": false,
                            "lastClassName": "klePfV",
                            "rules": Array [
                              "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                            ],
                          },
                          "displayName": "styled.h3",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "h3",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h3
                        className="sc-bdVaJa klePfV"
                      >
                        ONBOARDING_FITOUT_OPTIONS_TITLE
                      </h3>
                    </StyledComponent>
                  </styled.h3>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kgAjT",
                            "isStatic": false,
                            "lastClassName": "hxjFim",
                            "rules": Array [
                              "
  color: #000000;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kgAjT",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kgAjT hxjFim"
                      >
                        ONBOARDING_FITOUT_OPTIONS_DESCRIPTION
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-cHGsZl",
                            "isStatic": false,
                            "lastClassName": "gBtFLr",
                            "rules": Array [
                              "
  display: flex;
  flex-wrap: wrap;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-cHGsZl",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-cHGsZl gBtFLr"
                      >
                        <styled.div
                          key="FitOut1"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-TOsTZ",
                                  "isStatic": false,
                                  "lastClassName": "jPcath",
                                  "rules": Array [
                                    "
  margin: 20px 0 0 0;
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
  border: 1px solid #dddddd;
  background-color: #f4f4f4;
  position: relative;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-TOsTZ",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-TOsTZ jPcath"
                            >
                              <Styled(ClearIcon)
                                fill="#000000"
                                onClick={[Function]}
                                strokeWidth="1"
                              >
                                <StyledComponent
                                  fill="#000000"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "compare": null,
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-cJSrbW",
                                        "isStatic": false,
                                        "lastClassName": "jXGTEQ",
                                        "rules": Array [
                                          "
  color: #000000;
  font-size: 15px;
  font-weight: 500;
  position: absolute;
  top: 10px;
  right: 10px;
  cursor: pointer;
  background-color: trasparent;
",
                                        ],
                                      },
                                      "displayName": "Styled(ClearIcon)",
                                      "foldedComponentIds": Array [],
                                      "muiName": "SvgIcon",
                                      "render": [Function],
                                      "styledComponentId": "sc-cJSrbW",
                                      "target": Object {
                                        "$$typeof": Symbol(react.memo),
                                        "compare": null,
                                        "displayName": "ClearIcon",
                                        "muiName": "SvgIcon",
                                        "type": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        },
                                      },
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  onClick={[Function]}
                                  strokeWidth="1"
                                >
                                  <ForwardRef
                                    className="sc-cJSrbW jXGTEQ"
                                    fill="#000000"
                                    onClick={[Function]}
                                    strokeWidth="1"
                                  >
                                    <WithStyles(ForwardRef(SvgIcon))
                                      className="sc-cJSrbW jXGTEQ"
                                      fill="#000000"
                                      onClick={[Function]}
                                      strokeWidth="1"
                                    >
                                      <ForwardRef(SvgIcon)
                                        className="sc-cJSrbW jXGTEQ"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                        fill="#000000"
                                        onClick={[Function]}
                                        strokeWidth="1"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root sc-cJSrbW jXGTEQ"
                                          fill="#000000"
                                          focusable="false"
                                          onClick={[Function]}
                                          role="presentation"
                                          strokeWidth="1"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef>
                                </StyledComponent>
                              </Styled(ClearIcon)>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-ksYbfQ",
                                        "isStatic": false,
                                        "lastClassName": "yxzHu",
                                        "rules": Array [
                                          "
  color: #000000;
  font-weight: 500;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-ksYbfQ",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-ksYbfQ yxzHu"
                                  >
                                    FitOut1
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-hmzhuo",
                                        "isStatic": false,
                                        "lastClassName": "gKrmQd",
                                        "rules": Array [
                                          "
  margin: 10px 0;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-hmzhuo",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-hmzhuo gKrmQd"
                                  >
                                    <HTMLContent
                                      html="FitOut1"
                                    >
                                      <div
                                        dangerouslySetInnerHTML={
                                          Object {
                                            "__html": "FitOut1",
                                          }
                                        }
                                      />
                                    </HTMLContent>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-frDJqD",
                                        "isStatic": false,
                                        "lastClassName": "glwHqD",
                                        "rules": Array [
                                          "
  color: #000000;
  font-weight: 500;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-frDJqD",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-frDJqD glwHqD"
                                  >
                                    1,000Kr
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <Styled(styled.button)
                    onClick={[Function]}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kvZOFW",
                            "isStatic": false,
                            "lastClassName": "kdLQzO",
                            "rules": Array [
                              "
  font-size: 14px;
  font-weight: 550;
  border: 1px solid #6cb9d5;
  color: #6cb9d5;
  background-color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                              "
  margin-top: 20px;
  box-sizing: border-box;
  svg {
    margin: 0px 5px -3px 0px;
  }
",
                            ],
                          },
                          "displayName": "Styled(styled.button)",
                          "foldedComponentIds": Array [
                            "sc-kAzzGY",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-kvZOFW",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <button
                        className="sc-kAzzGY sc-kvZOFW kdLQzO"
                        onClick={[Function]}
                      >
                        <Styled(Plus)
                          size="1.1em"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-hqyNC",
                                  "isStatic": false,
                                  "lastClassName": "iACWBZ",
                                  "rules": Array [
                                    "
  margin: -2px 5px;
",
                                  ],
                                },
                                "displayName": "Styled(Plus)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-hqyNC",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            size="1.1em"
                          >
                            <Plus
                              className="sc-hqyNC iACWBZ"
                              size="1.1em"
                            >
                              <svg
                                className="sc-hqyNC iACWBZ"
                                height="1.1em"
                                size="1.1em"
                                viewBox="0 0 18 17"
                                width="1.1em"
                              >
                                <g
                                  fill="none"
                                  fillRule="evenodd"
                                  stroke="#6CB9D5"
                                  strokeLinecap="round"
                                  strokeWidth={2}
                                >
                                  <path
                                    d="M9 1.6v13.8M1.64 8.5h14.72"
                                  />
                                </g>
                              </svg>
                            </Plus>
                          </StyledComponent>
                        </Styled(Plus)>
                        ONBOARDING_FITOUT_OPTIONS_ADD
                      </button>
                    </StyledComponent>
                  </Styled(styled.button)>
                </div>
              </StyledComponent>
            </styled.div>
          </FitoutOptions>
        </div>
      </StyledComponent>
    </styled.div>
    <NextBack
      back={
        Object {
          "label": "ONBOARDING_BACK",
          "onClick": [Function],
        }
      }
      next={
        Object {
          "label": "ONBOARDING_EDIT",
          "onClick": [Function],
        }
      }
    >
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jDwBTQ",
                "isStatic": false,
                "lastClassName": "cVhBzI",
                "rules": Array [
                  "
  overflow: hidden;
  padding-top: 10px;
  margin-bottom: 30px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jDwBTQ",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="sc-jDwBTQ cVhBzI"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gPEVay",
                      "isStatic": false,
                      "lastClassName": "hGWQjL",
                      "rules": Array [
                        "
  box-sizing: border-box;
  height: 1px;
  width: 100%;
  margin: 15px 0 10px 0;
  border: 1px solid #ddddd0;
  border-top: 0;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gPEVay",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gPEVay hGWQjL"
                />
              </StyledComponent>
            </styled.div>
            <Styled(styled.button)
              data-testid="button-back"
              onClick={[Function]}
            >
              <StyledComponent
                data-testid="button-back"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iRbamj",
                      "isStatic": false,
                      "lastClassName": "fVPWlY",
                      "rules": Array [
                        "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                        "
  color: #404042;
  background-color: #ffffff;
  float: left;
",
                      ],
                    },
                    "displayName": "Styled(styled.button)",
                    "foldedComponentIds": Array [
                      "sc-cSHVUG",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-iRbamj",
                    "target": "button",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
              >
                <button
                  className="sc-cSHVUG sc-iRbamj fVPWlY"
                  data-testid="button-back"
                  onClick={[Function]}
                >
                  ONBOARDING_BACK
                </button>
              </StyledComponent>
            </Styled(styled.button)>
            <Styled(styled.button)
              data-testid="button-next"
              id="button-next"
              onClick={[Function]}
            >
              <StyledComponent
                data-testid="button-next"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jlyJG",
                      "isStatic": false,
                      "lastClassName": "hbYvME",
                      "rules": Array [
                        "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                        "
  background-color: ",
                        [Function],
                        ";
  color: #ffffff;
  float: right;
",
                      ],
                    },
                    "displayName": "Styled(styled.button)",
                    "foldedComponentIds": Array [
                      "sc-cSHVUG",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jlyJG",
                    "target": "button",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                id="button-next"
                onClick={[Function]}
              >
                <button
                  className="sc-cSHVUG sc-jlyJG hbYvME"
                  data-testid="button-next"
                  id="button-next"
                  onClick={[Function]}
                >
                  ONBOARDING_EDIT
                </button>
              </StyledComponent>
            </Styled(styled.button)>
          </div>
        </StyledComponent>
      </styled.div>
    </NextBack>
  </SpaceForm>
</Provider>
`;

exports[`SpaceForm new flex 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getAction": [Function],
      "getActions": [Function],
      "getState": [Function],
      "isActionDispatched": [Function],
      "isActionTypeDispatched": [Function],
      "subscribe": [Function],
    }
  }
>
  <SpaceForm
    isEditing={false}
    space={
      Object {
        "availabilityFixed": 2020-01-01T00:00:00.000Z,
        "fitout": Array [
          Object {
            "amount": 1000,
            "description": "FitOut1",
            "name": "FitOut1",
          },
        ],
        "fixedDesks": Object {
          "availableFrom": 2020-01-01T00:00:00.000Z,
          "currencyCode": "NOK",
          "desks": 0,
          "frequency": "Monthly",
          "minLease": 0,
          "price": 0,
        },
        "floorPlan": Array [],
        "hotDesks": Object {
          "availableFrom": 2020-01-01T00:00:00.000Z,
          "currencyCode": "NOK",
          "desks": 0,
          "frequency": "Monthly",
          "minLease": 0,
          "price": 0,
        },
        "id": "0",
        "images": Array [],
        "months": undefined,
        "servicedOffices": Array [],
        "spaceDescription": "",
        "spaceFloor": undefined,
        "spaceFloored": "",
        "spaceHighlights": "",
        "spaceMatterPort": "",
        "spaceName": "",
        "spaceRent": undefined,
        "spaceServices": undefined,
        "spaceServicesNotNegotiable": false,
        "spaceSize": undefined,
        "spaceSizeCommon": undefined,
        "status": 1,
        "type": "FLEX",
        "use": "",
      }
    }
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jbKcbu",
              "isStatic": false,
              "lastClassName": "dnaifA",
              "rules": Array [
                "
  max-width: 516px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jbKcbu",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={
          Object {
            "current": <div
              class="sc-jbKcbu dnaifA"
            >
              <div
                class="sc-hEsumM bxuiAR"
              >
                <h3
                  class="sc-bdVaJa sc-tilXH leRPTB"
                >
                  ONBOARDING_SPACE_DETAILS_FLEX
                </h3>
                <div
                  class="sc-htpNat djDvul sc-dNLxif goihLt"
                >
                  <label
                    for="spaceName"
                  >
                    ONBOARDING_SPACE_NAME
                  </label>
                  <input
                    class="sc-bxivhb aiwDT"
                    id="spaceName"
                    placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                    type="text"
                    value=""
                  />
                  <div
                    class="sc-ifAKCX hmksNE"
                  />
                </div>
                <div
                  class="sc-EHOje GzWuu"
                >
                  <label
                    for="spaceDescription"
                  >
                    ONBOARDING_SPACE_DESCRIPTION
                  </label>
                  <textarea
                    class="sc-bZQynM dIozFz"
                    formats="bold,italic,list"
                    height="112"
                    id="spaceDescription"
                    modules="[object Object]"
                    placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                  />
                  <div
                    class="sc-gzVnrw dbiKoa"
                  />
                </div>
                <div
                  class="sc-EHOje GzWuu"
                >
                  <label
                    for="spaceHighlights"
                  >
                    ONBOARDING_SPACE_HIGHLIGHTS
                  </label>
                  <textarea
                    class="sc-bZQynM dIozFz"
                    formats="bold,italic,list"
                    height="112"
                    id="spaceHighlights"
                    modules="[object Object]"
                    placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                  />
                  <div
                    class="sc-gzVnrw dbiKoa"
                  />
                </div>
              </div>
              <div
                class="sc-hEsumM bxuiAR"
              >
                <div
                  class="sc-htpNat djDvul sc-dNLxif goihLt"
                >
                  <label
                    for="spaceMatterPort"
                  >
                    ONBOARDING_SPACE_MATTERPORT
                  </label>
                  <input
                    class="sc-bxivhb aiwDT"
                    id="spaceMatterPort"
                    type="text"
                    value=""
                  />
                  <div
                    class="sc-ifAKCX hmksNE"
                  />
                </div>
              </div>
            </div>,
          }
        }
      >
        <div
          className="sc-jbKcbu dnaifA"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hEsumM",
                    "isStatic": false,
                    "lastClassName": "bxuiAR",
                    "rules": Array [
                      "
  margin-bottom: 50px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hEsumM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-hEsumM bxuiAR"
              >
                <Styled(styled.h3)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-tilXH",
                          "isStatic": false,
                          "lastClassName": "leRPTB",
                          "rules": Array [
                            "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                            "
  margin-bottom: 0;
",
                          ],
                        },
                        "displayName": "Styled(styled.h3)",
                        "foldedComponentIds": Array [
                          "sc-bdVaJa",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-tilXH",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-bdVaJa sc-tilXH leRPTB"
                    >
                      ONBOARDING_SPACE_DETAILS_FLEX
                    </h3>
                  </StyledComponent>
                </Styled(styled.h3)>
                <Styled(Input)
                  id="spaceName"
                  label="ONBOARDING_SPACE_NAME"
                  onChange={[Function]}
                  placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                  type="text"
                  value=""
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dNLxif",
                          "isStatic": false,
                          "lastClassName": "goihLt",
                          "rules": Array [
                            "
  width: 100%;
  margin-top: 20px;
",
                          ],
                        },
                        "displayName": "Styled(Input)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dNLxif",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    id="spaceName"
                    label="ONBOARDING_SPACE_NAME"
                    onChange={[Function]}
                    placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                    type="text"
                    value=""
                  >
                    <Input
                      className="sc-dNLxif goihLt"
                      id="spaceName"
                      label="ONBOARDING_SPACE_NAME"
                      onChange={[Function]}
                      placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                      type="text"
                      value=""
                    >
                      <styled.div
                        className="sc-dNLxif goihLt"
                      >
                        <StyledComponent
                          className="sc-dNLxif goihLt"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "djDvul",
                                "rules": Array [
                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-htpNat djDvul sc-dNLxif goihLt"
                          >
                            <label
                              htmlFor="spaceName"
                            >
                              ONBOARDING_SPACE_NAME
                            </label>
                            <styled.input
                              id="spaceName"
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                              type="text"
                              value=""
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "aiwDT",
                                      "rules": Array [
                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                        [Function],
                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                        [Function],
                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                        [Function],
                                        ";
    border: 1px solid ",
                                        [Function],
                                        ";
  }
",
                                      ],
                                    },
                                    "displayName": "styled.input",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": "input",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                id="spaceName"
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                type="text"
                                value=""
                              >
                                <input
                                  className="sc-bxivhb aiwDT"
                                  id="spaceName"
                                  onChange={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_HEADLINE"
                                  type="text"
                                  value=""
                                />
                              </StyledComponent>
                            </styled.input>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-ifAKCX",
                                      "isStatic": false,
                                      "lastClassName": "hmksNE",
                                      "rules": Array [
                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-ifAKCX",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-ifAKCX hmksNE"
                                />
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Input>
                  </StyledComponent>
                </Styled(Input)>
                <RichTextArea
                  id="spaceDescription"
                  label="ONBOARDING_SPACE_DESCRIPTION"
                  onChange={[Function]}
                  placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                  rows={4}
                  value=""
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "GzWuu",
                            "rules": Array [
                              "
  margin: 20px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-EHOje GzWuu"
                      >
                        <label
                          htmlFor="spaceDescription"
                        >
                          ONBOARDING_SPACE_DESCRIPTION
                        </label>
                        <Styled(ComponentToMock)
                          formats={
                            Array [
                              "bold",
                              "italic",
                              "list",
                            ]
                          }
                          height={112}
                          id="spaceDescription"
                          modules={
                            Object {
                              "toolbar": Array [
                                Array [
                                  "bold",
                                  "italic",
                                ],
                                Array [
                                  Object {
                                    "list": "ordered",
                                  },
                                  Object {
                                    "list": "bullet",
                                  },
                                ],
                                Array [
                                  "clean",
                                ],
                              ],
                            }
                          }
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                          value=""
                        >
                          <StyledComponent
                            formats={
                              Array [
                                "bold",
                                "italic",
                                "list",
                              ]
                            }
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "dIozFz",
                                  "rules": Array [
                                    "
  margin-top: 0;
  margin-bottom: 6px;
  resize: none;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                    [Function],
                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  :focus {
    outline: 1px solid ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
  }
  .ql-toolbar.ql-snow {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 3px 3px 0 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-container.ql-snow {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 0 0 3px 3px;
    border-top: 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-editor {
    min-height: ",
                                    [Function],
                                    "px;
    background: white;
  }
",
                                  ],
                                },
                                "displayName": "Styled(ComponentToMock)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            height={112}
                            id="spaceDescription"
                            modules={
                              Object {
                                "toolbar": Array [
                                  Array [
                                    "bold",
                                    "italic",
                                  ],
                                  Array [
                                    Object {
                                      "list": "ordered",
                                    },
                                    Object {
                                      "list": "bullet",
                                    },
                                  ],
                                  Array [
                                    "clean",
                                  ],
                                ],
                              }
                            }
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                            value=""
                          >
                            <ComponentToMock
                              className="sc-bZQynM dIozFz"
                              formats={
                                Array [
                                  "bold",
                                  "italic",
                                  "list",
                                ]
                              }
                              height={112}
                              id="spaceDescription"
                              modules={
                                Object {
                                  "toolbar": Array [
                                    Array [
                                      "bold",
                                      "italic",
                                    ],
                                    Array [
                                      Object {
                                        "list": "ordered",
                                      },
                                      Object {
                                        "list": "bullet",
                                      },
                                    ],
                                    Array [
                                      "clean",
                                    ],
                                  ],
                                }
                              }
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                              value=""
                            >
                              <textarea
                                className="sc-bZQynM dIozFz"
                                formats={
                                  Array [
                                    "bold",
                                    "italic",
                                    "list",
                                  ]
                                }
                                height={112}
                                id="spaceDescription"
                                modules={
                                  Object {
                                    "toolbar": Array [
                                      Array [
                                        "bold",
                                        "italic",
                                      ],
                                      Array [
                                        Object {
                                          "list": "ordered",
                                        },
                                        Object {
                                          "list": "bullet",
                                        },
                                      ],
                                      Array [
                                        "clean",
                                      ],
                                    ],
                                  }
                                }
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_DESCRIPTION"
                                value=""
                              />
                            </ComponentToMock>
                          </StyledComponent>
                        </Styled(ComponentToMock)>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gzVnrw",
                                  "isStatic": false,
                                  "lastClassName": "dbiKoa",
                                  "rules": Array [
                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gzVnrw",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-gzVnrw dbiKoa"
                            />
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </RichTextArea>
                <RichTextArea
                  id="spaceHighlights"
                  label="ONBOARDING_SPACE_HIGHLIGHTS"
                  onChange={[Function]}
                  placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                  rows={4}
                  value=""
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "GzWuu",
                            "rules": Array [
                              "
  margin: 20px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-EHOje GzWuu"
                      >
                        <label
                          htmlFor="spaceHighlights"
                        >
                          ONBOARDING_SPACE_HIGHLIGHTS
                        </label>
                        <Styled(ComponentToMock)
                          formats={
                            Array [
                              "bold",
                              "italic",
                              "list",
                            ]
                          }
                          height={112}
                          id="spaceHighlights"
                          modules={
                            Object {
                              "toolbar": Array [
                                Array [
                                  "bold",
                                  "italic",
                                ],
                                Array [
                                  Object {
                                    "list": "ordered",
                                  },
                                  Object {
                                    "list": "bullet",
                                  },
                                ],
                                Array [
                                  "clean",
                                ],
                              ],
                            }
                          }
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                          value=""
                        >
                          <StyledComponent
                            formats={
                              Array [
                                "bold",
                                "italic",
                                "list",
                              ]
                            }
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "dIozFz",
                                  "rules": Array [
                                    "
  margin-top: 0;
  margin-bottom: 6px;
  resize: none;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                    [Function],
                                    ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  :focus {
    outline: 1px solid ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
  }
  .ql-toolbar.ql-snow {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 3px 3px 0 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-container.ql-snow {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 0 0 3px 3px;
    border-top: 0;
    font-family: 'futura-pt';
    font-size: 16px;
  }
  .ql-editor {
    min-height: ",
                                    [Function],
                                    "px;
    background: white;
  }
",
                                  ],
                                },
                                "displayName": "Styled(ComponentToMock)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            height={112}
                            id="spaceHighlights"
                            modules={
                              Object {
                                "toolbar": Array [
                                  Array [
                                    "bold",
                                    "italic",
                                  ],
                                  Array [
                                    Object {
                                      "list": "ordered",
                                    },
                                    Object {
                                      "list": "bullet",
                                    },
                                  ],
                                  Array [
                                    "clean",
                                  ],
                                ],
                              }
                            }
                            onChange={[Function]}
                            placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                            value=""
                          >
                            <ComponentToMock
                              className="sc-bZQynM dIozFz"
                              formats={
                                Array [
                                  "bold",
                                  "italic",
                                  "list",
                                ]
                              }
                              height={112}
                              id="spaceHighlights"
                              modules={
                                Object {
                                  "toolbar": Array [
                                    Array [
                                      "bold",
                                      "italic",
                                    ],
                                    Array [
                                      Object {
                                        "list": "ordered",
                                      },
                                      Object {
                                        "list": "bullet",
                                      },
                                    ],
                                    Array [
                                      "clean",
                                    ],
                                  ],
                                }
                              }
                              onChange={[Function]}
                              placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                              value=""
                            >
                              <textarea
                                className="sc-bZQynM dIozFz"
                                formats={
                                  Array [
                                    "bold",
                                    "italic",
                                    "list",
                                  ]
                                }
                                height={112}
                                id="spaceHighlights"
                                modules={
                                  Object {
                                    "toolbar": Array [
                                      Array [
                                        "bold",
                                        "italic",
                                      ],
                                      Array [
                                        Object {
                                          "list": "ordered",
                                        },
                                        Object {
                                          "list": "bullet",
                                        },
                                      ],
                                      Array [
                                        "clean",
                                      ],
                                    ],
                                  }
                                }
                                onChange={[Function]}
                                placeholder="ONBOARDING_PLACEHOLDER_HIGHLIGHTS"
                                value=""
                              />
                            </ComponentToMock>
                          </StyledComponent>
                        </Styled(ComponentToMock)>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gzVnrw",
                                  "isStatic": false,
                                  "lastClassName": "dbiKoa",
                                  "rules": Array [
                                    "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gzVnrw",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-gzVnrw dbiKoa"
                            />
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </RichTextArea>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hEsumM",
                    "isStatic": false,
                    "lastClassName": "bxuiAR",
                    "rules": Array [
                      "
  margin-bottom: 50px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hEsumM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-hEsumM bxuiAR"
              >
                <Styled(Input)
                  id="spaceMatterPort"
                  label="ONBOARDING_SPACE_MATTERPORT"
                  onChange={[Function]}
                  type="text"
                  value=""
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dNLxif",
                          "isStatic": false,
                          "lastClassName": "goihLt",
                          "rules": Array [
                            "
  width: 100%;
  margin-top: 20px;
",
                          ],
                        },
                        "displayName": "Styled(Input)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dNLxif",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    id="spaceMatterPort"
                    label="ONBOARDING_SPACE_MATTERPORT"
                    onChange={[Function]}
                    type="text"
                    value=""
                  >
                    <Input
                      className="sc-dNLxif goihLt"
                      id="spaceMatterPort"
                      label="ONBOARDING_SPACE_MATTERPORT"
                      onChange={[Function]}
                      type="text"
                      value=""
                    >
                      <styled.div
                        className="sc-dNLxif goihLt"
                      >
                        <StyledComponent
                          className="sc-dNLxif goihLt"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "djDvul",
                                "rules": Array [
                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-htpNat djDvul sc-dNLxif goihLt"
                          >
                            <label
                              htmlFor="spaceMatterPort"
                            >
                              ONBOARDING_SPACE_MATTERPORT
                            </label>
                            <styled.input
                              id="spaceMatterPort"
                              onChange={[Function]}
                              type="text"
                              value=""
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "aiwDT",
                                      "rules": Array [
                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                        [Function],
                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                        [Function],
                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                        [Function],
                                        ";
    border: 1px solid ",
                                        [Function],
                                        ";
  }
",
                                      ],
                                    },
                                    "displayName": "styled.input",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": "input",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                id="spaceMatterPort"
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <input
                                  className="sc-bxivhb aiwDT"
                                  id="spaceMatterPort"
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                />
                              </StyledComponent>
                            </styled.input>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-ifAKCX",
                                      "isStatic": false,
                                      "lastClassName": "hmksNE",
                                      "rules": Array [
                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-ifAKCX",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-ifAKCX hmksNE"
                                />
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Input>
                  </StyledComponent>
                </Styled(Input)>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hEsumM",
              "isStatic": false,
              "lastClassName": "bxuiAR",
              "rules": Array [
                "
  margin-bottom: 50px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hEsumM",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-hEsumM bxuiAR"
        >
          <SpaceAvailabilityFlex
            setError={[Function]}
            space={
              Object {
                "availabilityFixed": 2020-01-01T00:00:00.000Z,
                "fitout": Array [
                  Object {
                    "amount": 1000,
                    "description": "FitOut1",
                    "name": "FitOut1",
                  },
                ],
                "fixedDesks": Object {
                  "availableFrom": 2020-01-01T00:00:00.000Z,
                  "currencyCode": "NOK",
                  "desks": 0,
                  "frequency": "Monthly",
                  "minLease": 0,
                  "price": 0,
                },
                "floorPlan": Array [],
                "hotDesks": Object {
                  "availableFrom": 2020-01-01T00:00:00.000Z,
                  "currencyCode": "NOK",
                  "desks": 0,
                  "frequency": "Monthly",
                  "minLease": 0,
                  "price": 0,
                },
                "id": "0",
                "images": Array [],
                "months": undefined,
                "servicedOffices": Array [],
                "spaceDescription": "",
                "spaceFloor": undefined,
                "spaceFloored": "",
                "spaceHighlights": "",
                "spaceMatterPort": "",
                "spaceName": "",
                "spaceRent": undefined,
                "spaceServices": undefined,
                "spaceServicesNotNegotiable": false,
                "spaceSize": undefined,
                "spaceSizeCommon": undefined,
                "status": 1,
                "type": "FLEX",
                "use": "",
              }
            }
          >
            <styled.h3>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "klePfV",
                      "rules": Array [
                        "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                      ],
                    },
                    "displayName": "styled.h3",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "h3",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <h3
                  className="sc-bdVaJa klePfV"
                >
                  ONBOARDING_SPACE_AVAILABILITY_FLEX_TITLE
                </h3>
              </StyledComponent>
            </styled.h3>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-cMljjf",
                      "isStatic": false,
                      "lastClassName": "dnhnYs",
                      "rules": Array [
                        "
  max-width: 516px;
  box-sizing: border-box;
  display: flex;
  border-radius: 2px;
  background-color: #f4f4f4;
  padding: 20px;
  margin-bottom: 50px;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-cMljjf",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-cMljjf dnhnYs"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jAaTju",
                            "isStatic": false,
                            "lastClassName": "gZpLDj",
                            "rules": Array [
                              "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jAaTju",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-jAaTju gZpLDj"
                      >
                        <Styled(styled.h4)>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-brqgnP",
                                  "isStatic": false,
                                  "lastClassName": "hGtPbA",
                                  "rules": Array [
                                    "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                                    "
  margin-top: 0;
",
                                  ],
                                },
                                "displayName": "Styled(styled.h4)",
                                "foldedComponentIds": Array [
                                  "sc-bwzfXH",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-brqgnP",
                                "target": "h4",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <h4
                              className="sc-bwzfXH sc-brqgnP hGtPbA"
                            >
                              ONBOARDING_SPACE_FLEX_HOT_DESKS
                            </h4>
                          </StyledComponent>
                        </Styled(styled.h4)>
                        <Input
                          data-testid="hot-desks-desks"
                          id="hot-desks-desks"
                          label="ONBOARDING_SPACE_FLEX_DESKS"
                          onChange={[Function]}
                          type="number"
                          value=""
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "djDvul",
                                    "rules": Array [
                                      "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-htpNat djDvul"
                              >
                                <label
                                  htmlFor="hot-desks-desks"
                                >
                                  ONBOARDING_SPACE_FLEX_DESKS
                                </label>
                                <styled.input
                                  data-testid="hot-desks-desks"
                                  id="hot-desks-desks"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    data-testid="hot-desks-desks"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "aiwDT",
                                          "rules": Array [
                                            "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                            [Function],
                                            ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                            [Function],
                                            ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
  }
",
                                          ],
                                        },
                                        "displayName": "styled.input",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "input",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="hot-desks-desks"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="sc-bxivhb aiwDT"
                                      data-testid="hot-desks-desks"
                                      id="hot-desks-desks"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="number"
                                      value=""
                                    />
                                  </StyledComponent>
                                </styled.input>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-ifAKCX",
                                          "isStatic": false,
                                          "lastClassName": "hmksNE",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-ifAKCX",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-ifAKCX hmksNE"
                                    />
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Input>
                        <Styled(Component)
                          data-testid="hot-desks-from"
                          disablePast={true}
                          id="hot-desks-availableFrom"
                          label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                          onChange={[Function]}
                          value={2020-01-01T00:00:00.000Z}
                        >
                          <StyledComponent
                            data-testid="hot-desks-from"
                            disablePast={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-iwsKbI",
                                  "isStatic": false,
                                  "lastClassName": "bnAzGN",
                                  "rules": Array [
                                    "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                  ],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-iwsKbI",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="hot-desks-availableFrom"
                            label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                            onChange={[Function]}
                            value={2020-01-01T00:00:00.000Z}
                          >
                            <Component
                              className="sc-iwsKbI bnAzGN"
                              data-testid="hot-desks-from"
                              disablePast={true}
                              id="hot-desks-availableFrom"
                              label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                              onChange={[Function]}
                              value={2020-01-01T00:00:00.000Z}
                            >
                              <styled.div
                                className="sc-iwsKbI bnAzGN"
                                focusOn={false}
                              >
                                <StyledComponent
                                  className="sc-iwsKbI bnAzGN"
                                  focusOn={false}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dnqmqq",
                                        "isStatic": false,
                                        "lastClassName": "kuuTPS",
                                        "rules": Array [
                                          "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                          [Function],
                                          ";
  }
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dnqmqq",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-dnqmqq kuuTPS sc-iwsKbI bnAzGN"
                                  >
                                    <label>
                                      ONBOARDING_SPACE_FLEX_AVAILABILITY
                                    </label>
                                    <MuiPickersUtilsProvider
                                      locale={
                                        Object {
                                          "code": "en-GB",
                                          "formatDistance": [Function],
                                          "formatLong": Object {
                                            "date": [Function],
                                            "dateTime": [Function],
                                            "time": [Function],
                                          },
                                          "formatRelative": [Function],
                                          "localize": Object {
                                            "day": [Function],
                                            "dayPeriod": [Function],
                                            "era": [Function],
                                            "month": [Function],
                                            "ordinalNumber": [Function],
                                            "quarter": [Function],
                                          },
                                          "match": Object {
                                            "day": [Function],
                                            "dayPeriod": [Function],
                                            "era": [Function],
                                            "month": [Function],
                                            "ordinalNumber": [Function],
                                            "quarter": [Function],
                                          },
                                          "options": Object {
                                            "firstWeekContainsDate": 4,
                                            "weekStartsOn": 1,
                                          },
                                        }
                                      }
                                      utils={[Function]}
                                    >
                                      <PickerWithState
                                        InputLabelProps={
                                          Object {
                                            "error": false,
                                            "shrink": false,
                                          }
                                        }
                                        allowKeyboardControl={true}
                                        autoOk={true}
                                        disablePast={true}
                                        disableToolbar={true}
                                        format="yyyy-MM-dd"
                                        id="hot-desks-availableFrom"
                                        inputVariant="outlined"
                                        invalidDateMessage="Invalid Date Format"
                                        keyboardIcon={
                                          <img
                                            alt="open calendar"
                                            src="calendar.svg"
                                          />
                                        }
                                        maxDate={2100-01-01T00:00:00.000Z}
                                        maxDateMessage="Date should not be after maximal date"
                                        minDate={1900-01-01T00:00:00.000Z}
                                        minDateMessage="Date should not be before minimal date"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        openTo="date"
                                        value={2020-01-01T00:00:00.000Z}
                                        variant="inline"
                                        views={
                                          Array [
                                            "year",
                                            "date",
                                          ]
                                        }
                                      >
                                        <Wrapper
                                          DateInputProps={
                                            Object {
                                              "format": "yyyy-MM-dd",
                                              "inputValue": "2020-01-01",
                                              "onChange": [Function],
                                              "openPicker": [Function],
                                              "validationError": "",
                                            }
                                          }
                                          InputComponent={[Function]}
                                          InputLabelProps={
                                            Object {
                                              "error": false,
                                              "shrink": false,
                                            }
                                          }
                                          format="yyyy-MM-dd"
                                          id="hot-desks-availableFrom"
                                          inputVariant="outlined"
                                          keyboardIcon={
                                            <img
                                              alt="open calendar"
                                              src="calendar.svg"
                                            />
                                          }
                                          onAccept={[Function]}
                                          onBlur={[Function]}
                                          onClear={[Function]}
                                          onDismiss={[Function]}
                                          onFocus={[Function]}
                                          onSetToday={[Function]}
                                          open={false}
                                          variant="inline"
                                        >
                                          <InlineWrapper
                                            DateInputProps={
                                              Object {
                                                "format": "yyyy-MM-dd",
                                                "inputValue": "2020-01-01",
                                                "onChange": [Function],
                                                "openPicker": [Function],
                                                "validationError": "",
                                              }
                                            }
                                            InputComponent={[Function]}
                                            InputLabelProps={
                                              Object {
                                                "error": false,
                                                "shrink": false,
                                              }
                                            }
                                            format="yyyy-MM-dd"
                                            id="hot-desks-availableFrom"
                                            inputVariant="outlined"
                                            keyboardIcon={
                                              <img
                                                alt="open calendar"
                                                src="calendar.svg"
                                              />
                                            }
                                            onAccept={[Function]}
                                            onBlur={[Function]}
                                            onClear={[Function]}
                                            onDismiss={[Function]}
                                            onFocus={[Function]}
                                            onSetToday={[Function]}
                                            open={false}
                                          >
                                            <KeyboardDateInput
                                              InputLabelProps={
                                                Object {
                                                  "error": false,
                                                  "shrink": false,
                                                }
                                              }
                                              format="yyyy-MM-dd"
                                              id="hot-desks-availableFrom"
                                              inputRef={
                                                Object {
                                                  "current": <input
                                                    aria-invalid="false"
                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                    id="hot-desks-availableFrom"
                                                    type="text"
                                                    value="2020-01-01"
                                                  />,
                                                }
                                              }
                                              inputValue="2020-01-01"
                                              inputVariant="outlined"
                                              keyboardIcon={
                                                <img
                                                  alt="open calendar"
                                                  src="calendar.svg"
                                                />
                                              }
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              openPicker={[Function]}
                                              validationError=""
                                            >
                                              <Rifm
                                                format={[Function]}
                                                key="____-__-__"
                                                onChange={[Function]}
                                                refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                value="2020-01-01"
                                              >
                                                <WithStyles(ForwardRef(TextField))
                                                  InputLabelProps={
                                                    Object {
                                                      "error": false,
                                                      "shrink": false,
                                                    }
                                                  }
                                                  InputProps={
                                                    Object {
                                                      "endAdornment": <ForwardRef(WithStyles)
                                                        position="end"
                                                      >
                                                        <ForwardRef(WithStyles)
                                                          onClick={[Function]}
                                                        >
                                                          <img
                                                            alt="open calendar"
                                                            src="calendar.svg"
                                                          />
                                                        </ForwardRef(WithStyles)>
                                                      </ForwardRef(WithStyles)>,
                                                    }
                                                  }
                                                  error={false}
                                                  helperText=""
                                                  id="hot-desks-availableFrom"
                                                  inputRef={
                                                    Object {
                                                      "current": <input
                                                        aria-invalid="false"
                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                        id="hot-desks-availableFrom"
                                                        type="text"
                                                        value="2020-01-01"
                                                      />,
                                                    }
                                                  }
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  value="2020-01-01"
                                                  variant="outlined"
                                                >
                                                  <ForwardRef(TextField)
                                                    InputLabelProps={
                                                      Object {
                                                        "error": false,
                                                        "shrink": false,
                                                      }
                                                    }
                                                    InputProps={
                                                      Object {
                                                        "endAdornment": <ForwardRef(WithStyles)
                                                          position="end"
                                                        >
                                                          <ForwardRef(WithStyles)
                                                            onClick={[Function]}
                                                          >
                                                            <img
                                                              alt="open calendar"
                                                              src="calendar.svg"
                                                            />
                                                          </ForwardRef(WithStyles)>
                                                        </ForwardRef(WithStyles)>,
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "root": "MuiTextField-root",
                                                      }
                                                    }
                                                    error={false}
                                                    helperText=""
                                                    id="hot-desks-availableFrom"
                                                    inputRef={
                                                      Object {
                                                        "current": <input
                                                          aria-invalid="false"
                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                          id="hot-desks-availableFrom"
                                                          type="text"
                                                          value="2020-01-01"
                                                        />,
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    value="2020-01-01"
                                                    variant="outlined"
                                                  >
                                                    <WithStyles(ForwardRef(FormControl))
                                                      className="MuiTextField-root"
                                                      color="primary"
                                                      disabled={false}
                                                      error={false}
                                                      fullWidth={false}
                                                      required={false}
                                                      variant="outlined"
                                                    >
                                                      <ForwardRef(FormControl)
                                                        className="MuiTextField-root"
                                                        classes={
                                                          Object {
                                                            "fullWidth": "MuiFormControl-fullWidth",
                                                            "marginDense": "MuiFormControl-marginDense",
                                                            "marginNormal": "MuiFormControl-marginNormal",
                                                            "root": "MuiFormControl-root",
                                                          }
                                                        }
                                                        color="primary"
                                                        disabled={false}
                                                        error={false}
                                                        fullWidth={false}
                                                        required={false}
                                                        variant="outlined"
                                                      >
                                                        <div
                                                          className="MuiFormControl-root MuiTextField-root"
                                                        >
                                                          <WithStyles(ForwardRef(OutlinedInput))
                                                            autoFocus={false}
                                                            endAdornment={
                                                              <ForwardRef(WithStyles)
                                                                position="end"
                                                              >
                                                                <ForwardRef(WithStyles)
                                                                  onClick={[Function]}
                                                                >
                                                                  <img
                                                                    alt="open calendar"
                                                                    src="calendar.svg"
                                                                  />
                                                                </ForwardRef(WithStyles)>
                                                              </ForwardRef(WithStyles)>
                                                            }
                                                            fullWidth={false}
                                                            id="hot-desks-availableFrom"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                  id="hot-desks-availableFrom"
                                                                  type="text"
                                                                  value="2020-01-01"
                                                                />,
                                                              }
                                                            }
                                                            labelWidth={0}
                                                            multiline={false}
                                                            notched={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            value="2020-01-01"
                                                          >
                                                            <ForwardRef(OutlinedInput)
                                                              autoFocus={false}
                                                              classes={
                                                                Object {
                                                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                  "disabled": "Mui-disabled",
                                                                  "error": "Mui-error",
                                                                  "focused": "Mui-focused",
                                                                  "input": "MuiOutlinedInput-input",
                                                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                  "marginDense": "MuiOutlinedInput-marginDense",
                                                                  "multiline": "MuiOutlinedInput-multiline",
                                                                  "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                  "root": "MuiOutlinedInput-root",
                                                                }
                                                              }
                                                              endAdornment={
                                                                <ForwardRef(WithStyles)
                                                                  position="end"
                                                                >
                                                                  <ForwardRef(WithStyles)
                                                                    onClick={[Function]}
                                                                  >
                                                                    <img
                                                                      alt="open calendar"
                                                                      src="calendar.svg"
                                                                    />
                                                                  </ForwardRef(WithStyles)>
                                                                </ForwardRef(WithStyles)>
                                                              }
                                                              fullWidth={false}
                                                              id="hot-desks-availableFrom"
                                                              inputRef={
                                                                Object {
                                                                  "current": <input
                                                                    aria-invalid="false"
                                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                    id="hot-desks-availableFrom"
                                                                    type="text"
                                                                    value="2020-01-01"
                                                                  />,
                                                                }
                                                              }
                                                              labelWidth={0}
                                                              multiline={false}
                                                              notched={false}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              value="2020-01-01"
                                                            >
                                                              <WithStyles(ForwardRef(InputBase))
                                                                autoFocus={false}
                                                                classes={
                                                                  Object {
                                                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                    "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "focused": "Mui-focused",
                                                                    "input": "MuiOutlinedInput-input",
                                                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                    "marginDense": "MuiOutlinedInput-marginDense",
                                                                    "multiline": "MuiOutlinedInput-multiline",
                                                                    "notchedOutline": null,
                                                                    "root": "MuiOutlinedInput-root",
                                                                  }
                                                                }
                                                                endAdornment={
                                                                  <ForwardRef(WithStyles)
                                                                    position="end"
                                                                  >
                                                                    <ForwardRef(WithStyles)
                                                                      onClick={[Function]}
                                                                    >
                                                                      <img
                                                                        alt="open calendar"
                                                                        src="calendar.svg"
                                                                      />
                                                                    </ForwardRef(WithStyles)>
                                                                  </ForwardRef(WithStyles)>
                                                                }
                                                                fullWidth={false}
                                                                id="hot-desks-availableFrom"
                                                                inputComponent="input"
                                                                inputRef={
                                                                  Object {
                                                                    "current": <input
                                                                      aria-invalid="false"
                                                                      class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                      id="hot-desks-availableFrom"
                                                                      type="text"
                                                                      value="2020-01-01"
                                                                    />,
                                                                  }
                                                                }
                                                                multiline={false}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                renderSuffix={[Function]}
                                                                type="text"
                                                                value="2020-01-01"
                                                              >
                                                                <ForwardRef(InputBase)
                                                                  autoFocus={false}
                                                                  classes={
                                                                    Object {
                                                                      "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                      "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                      "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                      "disabled": "Mui-disabled Mui-disabled",
                                                                      "error": "Mui-error Mui-error",
                                                                      "focused": "Mui-focused Mui-focused",
                                                                      "formControl": "MuiInputBase-formControl",
                                                                      "fullWidth": "MuiInputBase-fullWidth",
                                                                      "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                      "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                      "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                      "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                      "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                    }
                                                                  }
                                                                  endAdornment={
                                                                    <ForwardRef(WithStyles)
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(WithStyles)
                                                                        onClick={[Function]}
                                                                      >
                                                                        <img
                                                                          alt="open calendar"
                                                                          src="calendar.svg"
                                                                        />
                                                                      </ForwardRef(WithStyles)>
                                                                    </ForwardRef(WithStyles)>
                                                                  }
                                                                  fullWidth={false}
                                                                  id="hot-desks-availableFrom"
                                                                  inputComponent="input"
                                                                  inputRef={
                                                                    Object {
                                                                      "current": <input
                                                                        aria-invalid="false"
                                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                        id="hot-desks-availableFrom"
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      />,
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  renderSuffix={[Function]}
                                                                  type="text"
                                                                  value="2020-01-01"
                                                                >
                                                                  <div
                                                                    className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <input
                                                                      aria-invalid={false}
                                                                      autoFocus={false}
                                                                      className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                      disabled={false}
                                                                      id="hot-desks-availableFrom"
                                                                      onAnimationStart={[Function]}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      required={false}
                                                                      type="text"
                                                                      value="2020-01-01"
                                                                    />
                                                                    <WithStyles(ForwardRef(InputAdornment))
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(InputAdornment)
                                                                        classes={
                                                                          Object {
                                                                            "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                            "filled": "MuiInputAdornment-filled",
                                                                            "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                            "marginDense": "MuiInputAdornment-marginDense",
                                                                            "positionEnd": "MuiInputAdornment-positionEnd",
                                                                            "positionStart": "MuiInputAdornment-positionStart",
                                                                            "root": "MuiInputAdornment-root",
                                                                          }
                                                                        }
                                                                        position="end"
                                                                      >
                                                                        <div
                                                                          className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                        >
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            onClick={[Function]}
                                                                          >
                                                                            <ForwardRef(IconButton)
                                                                              classes={
                                                                                Object {
                                                                                  "colorInherit": "MuiIconButton-colorInherit",
                                                                                  "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                  "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                  "disabled": "Mui-disabled",
                                                                                  "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                  "edgeStart": "MuiIconButton-edgeStart",
                                                                                  "label": "MuiIconButton-label",
                                                                                  "root": "MuiIconButton-root",
                                                                                  "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                }
                                                                              }
                                                                              onClick={[Function]}
                                                                            >
                                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                                centerRipple={true}
                                                                                className="MuiIconButton-root"
                                                                                disabled={false}
                                                                                focusRipple={true}
                                                                                onClick={[Function]}
                                                                              >
                                                                                <ForwardRef(ButtonBase)
                                                                                  centerRipple={true}
                                                                                  className="MuiIconButton-root"
                                                                                  classes={
                                                                                    Object {
                                                                                      "disabled": "Mui-disabled",
                                                                                      "focusVisible": "Mui-focusVisible",
                                                                                      "root": "MuiButtonBase-root",
                                                                                    }
                                                                                  }
                                                                                  disabled={false}
                                                                                  focusRipple={true}
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <button
                                                                                    className="MuiButtonBase-root MuiIconButton-root"
                                                                                    disabled={false}
                                                                                    onBlur={[Function]}
                                                                                    onClick={[Function]}
                                                                                    onDragLeave={[Function]}
                                                                                    onFocus={[Function]}
                                                                                    onKeyDown={[Function]}
                                                                                    onKeyUp={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseLeave={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                    onTouchEnd={[Function]}
                                                                                    onTouchMove={[Function]}
                                                                                    onTouchStart={[Function]}
                                                                                    tabIndex={0}
                                                                                    type="button"
                                                                                  >
                                                                                    <span
                                                                                      className="MuiIconButton-label"
                                                                                    >
                                                                                      <img
                                                                                        alt="open calendar"
                                                                                        src="calendar.svg"
                                                                                      />
                                                                                    </span>
                                                                                    <NoSsr>
                                                                                      <WithStyles(undefined)
                                                                                        center={true}
                                                                                      >
                                                                                        <ForwardRef(TouchRipple)
                                                                                          center={true}
                                                                                          classes={
                                                                                            Object {
                                                                                              "child": "MuiTouchRipple-child",
                                                                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                              "ripple": "MuiTouchRipple-ripple",
                                                                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                              "root": "MuiTouchRipple-root",
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <span
                                                                                            className="MuiTouchRipple-root"
                                                                                          >
                                                                                            <TransitionGroup
                                                                                              childFactory={[Function]}
                                                                                              component={null}
                                                                                              exit={true}
                                                                                            />
                                                                                          </span>
                                                                                        </ForwardRef(TouchRipple)>
                                                                                      </WithStyles(undefined)>
                                                                                    </NoSsr>
                                                                                  </button>
                                                                                </ForwardRef(ButtonBase)>
                                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                                            </ForwardRef(IconButton)>
                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                        </div>
                                                                      </ForwardRef(InputAdornment)>
                                                                    </WithStyles(ForwardRef(InputAdornment))>
                                                                    <WithStyles(ForwardRef(NotchedOutline))
                                                                      className="MuiOutlinedInput-notchedOutline"
                                                                      labelWidth={0}
                                                                      notched={false}
                                                                    >
                                                                      <ForwardRef(NotchedOutline)
                                                                        className="MuiOutlinedInput-notchedOutline"
                                                                        classes={
                                                                          Object {
                                                                            "legend": "PrivateNotchedOutline-legend-61",
                                                                            "root": "PrivateNotchedOutline-root-60",
                                                                          }
                                                                        }
                                                                        labelWidth={0}
                                                                        notched={false}
                                                                      >
                                                                        <fieldset
                                                                          aria-hidden={true}
                                                                          className="PrivateNotchedOutline-root-60 MuiOutlinedInput-notchedOutline"
                                                                          style={
                                                                            Object {
                                                                              "paddingLeft": 8,
                                                                            }
                                                                          }
                                                                        >
                                                                          <legend
                                                                            className="PrivateNotchedOutline-legend-61"
                                                                            style={
                                                                              Object {
                                                                                "width": 0.01,
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              dangerouslySetInnerHTML={
                                                                                Object {
                                                                                  "__html": "&#8203;",
                                                                                }
                                                                              }
                                                                            />
                                                                          </legend>
                                                                        </fieldset>
                                                                      </ForwardRef(NotchedOutline)>
                                                                    </WithStyles(ForwardRef(NotchedOutline))>
                                                                  </div>
                                                                </ForwardRef(InputBase)>
                                                              </WithStyles(ForwardRef(InputBase))>
                                                            </ForwardRef(OutlinedInput)>
                                                          </WithStyles(ForwardRef(OutlinedInput))>
                                                        </div>
                                                      </ForwardRef(FormControl)>
                                                    </WithStyles(ForwardRef(FormControl))>
                                                  </ForwardRef(TextField)>
                                                </WithStyles(ForwardRef(TextField))>
                                              </Rifm>
                                            </KeyboardDateInput>
                                            <WithStyles(ForwardRef(Popover))
                                              anchorOrigin={
                                                Object {
                                                  "horizontal": "center",
                                                  "vertical": "bottom",
                                                }
                                              }
                                              onClose={[Function]}
                                              open={false}
                                              transformOrigin={
                                                Object {
                                                  "horizontal": "center",
                                                  "vertical": "top",
                                                }
                                              }
                                            >
                                              <ForwardRef(Popover)
                                                anchorOrigin={
                                                  Object {
                                                    "horizontal": "center",
                                                    "vertical": "bottom",
                                                  }
                                                }
                                                classes={
                                                  Object {
                                                    "paper": "MuiPopover-paper",
                                                    "root": "MuiPopover-root",
                                                  }
                                                }
                                                onClose={[Function]}
                                                open={false}
                                                transformOrigin={
                                                  Object {
                                                    "horizontal": "center",
                                                    "vertical": "top",
                                                  }
                                                }
                                              >
                                                <ForwardRef(Modal)
                                                  BackdropProps={
                                                    Object {
                                                      "invisible": true,
                                                    }
                                                  }
                                                  className="MuiPopover-root"
                                                  onClose={[Function]}
                                                  open={false}
                                                />
                                              </ForwardRef(Popover)>
                                            </WithStyles(ForwardRef(Popover))>
                                          </InlineWrapper>
                                        </Wrapper>
                                      </PickerWithState>
                                    </MuiPickersUtilsProvider>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Component>
                          </StyledComponent>
                        </Styled(Component)>
                        <Input
                          data-testid="hot-desks-min-lease"
                          id="hot-desks-minLease"
                          label="ONBOARDING_SPACE_FLEX_MINLEASE"
                          onChange={[Function]}
                          type="number"
                          value=""
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "djDvul",
                                    "rules": Array [
                                      "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-htpNat djDvul"
                              >
                                <label
                                  htmlFor="hot-desks-minLease"
                                >
                                  ONBOARDING_SPACE_FLEX_MINLEASE
                                </label>
                                <styled.input
                                  data-testid="hot-desks-min-lease"
                                  id="hot-desks-minLease"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    data-testid="hot-desks-min-lease"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "aiwDT",
                                          "rules": Array [
                                            "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                            [Function],
                                            ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                            [Function],
                                            ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
  }
",
                                          ],
                                        },
                                        "displayName": "styled.input",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "input",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="hot-desks-minLease"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="sc-bxivhb aiwDT"
                                      data-testid="hot-desks-min-lease"
                                      id="hot-desks-minLease"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="number"
                                      value=""
                                    />
                                  </StyledComponent>
                                </styled.input>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-ifAKCX",
                                          "isStatic": false,
                                          "lastClassName": "hmksNE",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-ifAKCX",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-ifAKCX hmksNE"
                                    />
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Input>
                        <Input
                          data-testid="hot-desks-price"
                          id="hot-desks-price"
                          label="ONBOARDING_SPACE_FLEX_PRICE (Kr)"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                          type="number"
                          value=""
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "djDvul",
                                    "rules": Array [
                                      "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-htpNat djDvul"
                              >
                                <label
                                  htmlFor="hot-desks-price"
                                >
                                  ONBOARDING_SPACE_FLEX_PRICE (Kr)
                                </label>
                                <styled.input
                                  data-testid="hot-desks-price"
                                  id="hot-desks-price"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    data-testid="hot-desks-price"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "aiwDT",
                                          "rules": Array [
                                            "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                            [Function],
                                            ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                            [Function],
                                            ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
  }
",
                                          ],
                                        },
                                        "displayName": "styled.input",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "input",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="hot-desks-price"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="sc-bxivhb aiwDT"
                                      data-testid="hot-desks-price"
                                      id="hot-desks-price"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                      type="number"
                                      value=""
                                    />
                                  </StyledComponent>
                                </styled.input>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-ifAKCX",
                                          "isStatic": false,
                                          "lastClassName": "hmksNE",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-ifAKCX",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-ifAKCX hmksNE"
                                    />
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Input>
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jAaTju",
                            "isStatic": false,
                            "lastClassName": "gZpLDj",
                            "rules": Array [
                              "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jAaTju",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-jAaTju gZpLDj"
                      >
                        <Styled(styled.h4)>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-brqgnP",
                                  "isStatic": false,
                                  "lastClassName": "hGtPbA",
                                  "rules": Array [
                                    "
  color: #000000;
  font-size: 18px;
  font-weight: 500;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
",
                                    "
  margin-top: 0;
",
                                  ],
                                },
                                "displayName": "Styled(styled.h4)",
                                "foldedComponentIds": Array [
                                  "sc-bwzfXH",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-brqgnP",
                                "target": "h4",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <h4
                              className="sc-bwzfXH sc-brqgnP hGtPbA"
                            >
                              ONBOARDING_SPACE_FLEX_FIXED_DESKS
                            </h4>
                          </StyledComponent>
                        </Styled(styled.h4)>
                        <Input
                          data-testid="fixed-desks-desks"
                          id="fixed-desks-desks"
                          label="ONBOARDING_SPACE_FLEX_DESKS"
                          onChange={[Function]}
                          type="number"
                          value=""
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "djDvul",
                                    "rules": Array [
                                      "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-htpNat djDvul"
                              >
                                <label
                                  htmlFor="fixed-desks-desks"
                                >
                                  ONBOARDING_SPACE_FLEX_DESKS
                                </label>
                                <styled.input
                                  data-testid="fixed-desks-desks"
                                  id="fixed-desks-desks"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    data-testid="fixed-desks-desks"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "aiwDT",
                                          "rules": Array [
                                            "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                            [Function],
                                            ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                            [Function],
                                            ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
  }
",
                                          ],
                                        },
                                        "displayName": "styled.input",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "input",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="fixed-desks-desks"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="sc-bxivhb aiwDT"
                                      data-testid="fixed-desks-desks"
                                      id="fixed-desks-desks"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="number"
                                      value=""
                                    />
                                  </StyledComponent>
                                </styled.input>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-ifAKCX",
                                          "isStatic": false,
                                          "lastClassName": "hmksNE",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-ifAKCX",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-ifAKCX hmksNE"
                                    />
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Input>
                        <Styled(Component)
                          data-testid="fixed-desks-from"
                          disablePast={true}
                          id="fixed-desks-availableFrom"
                          label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                          onChange={[Function]}
                          value={2020-01-01T00:00:00.000Z}
                        >
                          <StyledComponent
                            data-testid="fixed-desks-from"
                            disablePast={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-iwsKbI",
                                  "isStatic": false,
                                  "lastClassName": "bnAzGN",
                                  "rules": Array [
                                    "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                    [Function],
                                    ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                  ],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-iwsKbI",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="fixed-desks-availableFrom"
                            label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                            onChange={[Function]}
                            value={2020-01-01T00:00:00.000Z}
                          >
                            <Component
                              className="sc-iwsKbI bnAzGN"
                              data-testid="fixed-desks-from"
                              disablePast={true}
                              id="fixed-desks-availableFrom"
                              label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                              onChange={[Function]}
                              value={2020-01-01T00:00:00.000Z}
                            >
                              <styled.div
                                className="sc-iwsKbI bnAzGN"
                                focusOn={false}
                              >
                                <StyledComponent
                                  className="sc-iwsKbI bnAzGN"
                                  focusOn={false}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dnqmqq",
                                        "isStatic": false,
                                        "lastClassName": "kuuTPS",
                                        "rules": Array [
                                          "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                          [Function],
                                          ";
  }
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dnqmqq",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-dnqmqq kuuTPS sc-iwsKbI bnAzGN"
                                  >
                                    <label>
                                      ONBOARDING_SPACE_FLEX_AVAILABILITY
                                    </label>
                                    <MuiPickersUtilsProvider
                                      locale={
                                        Object {
                                          "code": "en-GB",
                                          "formatDistance": [Function],
                                          "formatLong": Object {
                                            "date": [Function],
                                            "dateTime": [Function],
                                            "time": [Function],
                                          },
                                          "formatRelative": [Function],
                                          "localize": Object {
                                            "day": [Function],
                                            "dayPeriod": [Function],
                                            "era": [Function],
                                            "month": [Function],
                                            "ordinalNumber": [Function],
                                            "quarter": [Function],
                                          },
                                          "match": Object {
                                            "day": [Function],
                                            "dayPeriod": [Function],
                                            "era": [Function],
                                            "month": [Function],
                                            "ordinalNumber": [Function],
                                            "quarter": [Function],
                                          },
                                          "options": Object {
                                            "firstWeekContainsDate": 4,
                                            "weekStartsOn": 1,
                                          },
                                        }
                                      }
                                      utils={[Function]}
                                    >
                                      <PickerWithState
                                        InputLabelProps={
                                          Object {
                                            "error": false,
                                            "shrink": false,
                                          }
                                        }
                                        allowKeyboardControl={true}
                                        autoOk={true}
                                        disablePast={true}
                                        disableToolbar={true}
                                        format="yyyy-MM-dd"
                                        id="fixed-desks-availableFrom"
                                        inputVariant="outlined"
                                        invalidDateMessage="Invalid Date Format"
                                        keyboardIcon={
                                          <img
                                            alt="open calendar"
                                            src="calendar.svg"
                                          />
                                        }
                                        maxDate={2100-01-01T00:00:00.000Z}
                                        maxDateMessage="Date should not be after maximal date"
                                        minDate={1900-01-01T00:00:00.000Z}
                                        minDateMessage="Date should not be before minimal date"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        openTo="date"
                                        value={2020-01-01T00:00:00.000Z}
                                        variant="inline"
                                        views={
                                          Array [
                                            "year",
                                            "date",
                                          ]
                                        }
                                      >
                                        <Wrapper
                                          DateInputProps={
                                            Object {
                                              "format": "yyyy-MM-dd",
                                              "inputValue": "2020-01-01",
                                              "onChange": [Function],
                                              "openPicker": [Function],
                                              "validationError": "",
                                            }
                                          }
                                          InputComponent={[Function]}
                                          InputLabelProps={
                                            Object {
                                              "error": false,
                                              "shrink": false,
                                            }
                                          }
                                          format="yyyy-MM-dd"
                                          id="fixed-desks-availableFrom"
                                          inputVariant="outlined"
                                          keyboardIcon={
                                            <img
                                              alt="open calendar"
                                              src="calendar.svg"
                                            />
                                          }
                                          onAccept={[Function]}
                                          onBlur={[Function]}
                                          onClear={[Function]}
                                          onDismiss={[Function]}
                                          onFocus={[Function]}
                                          onSetToday={[Function]}
                                          open={false}
                                          variant="inline"
                                        >
                                          <InlineWrapper
                                            DateInputProps={
                                              Object {
                                                "format": "yyyy-MM-dd",
                                                "inputValue": "2020-01-01",
                                                "onChange": [Function],
                                                "openPicker": [Function],
                                                "validationError": "",
                                              }
                                            }
                                            InputComponent={[Function]}
                                            InputLabelProps={
                                              Object {
                                                "error": false,
                                                "shrink": false,
                                              }
                                            }
                                            format="yyyy-MM-dd"
                                            id="fixed-desks-availableFrom"
                                            inputVariant="outlined"
                                            keyboardIcon={
                                              <img
                                                alt="open calendar"
                                                src="calendar.svg"
                                              />
                                            }
                                            onAccept={[Function]}
                                            onBlur={[Function]}
                                            onClear={[Function]}
                                            onDismiss={[Function]}
                                            onFocus={[Function]}
                                            onSetToday={[Function]}
                                            open={false}
                                          >
                                            <KeyboardDateInput
                                              InputLabelProps={
                                                Object {
                                                  "error": false,
                                                  "shrink": false,
                                                }
                                              }
                                              format="yyyy-MM-dd"
                                              id="fixed-desks-availableFrom"
                                              inputRef={
                                                Object {
                                                  "current": <input
                                                    aria-invalid="false"
                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                    id="fixed-desks-availableFrom"
                                                    type="text"
                                                    value="2020-01-01"
                                                  />,
                                                }
                                              }
                                              inputValue="2020-01-01"
                                              inputVariant="outlined"
                                              keyboardIcon={
                                                <img
                                                  alt="open calendar"
                                                  src="calendar.svg"
                                                />
                                              }
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              openPicker={[Function]}
                                              validationError=""
                                            >
                                              <Rifm
                                                format={[Function]}
                                                key="____-__-__"
                                                onChange={[Function]}
                                                refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                value="2020-01-01"
                                              >
                                                <WithStyles(ForwardRef(TextField))
                                                  InputLabelProps={
                                                    Object {
                                                      "error": false,
                                                      "shrink": false,
                                                    }
                                                  }
                                                  InputProps={
                                                    Object {
                                                      "endAdornment": <ForwardRef(WithStyles)
                                                        position="end"
                                                      >
                                                        <ForwardRef(WithStyles)
                                                          onClick={[Function]}
                                                        >
                                                          <img
                                                            alt="open calendar"
                                                            src="calendar.svg"
                                                          />
                                                        </ForwardRef(WithStyles)>
                                                      </ForwardRef(WithStyles)>,
                                                    }
                                                  }
                                                  error={false}
                                                  helperText=""
                                                  id="fixed-desks-availableFrom"
                                                  inputRef={
                                                    Object {
                                                      "current": <input
                                                        aria-invalid="false"
                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                        id="fixed-desks-availableFrom"
                                                        type="text"
                                                        value="2020-01-01"
                                                      />,
                                                    }
                                                  }
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  value="2020-01-01"
                                                  variant="outlined"
                                                >
                                                  <ForwardRef(TextField)
                                                    InputLabelProps={
                                                      Object {
                                                        "error": false,
                                                        "shrink": false,
                                                      }
                                                    }
                                                    InputProps={
                                                      Object {
                                                        "endAdornment": <ForwardRef(WithStyles)
                                                          position="end"
                                                        >
                                                          <ForwardRef(WithStyles)
                                                            onClick={[Function]}
                                                          >
                                                            <img
                                                              alt="open calendar"
                                                              src="calendar.svg"
                                                            />
                                                          </ForwardRef(WithStyles)>
                                                        </ForwardRef(WithStyles)>,
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "root": "MuiTextField-root",
                                                      }
                                                    }
                                                    error={false}
                                                    helperText=""
                                                    id="fixed-desks-availableFrom"
                                                    inputRef={
                                                      Object {
                                                        "current": <input
                                                          aria-invalid="false"
                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                          id="fixed-desks-availableFrom"
                                                          type="text"
                                                          value="2020-01-01"
                                                        />,
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    value="2020-01-01"
                                                    variant="outlined"
                                                  >
                                                    <WithStyles(ForwardRef(FormControl))
                                                      className="MuiTextField-root"
                                                      color="primary"
                                                      disabled={false}
                                                      error={false}
                                                      fullWidth={false}
                                                      required={false}
                                                      variant="outlined"
                                                    >
                                                      <ForwardRef(FormControl)
                                                        className="MuiTextField-root"
                                                        classes={
                                                          Object {
                                                            "fullWidth": "MuiFormControl-fullWidth",
                                                            "marginDense": "MuiFormControl-marginDense",
                                                            "marginNormal": "MuiFormControl-marginNormal",
                                                            "root": "MuiFormControl-root",
                                                          }
                                                        }
                                                        color="primary"
                                                        disabled={false}
                                                        error={false}
                                                        fullWidth={false}
                                                        required={false}
                                                        variant="outlined"
                                                      >
                                                        <div
                                                          className="MuiFormControl-root MuiTextField-root"
                                                        >
                                                          <WithStyles(ForwardRef(OutlinedInput))
                                                            autoFocus={false}
                                                            endAdornment={
                                                              <ForwardRef(WithStyles)
                                                                position="end"
                                                              >
                                                                <ForwardRef(WithStyles)
                                                                  onClick={[Function]}
                                                                >
                                                                  <img
                                                                    alt="open calendar"
                                                                    src="calendar.svg"
                                                                  />
                                                                </ForwardRef(WithStyles)>
                                                              </ForwardRef(WithStyles)>
                                                            }
                                                            fullWidth={false}
                                                            id="fixed-desks-availableFrom"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                  id="fixed-desks-availableFrom"
                                                                  type="text"
                                                                  value="2020-01-01"
                                                                />,
                                                              }
                                                            }
                                                            labelWidth={0}
                                                            multiline={false}
                                                            notched={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            value="2020-01-01"
                                                          >
                                                            <ForwardRef(OutlinedInput)
                                                              autoFocus={false}
                                                              classes={
                                                                Object {
                                                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                  "disabled": "Mui-disabled",
                                                                  "error": "Mui-error",
                                                                  "focused": "Mui-focused",
                                                                  "input": "MuiOutlinedInput-input",
                                                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                  "marginDense": "MuiOutlinedInput-marginDense",
                                                                  "multiline": "MuiOutlinedInput-multiline",
                                                                  "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                  "root": "MuiOutlinedInput-root",
                                                                }
                                                              }
                                                              endAdornment={
                                                                <ForwardRef(WithStyles)
                                                                  position="end"
                                                                >
                                                                  <ForwardRef(WithStyles)
                                                                    onClick={[Function]}
                                                                  >
                                                                    <img
                                                                      alt="open calendar"
                                                                      src="calendar.svg"
                                                                    />
                                                                  </ForwardRef(WithStyles)>
                                                                </ForwardRef(WithStyles)>
                                                              }
                                                              fullWidth={false}
                                                              id="fixed-desks-availableFrom"
                                                              inputRef={
                                                                Object {
                                                                  "current": <input
                                                                    aria-invalid="false"
                                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                    id="fixed-desks-availableFrom"
                                                                    type="text"
                                                                    value="2020-01-01"
                                                                  />,
                                                                }
                                                              }
                                                              labelWidth={0}
                                                              multiline={false}
                                                              notched={false}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              value="2020-01-01"
                                                            >
                                                              <WithStyles(ForwardRef(InputBase))
                                                                autoFocus={false}
                                                                classes={
                                                                  Object {
                                                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                    "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "focused": "Mui-focused",
                                                                    "input": "MuiOutlinedInput-input",
                                                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                    "marginDense": "MuiOutlinedInput-marginDense",
                                                                    "multiline": "MuiOutlinedInput-multiline",
                                                                    "notchedOutline": null,
                                                                    "root": "MuiOutlinedInput-root",
                                                                  }
                                                                }
                                                                endAdornment={
                                                                  <ForwardRef(WithStyles)
                                                                    position="end"
                                                                  >
                                                                    <ForwardRef(WithStyles)
                                                                      onClick={[Function]}
                                                                    >
                                                                      <img
                                                                        alt="open calendar"
                                                                        src="calendar.svg"
                                                                      />
                                                                    </ForwardRef(WithStyles)>
                                                                  </ForwardRef(WithStyles)>
                                                                }
                                                                fullWidth={false}
                                                                id="fixed-desks-availableFrom"
                                                                inputComponent="input"
                                                                inputRef={
                                                                  Object {
                                                                    "current": <input
                                                                      aria-invalid="false"
                                                                      class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                      id="fixed-desks-availableFrom"
                                                                      type="text"
                                                                      value="2020-01-01"
                                                                    />,
                                                                  }
                                                                }
                                                                multiline={false}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                renderSuffix={[Function]}
                                                                type="text"
                                                                value="2020-01-01"
                                                              >
                                                                <ForwardRef(InputBase)
                                                                  autoFocus={false}
                                                                  classes={
                                                                    Object {
                                                                      "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                      "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                      "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                      "disabled": "Mui-disabled Mui-disabled",
                                                                      "error": "Mui-error Mui-error",
                                                                      "focused": "Mui-focused Mui-focused",
                                                                      "formControl": "MuiInputBase-formControl",
                                                                      "fullWidth": "MuiInputBase-fullWidth",
                                                                      "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                      "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                      "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                      "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                      "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                    }
                                                                  }
                                                                  endAdornment={
                                                                    <ForwardRef(WithStyles)
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(WithStyles)
                                                                        onClick={[Function]}
                                                                      >
                                                                        <img
                                                                          alt="open calendar"
                                                                          src="calendar.svg"
                                                                        />
                                                                      </ForwardRef(WithStyles)>
                                                                    </ForwardRef(WithStyles)>
                                                                  }
                                                                  fullWidth={false}
                                                                  id="fixed-desks-availableFrom"
                                                                  inputComponent="input"
                                                                  inputRef={
                                                                    Object {
                                                                      "current": <input
                                                                        aria-invalid="false"
                                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                        id="fixed-desks-availableFrom"
                                                                        type="text"
                                                                        value="2020-01-01"
                                                                      />,
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  renderSuffix={[Function]}
                                                                  type="text"
                                                                  value="2020-01-01"
                                                                >
                                                                  <div
                                                                    className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <input
                                                                      aria-invalid={false}
                                                                      autoFocus={false}
                                                                      className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                      disabled={false}
                                                                      id="fixed-desks-availableFrom"
                                                                      onAnimationStart={[Function]}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      required={false}
                                                                      type="text"
                                                                      value="2020-01-01"
                                                                    />
                                                                    <WithStyles(ForwardRef(InputAdornment))
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(InputAdornment)
                                                                        classes={
                                                                          Object {
                                                                            "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                            "filled": "MuiInputAdornment-filled",
                                                                            "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                            "marginDense": "MuiInputAdornment-marginDense",
                                                                            "positionEnd": "MuiInputAdornment-positionEnd",
                                                                            "positionStart": "MuiInputAdornment-positionStart",
                                                                            "root": "MuiInputAdornment-root",
                                                                          }
                                                                        }
                                                                        position="end"
                                                                      >
                                                                        <div
                                                                          className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                        >
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            onClick={[Function]}
                                                                          >
                                                                            <ForwardRef(IconButton)
                                                                              classes={
                                                                                Object {
                                                                                  "colorInherit": "MuiIconButton-colorInherit",
                                                                                  "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                  "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                  "disabled": "Mui-disabled",
                                                                                  "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                  "edgeStart": "MuiIconButton-edgeStart",
                                                                                  "label": "MuiIconButton-label",
                                                                                  "root": "MuiIconButton-root",
                                                                                  "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                }
                                                                              }
                                                                              onClick={[Function]}
                                                                            >
                                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                                centerRipple={true}
                                                                                className="MuiIconButton-root"
                                                                                disabled={false}
                                                                                focusRipple={true}
                                                                                onClick={[Function]}
                                                                              >
                                                                                <ForwardRef(ButtonBase)
                                                                                  centerRipple={true}
                                                                                  className="MuiIconButton-root"
                                                                                  classes={
                                                                                    Object {
                                                                                      "disabled": "Mui-disabled",
                                                                                      "focusVisible": "Mui-focusVisible",
                                                                                      "root": "MuiButtonBase-root",
                                                                                    }
                                                                                  }
                                                                                  disabled={false}
                                                                                  focusRipple={true}
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <button
                                                                                    className="MuiButtonBase-root MuiIconButton-root"
                                                                                    disabled={false}
                                                                                    onBlur={[Function]}
                                                                                    onClick={[Function]}
                                                                                    onDragLeave={[Function]}
                                                                                    onFocus={[Function]}
                                                                                    onKeyDown={[Function]}
                                                                                    onKeyUp={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseLeave={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                    onTouchEnd={[Function]}
                                                                                    onTouchMove={[Function]}
                                                                                    onTouchStart={[Function]}
                                                                                    tabIndex={0}
                                                                                    type="button"
                                                                                  >
                                                                                    <span
                                                                                      className="MuiIconButton-label"
                                                                                    >
                                                                                      <img
                                                                                        alt="open calendar"
                                                                                        src="calendar.svg"
                                                                                      />
                                                                                    </span>
                                                                                    <NoSsr>
                                                                                      <WithStyles(undefined)
                                                                                        center={true}
                                                                                      >
                                                                                        <ForwardRef(TouchRipple)
                                                                                          center={true}
                                                                                          classes={
                                                                                            Object {
                                                                                              "child": "MuiTouchRipple-child",
                                                                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                              "ripple": "MuiTouchRipple-ripple",
                                                                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                              "root": "MuiTouchRipple-root",
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <span
                                                                                            className="MuiTouchRipple-root"
                                                                                          >
                                                                                            <TransitionGroup
                                                                                              childFactory={[Function]}
                                                                                              component={null}
                                                                                              exit={true}
                                                                                            />
                                                                                          </span>
                                                                                        </ForwardRef(TouchRipple)>
                                                                                      </WithStyles(undefined)>
                                                                                    </NoSsr>
                                                                                  </button>
                                                                                </ForwardRef(ButtonBase)>
                                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                                            </ForwardRef(IconButton)>
                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                        </div>
                                                                      </ForwardRef(InputAdornment)>
                                                                    </WithStyles(ForwardRef(InputAdornment))>
                                                                    <WithStyles(ForwardRef(NotchedOutline))
                                                                      className="MuiOutlinedInput-notchedOutline"
                                                                      labelWidth={0}
                                                                      notched={false}
                                                                    >
                                                                      <ForwardRef(NotchedOutline)
                                                                        className="MuiOutlinedInput-notchedOutline"
                                                                        classes={
                                                                          Object {
                                                                            "legend": "PrivateNotchedOutline-legend-61",
                                                                            "root": "PrivateNotchedOutline-root-60",
                                                                          }
                                                                        }
                                                                        labelWidth={0}
                                                                        notched={false}
                                                                      >
                                                                        <fieldset
                                                                          aria-hidden={true}
                                                                          className="PrivateNotchedOutline-root-60 MuiOutlinedInput-notchedOutline"
                                                                          style={
                                                                            Object {
                                                                              "paddingLeft": 8,
                                                                            }
                                                                          }
                                                                        >
                                                                          <legend
                                                                            className="PrivateNotchedOutline-legend-61"
                                                                            style={
                                                                              Object {
                                                                                "width": 0.01,
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              dangerouslySetInnerHTML={
                                                                                Object {
                                                                                  "__html": "&#8203;",
                                                                                }
                                                                              }
                                                                            />
                                                                          </legend>
                                                                        </fieldset>
                                                                      </ForwardRef(NotchedOutline)>
                                                                    </WithStyles(ForwardRef(NotchedOutline))>
                                                                  </div>
                                                                </ForwardRef(InputBase)>
                                                              </WithStyles(ForwardRef(InputBase))>
                                                            </ForwardRef(OutlinedInput)>
                                                          </WithStyles(ForwardRef(OutlinedInput))>
                                                        </div>
                                                      </ForwardRef(FormControl)>
                                                    </WithStyles(ForwardRef(FormControl))>
                                                  </ForwardRef(TextField)>
                                                </WithStyles(ForwardRef(TextField))>
                                              </Rifm>
                                            </KeyboardDateInput>
                                            <WithStyles(ForwardRef(Popover))
                                              anchorOrigin={
                                                Object {
                                                  "horizontal": "center",
                                                  "vertical": "bottom",
                                                }
                                              }
                                              onClose={[Function]}
                                              open={false}
                                              transformOrigin={
                                                Object {
                                                  "horizontal": "center",
                                                  "vertical": "top",
                                                }
                                              }
                                            >
                                              <ForwardRef(Popover)
                                                anchorOrigin={
                                                  Object {
                                                    "horizontal": "center",
                                                    "vertical": "bottom",
                                                  }
                                                }
                                                classes={
                                                  Object {
                                                    "paper": "MuiPopover-paper",
                                                    "root": "MuiPopover-root",
                                                  }
                                                }
                                                onClose={[Function]}
                                                open={false}
                                                transformOrigin={
                                                  Object {
                                                    "horizontal": "center",
                                                    "vertical": "top",
                                                  }
                                                }
                                              >
                                                <ForwardRef(Modal)
                                                  BackdropProps={
                                                    Object {
                                                      "invisible": true,
                                                    }
                                                  }
                                                  className="MuiPopover-root"
                                                  onClose={[Function]}
                                                  open={false}
                                                />
                                              </ForwardRef(Popover)>
                                            </WithStyles(ForwardRef(Popover))>
                                          </InlineWrapper>
                                        </Wrapper>
                                      </PickerWithState>
                                    </MuiPickersUtilsProvider>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Component>
                          </StyledComponent>
                        </Styled(Component)>
                        <Input
                          data-testid="fixed-desks-min-lease"
                          id="fixed-desks-minLease"
                          label="ONBOARDING_SPACE_FLEX_MINLEASE"
                          onChange={[Function]}
                          type="number"
                          value=""
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "djDvul",
                                    "rules": Array [
                                      "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-htpNat djDvul"
                              >
                                <label
                                  htmlFor="fixed-desks-minLease"
                                >
                                  ONBOARDING_SPACE_FLEX_MINLEASE
                                </label>
                                <styled.input
                                  data-testid="fixed-desks-min-lease"
                                  id="fixed-desks-minLease"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    data-testid="fixed-desks-min-lease"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "aiwDT",
                                          "rules": Array [
                                            "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                            [Function],
                                            ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                            [Function],
                                            ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
  }
",
                                          ],
                                        },
                                        "displayName": "styled.input",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "input",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="fixed-desks-minLease"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="sc-bxivhb aiwDT"
                                      data-testid="fixed-desks-min-lease"
                                      id="fixed-desks-minLease"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="number"
                                      value=""
                                    />
                                  </StyledComponent>
                                </styled.input>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-ifAKCX",
                                          "isStatic": false,
                                          "lastClassName": "hmksNE",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-ifAKCX",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-ifAKCX hmksNE"
                                    />
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Input>
                        <Input
                          data-testid="fixed-desks-price"
                          id="fixed-desks-price"
                          label="ONBOARDING_SPACE_FLEX_PRICE (Kr)"
                          onChange={[Function]}
                          placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                          type="number"
                          value=""
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "djDvul",
                                    "rules": Array [
                                      "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-htpNat djDvul"
                              >
                                <label
                                  htmlFor="fixed-desks-price"
                                >
                                  ONBOARDING_SPACE_FLEX_PRICE (Kr)
                                </label>
                                <styled.input
                                  data-testid="fixed-desks-price"
                                  id="fixed-desks-price"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    data-testid="fixed-desks-price"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bxivhb",
                                          "isStatic": false,
                                          "lastClassName": "aiwDT",
                                          "rules": Array [
                                            "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                            [Function],
                                            ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                            [Function],
                                            ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
  }
",
                                          ],
                                        },
                                        "displayName": "styled.input",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bxivhb",
                                        "target": "input",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="fixed-desks-price"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="sc-bxivhb aiwDT"
                                      data-testid="fixed-desks-price"
                                      id="fixed-desks-price"
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      placeholder="ONBOARDING_PLACEHOLDER_FLEX_PRICE"
                                      type="number"
                                      value=""
                                    />
                                  </StyledComponent>
                                </styled.input>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-ifAKCX",
                                          "isStatic": false,
                                          "lastClassName": "hmksNE",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-ifAKCX",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-ifAKCX hmksNE"
                                    />
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Input>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
            <ServicedOffices
              space={
                Object {
                  "availabilityFixed": 2020-01-01T00:00:00.000Z,
                  "fitout": Array [
                    Object {
                      "amount": 1000,
                      "description": "FitOut1",
                      "name": "FitOut1",
                    },
                  ],
                  "fixedDesks": Object {
                    "availableFrom": 2020-01-01T00:00:00.000Z,
                    "currencyCode": "NOK",
                    "desks": 0,
                    "frequency": "Monthly",
                    "minLease": 0,
                    "price": 0,
                  },
                  "floorPlan": Array [],
                  "hotDesks": Object {
                    "availableFrom": 2020-01-01T00:00:00.000Z,
                    "currencyCode": "NOK",
                    "desks": 0,
                    "frequency": "Monthly",
                    "minLease": 0,
                    "price": 0,
                  },
                  "id": "0",
                  "images": Array [],
                  "months": undefined,
                  "servicedOffices": Array [],
                  "spaceDescription": "",
                  "spaceFloor": undefined,
                  "spaceFloored": "",
                  "spaceHighlights": "",
                  "spaceMatterPort": "",
                  "spaceName": "",
                  "spaceRent": undefined,
                  "spaceServices": undefined,
                  "spaceServicesNotNegotiable": false,
                  "spaceSize": undefined,
                  "spaceSizeCommon": undefined,
                  "status": 1,
                  "type": "FLEX",
                  "use": "",
                }
              }
            >
              <styled.h3>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bdVaJa",
                        "isStatic": false,
                        "lastClassName": "klePfV",
                        "rules": Array [
                          "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                        ],
                      },
                      "displayName": "styled.h3",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bdVaJa",
                      "target": "h3",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <h3
                    className="sc-bdVaJa klePfV"
                  >
                    ONBOARDING_SPACE_FLEX_SERVICED_OFFICES
                  </h3>
                </StyledComponent>
              </styled.h3>
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-hSdWYo",
                        "isStatic": false,
                        "lastClassName": "bdwiQC",
                        "rules": Array [
                          "
  max-width: 516px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  border-radius: 2px;
  background-color: #f4f4f4;
  padding: 20px;
  & > div {
    margin-bottom: 20px;
  }
  & > div:last-child {
    margin-bottom: 0px;
  }
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-hSdWYo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-hSdWYo bdwiQC"
                  >
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-eHgmQL",
                              "isStatic": false,
                              "lastClassName": "eFyeRn",
                              "rules": Array [
                                "
  padding: 10px 15px;
  border: 1px dashed #dddddd;
  background-color: #ffffff;
  flex-grow: 1;
  margin-right: 20px;
  :last-child {
    margin-right: 0;
  }
  max-width: 330px;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-eHgmQL",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-eHgmQL eFyeRn"
                        >
                          <Styled(Styled(Input))
                            id="serviced-offices-desks"
                            label="ONBOARDING_SPACE_SO_PEOPLE"
                            min={1}
                            onChange={[Function]}
                            type="number"
                            value=""
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-hMqMXs",
                                    "isStatic": false,
                                    "lastClassName": "jdGMuo",
                                    "rules": Array [
                                      "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                      "
  width: 178px;
",
                                    ],
                                  },
                                  "displayName": "Styled(Styled(Input))",
                                  "foldedComponentIds": Array [
                                    "sc-eNQAEJ",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-hMqMXs",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              id="serviced-offices-desks"
                              label="ONBOARDING_SPACE_SO_PEOPLE"
                              min={1}
                              onChange={[Function]}
                              type="number"
                              value=""
                            >
                              <Input
                                className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                id="serviced-offices-desks"
                                label="ONBOARDING_SPACE_SO_PEOPLE"
                                min={1}
                                onChange={[Function]}
                                type="number"
                                value=""
                              >
                                <styled.div
                                  className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                >
                                  <StyledComponent
                                    className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-htpNat",
                                          "isStatic": false,
                                          "lastClassName": "djDvul",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-htpNat",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-htpNat djDvul sc-eNQAEJ sc-hMqMXs jdGMuo"
                                    >
                                      <label
                                        htmlFor="serviced-offices-desks"
                                      >
                                        ONBOARDING_SPACE_SO_PEOPLE
                                      </label>
                                      <styled.input
                                        id="serviced-offices-desks"
                                        min={1}
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bxivhb",
                                                "isStatic": false,
                                                "lastClassName": "aiwDT",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-bxivhb",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="serviced-offices-desks"
                                          min={1}
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-bxivhb aiwDT"
                                            id="serviced-offices-desks"
                                            min={1}
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "hmksNE",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-ifAKCX hmksNE"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                            </StyledComponent>
                          </Styled(Styled(Input))>
                          <Styled(Styled(Input))
                            id="serviced-offices-floor"
                            label="ONBOARDING_SPACE_SO_FLOOR"
                            onChange={[Function]}
                            type="number"
                            value=""
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-hMqMXs",
                                    "isStatic": false,
                                    "lastClassName": "jdGMuo",
                                    "rules": Array [
                                      "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                      "
  width: 178px;
",
                                    ],
                                  },
                                  "displayName": "Styled(Styled(Input))",
                                  "foldedComponentIds": Array [
                                    "sc-eNQAEJ",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-hMqMXs",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              id="serviced-offices-floor"
                              label="ONBOARDING_SPACE_SO_FLOOR"
                              onChange={[Function]}
                              type="number"
                              value=""
                            >
                              <Input
                                className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                id="serviced-offices-floor"
                                label="ONBOARDING_SPACE_SO_FLOOR"
                                onChange={[Function]}
                                type="number"
                                value=""
                              >
                                <styled.div
                                  className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                >
                                  <StyledComponent
                                    className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-htpNat",
                                          "isStatic": false,
                                          "lastClassName": "djDvul",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-htpNat",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-htpNat djDvul sc-eNQAEJ sc-hMqMXs jdGMuo"
                                    >
                                      <label
                                        htmlFor="serviced-offices-floor"
                                      >
                                        ONBOARDING_SPACE_SO_FLOOR
                                      </label>
                                      <styled.input
                                        id="serviced-offices-floor"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bxivhb",
                                                "isStatic": false,
                                                "lastClassName": "aiwDT",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-bxivhb",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="serviced-offices-floor"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-bxivhb aiwDT"
                                            id="serviced-offices-floor"
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "hmksNE",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-ifAKCX hmksNE"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                            </StyledComponent>
                          </Styled(Styled(Input))>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cvbbAY",
                                    "isStatic": false,
                                    "lastClassName": "ghMQCz",
                                    "rules": Array [
                                      "
  display: flex;
  & > div {
    margin-right: 20px;
  }
  & > div:last-child {
    margin-right: 0;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cvbbAY",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-cvbbAY ghMQCz"
                              >
                                <Styled(Component)
                                  disablePast={true}
                                  id="serviced-offices-from"
                                  label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                  onChange={[Function]}
                                  value={2015-06-15T22:12:05.000Z}
                                >
                                  <StyledComponent
                                    disablePast={true}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-iwsKbI",
                                          "isStatic": false,
                                          "lastClassName": "bnAzGN",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    color: #404042;
    display: block;
    font-size: 16px;
    font-weight: 400;
    padding-left: 6px;
    padding-bottom: 2px;
    transition: none;
    transform: none;
  }
  .MuiFormControl-root {
    width: 100%;
  }
  .MuiOutlinedInput-adornedEnd {
    border: 1px solid ",
                                            [Function],
                                            ";
    border-radius: 3px;
    padding-right: 0;
    background-color: white;
  }
  .MuiInputAdornment-positionEnd {
    margin-left: 0px;
  }
  .MuiIconButton-root {
    padding-left: 2px;
    :hover {
      background-color: initial;
    }
  }
  input {
    font-size: 16px;
    padding: 6px 6px;
    width: 100%;
    height: 21px;
  }
  fieldset {
    border: none;
  }
  .MuiFormHelperText-root.MuiFormHelperText-contained.Mui-error {
    margin: 2px 0;
    font-size: 14px;
    font-weight: 500;
    color: #db4437;
  }
  .MuiTouchRipple-root {
    display: none;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(Component)",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-iwsKbI",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="serviced-offices-from"
                                    label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                    onChange={[Function]}
                                    value={2015-06-15T22:12:05.000Z}
                                  >
                                    <Component
                                      className="sc-iwsKbI bnAzGN"
                                      disablePast={true}
                                      id="serviced-offices-from"
                                      label="ONBOARDING_SPACE_FLEX_AVAILABILITY"
                                      onChange={[Function]}
                                      value={2015-06-15T22:12:05.000Z}
                                    >
                                      <styled.div
                                        className="sc-iwsKbI bnAzGN"
                                        focusOn={false}
                                      >
                                        <StyledComponent
                                          className="sc-iwsKbI bnAzGN"
                                          focusOn={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-dnqmqq",
                                                "isStatic": false,
                                                "lastClassName": "kuuTPS",
                                                "rules": Array [
                                                  "
  && .MuiOutlinedInput-adornedEnd {
    ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-dnqmqq",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-dnqmqq kuuTPS sc-iwsKbI bnAzGN"
                                          >
                                            <label>
                                              ONBOARDING_SPACE_FLEX_AVAILABILITY
                                            </label>
                                            <MuiPickersUtilsProvider
                                              locale={
                                                Object {
                                                  "code": "en-GB",
                                                  "formatDistance": [Function],
                                                  "formatLong": Object {
                                                    "date": [Function],
                                                    "dateTime": [Function],
                                                    "time": [Function],
                                                  },
                                                  "formatRelative": [Function],
                                                  "localize": Object {
                                                    "day": [Function],
                                                    "dayPeriod": [Function],
                                                    "era": [Function],
                                                    "month": [Function],
                                                    "ordinalNumber": [Function],
                                                    "quarter": [Function],
                                                  },
                                                  "match": Object {
                                                    "day": [Function],
                                                    "dayPeriod": [Function],
                                                    "era": [Function],
                                                    "month": [Function],
                                                    "ordinalNumber": [Function],
                                                    "quarter": [Function],
                                                  },
                                                  "options": Object {
                                                    "firstWeekContainsDate": 4,
                                                    "weekStartsOn": 1,
                                                  },
                                                }
                                              }
                                              utils={[Function]}
                                            >
                                              <PickerWithState
                                                InputLabelProps={
                                                  Object {
                                                    "error": false,
                                                    "shrink": false,
                                                  }
                                                }
                                                allowKeyboardControl={true}
                                                autoOk={true}
                                                disablePast={true}
                                                disableToolbar={true}
                                                format="yyyy-MM-dd"
                                                id="serviced-offices-from"
                                                inputVariant="outlined"
                                                invalidDateMessage="Invalid Date Format"
                                                keyboardIcon={
                                                  <img
                                                    alt="open calendar"
                                                    src="calendar.svg"
                                                  />
                                                }
                                                maxDate={2100-01-01T00:00:00.000Z}
                                                maxDateMessage="Date should not be after maximal date"
                                                minDate={1900-01-01T00:00:00.000Z}
                                                minDateMessage="Date should not be before minimal date"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                openTo="date"
                                                value={2015-06-15T22:12:05.000Z}
                                                variant="inline"
                                                views={
                                                  Array [
                                                    "year",
                                                    "date",
                                                  ]
                                                }
                                              >
                                                <Wrapper
                                                  DateInputProps={
                                                    Object {
                                                      "format": "yyyy-MM-dd",
                                                      "inputValue": "2015-06-15",
                                                      "onChange": [Function],
                                                      "openPicker": [Function],
                                                      "validationError": "",
                                                    }
                                                  }
                                                  InputComponent={[Function]}
                                                  InputLabelProps={
                                                    Object {
                                                      "error": false,
                                                      "shrink": false,
                                                    }
                                                  }
                                                  format="yyyy-MM-dd"
                                                  id="serviced-offices-from"
                                                  inputVariant="outlined"
                                                  keyboardIcon={
                                                    <img
                                                      alt="open calendar"
                                                      src="calendar.svg"
                                                    />
                                                  }
                                                  onAccept={[Function]}
                                                  onBlur={[Function]}
                                                  onClear={[Function]}
                                                  onDismiss={[Function]}
                                                  onFocus={[Function]}
                                                  onSetToday={[Function]}
                                                  open={false}
                                                  variant="inline"
                                                >
                                                  <InlineWrapper
                                                    DateInputProps={
                                                      Object {
                                                        "format": "yyyy-MM-dd",
                                                        "inputValue": "2015-06-15",
                                                        "onChange": [Function],
                                                        "openPicker": [Function],
                                                        "validationError": "",
                                                      }
                                                    }
                                                    InputComponent={[Function]}
                                                    InputLabelProps={
                                                      Object {
                                                        "error": false,
                                                        "shrink": false,
                                                      }
                                                    }
                                                    format="yyyy-MM-dd"
                                                    id="serviced-offices-from"
                                                    inputVariant="outlined"
                                                    keyboardIcon={
                                                      <img
                                                        alt="open calendar"
                                                        src="calendar.svg"
                                                      />
                                                    }
                                                    onAccept={[Function]}
                                                    onBlur={[Function]}
                                                    onClear={[Function]}
                                                    onDismiss={[Function]}
                                                    onFocus={[Function]}
                                                    onSetToday={[Function]}
                                                    open={false}
                                                  >
                                                    <KeyboardDateInput
                                                      InputLabelProps={
                                                        Object {
                                                          "error": false,
                                                          "shrink": false,
                                                        }
                                                      }
                                                      format="yyyy-MM-dd"
                                                      id="serviced-offices-from"
                                                      inputRef={
                                                        Object {
                                                          "current": <input
                                                            aria-invalid="false"
                                                            class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                            id="serviced-offices-from"
                                                            type="text"
                                                            value="2015-06-15"
                                                          />,
                                                        }
                                                      }
                                                      inputValue="2015-06-15"
                                                      inputVariant="outlined"
                                                      keyboardIcon={
                                                        <img
                                                          alt="open calendar"
                                                          src="calendar.svg"
                                                        />
                                                      }
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      openPicker={[Function]}
                                                      validationError=""
                                                    >
                                                      <Rifm
                                                        format={[Function]}
                                                        key="____-__-__"
                                                        onChange={[Function]}
                                                        refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                        value="2015-06-15"
                                                      >
                                                        <WithStyles(ForwardRef(TextField))
                                                          InputLabelProps={
                                                            Object {
                                                              "error": false,
                                                              "shrink": false,
                                                            }
                                                          }
                                                          InputProps={
                                                            Object {
                                                              "endAdornment": <ForwardRef(WithStyles)
                                                                position="end"
                                                              >
                                                                <ForwardRef(WithStyles)
                                                                  onClick={[Function]}
                                                                >
                                                                  <img
                                                                    alt="open calendar"
                                                                    src="calendar.svg"
                                                                  />
                                                                </ForwardRef(WithStyles)>
                                                              </ForwardRef(WithStyles)>,
                                                            }
                                                          }
                                                          error={false}
                                                          helperText=""
                                                          id="serviced-offices-from"
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-invalid="false"
                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                id="serviced-offices-from"
                                                                type="text"
                                                                value="2015-06-15"
                                                              />,
                                                            }
                                                          }
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          value="2015-06-15"
                                                          variant="outlined"
                                                        >
                                                          <ForwardRef(TextField)
                                                            InputLabelProps={
                                                              Object {
                                                                "error": false,
                                                                "shrink": false,
                                                              }
                                                            }
                                                            InputProps={
                                                              Object {
                                                                "endAdornment": <ForwardRef(WithStyles)
                                                                  position="end"
                                                                >
                                                                  <ForwardRef(WithStyles)
                                                                    onClick={[Function]}
                                                                  >
                                                                    <img
                                                                      alt="open calendar"
                                                                      src="calendar.svg"
                                                                    />
                                                                  </ForwardRef(WithStyles)>
                                                                </ForwardRef(WithStyles)>,
                                                              }
                                                            }
                                                            classes={
                                                              Object {
                                                                "root": "MuiTextField-root",
                                                              }
                                                            }
                                                            error={false}
                                                            helperText=""
                                                            id="serviced-offices-from"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                  id="serviced-offices-from"
                                                                  type="text"
                                                                  value="2015-06-15"
                                                                />,
                                                              }
                                                            }
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            value="2015-06-15"
                                                            variant="outlined"
                                                          >
                                                            <WithStyles(ForwardRef(FormControl))
                                                              className="MuiTextField-root"
                                                              color="primary"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={false}
                                                              required={false}
                                                              variant="outlined"
                                                            >
                                                              <ForwardRef(FormControl)
                                                                className="MuiTextField-root"
                                                                classes={
                                                                  Object {
                                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                                    "marginDense": "MuiFormControl-marginDense",
                                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                                    "root": "MuiFormControl-root",
                                                                  }
                                                                }
                                                                color="primary"
                                                                disabled={false}
                                                                error={false}
                                                                fullWidth={false}
                                                                required={false}
                                                                variant="outlined"
                                                              >
                                                                <div
                                                                  className="MuiFormControl-root MuiTextField-root"
                                                                >
                                                                  <WithStyles(ForwardRef(OutlinedInput))
                                                                    autoFocus={false}
                                                                    endAdornment={
                                                                      <ForwardRef(WithStyles)
                                                                        position="end"
                                                                      >
                                                                        <ForwardRef(WithStyles)
                                                                          onClick={[Function]}
                                                                        >
                                                                          <img
                                                                            alt="open calendar"
                                                                            src="calendar.svg"
                                                                          />
                                                                        </ForwardRef(WithStyles)>
                                                                      </ForwardRef(WithStyles)>
                                                                    }
                                                                    fullWidth={false}
                                                                    id="serviced-offices-from"
                                                                    inputRef={
                                                                      Object {
                                                                        "current": <input
                                                                          aria-invalid="false"
                                                                          class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                          id="serviced-offices-from"
                                                                          type="text"
                                                                          value="2015-06-15"
                                                                        />,
                                                                      }
                                                                    }
                                                                    labelWidth={0}
                                                                    multiline={false}
                                                                    notched={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    value="2015-06-15"
                                                                  >
                                                                    <ForwardRef(OutlinedInput)
                                                                      autoFocus={false}
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                          "disabled": "Mui-disabled",
                                                                          "error": "Mui-error",
                                                                          "focused": "Mui-focused",
                                                                          "input": "MuiOutlinedInput-input",
                                                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                          "marginDense": "MuiOutlinedInput-marginDense",
                                                                          "multiline": "MuiOutlinedInput-multiline",
                                                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                          "root": "MuiOutlinedInput-root",
                                                                        }
                                                                      }
                                                                      endAdornment={
                                                                        <ForwardRef(WithStyles)
                                                                          position="end"
                                                                        >
                                                                          <ForwardRef(WithStyles)
                                                                            onClick={[Function]}
                                                                          >
                                                                            <img
                                                                              alt="open calendar"
                                                                              src="calendar.svg"
                                                                            />
                                                                          </ForwardRef(WithStyles)>
                                                                        </ForwardRef(WithStyles)>
                                                                      }
                                                                      fullWidth={false}
                                                                      id="serviced-offices-from"
                                                                      inputRef={
                                                                        Object {
                                                                          "current": <input
                                                                            aria-invalid="false"
                                                                            class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                            id="serviced-offices-from"
                                                                            type="text"
                                                                            value="2015-06-15"
                                                                          />,
                                                                        }
                                                                      }
                                                                      labelWidth={0}
                                                                      multiline={false}
                                                                      notched={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      value="2015-06-15"
                                                                    >
                                                                      <WithStyles(ForwardRef(InputBase))
                                                                        autoFocus={false}
                                                                        classes={
                                                                          Object {
                                                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                            "disabled": "Mui-disabled",
                                                                            "error": "Mui-error",
                                                                            "focused": "Mui-focused",
                                                                            "input": "MuiOutlinedInput-input",
                                                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                            "marginDense": "MuiOutlinedInput-marginDense",
                                                                            "multiline": "MuiOutlinedInput-multiline",
                                                                            "notchedOutline": null,
                                                                            "root": "MuiOutlinedInput-root",
                                                                          }
                                                                        }
                                                                        endAdornment={
                                                                          <ForwardRef(WithStyles)
                                                                            position="end"
                                                                          >
                                                                            <ForwardRef(WithStyles)
                                                                              onClick={[Function]}
                                                                            >
                                                                              <img
                                                                                alt="open calendar"
                                                                                src="calendar.svg"
                                                                              />
                                                                            </ForwardRef(WithStyles)>
                                                                          </ForwardRef(WithStyles)>
                                                                        }
                                                                        fullWidth={false}
                                                                        id="serviced-offices-from"
                                                                        inputComponent="input"
                                                                        inputRef={
                                                                          Object {
                                                                            "current": <input
                                                                              aria-invalid="false"
                                                                              class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                              id="serviced-offices-from"
                                                                              type="text"
                                                                              value="2015-06-15"
                                                                            />,
                                                                          }
                                                                        }
                                                                        multiline={false}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        renderSuffix={[Function]}
                                                                        type="text"
                                                                        value="2015-06-15"
                                                                      >
                                                                        <ForwardRef(InputBase)
                                                                          autoFocus={false}
                                                                          classes={
                                                                            Object {
                                                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                              "disabled": "Mui-disabled Mui-disabled",
                                                                              "error": "Mui-error Mui-error",
                                                                              "focused": "Mui-focused Mui-focused",
                                                                              "formControl": "MuiInputBase-formControl",
                                                                              "fullWidth": "MuiInputBase-fullWidth",
                                                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                            }
                                                                          }
                                                                          endAdornment={
                                                                            <ForwardRef(WithStyles)
                                                                              position="end"
                                                                            >
                                                                              <ForwardRef(WithStyles)
                                                                                onClick={[Function]}
                                                                              >
                                                                                <img
                                                                                  alt="open calendar"
                                                                                  src="calendar.svg"
                                                                                />
                                                                              </ForwardRef(WithStyles)>
                                                                            </ForwardRef(WithStyles)>
                                                                          }
                                                                          fullWidth={false}
                                                                          id="serviced-offices-from"
                                                                          inputComponent="input"
                                                                          inputRef={
                                                                            Object {
                                                                              "current": <input
                                                                                aria-invalid="false"
                                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                                id="serviced-offices-from"
                                                                                type="text"
                                                                                value="2015-06-15"
                                                                              />,
                                                                            }
                                                                          }
                                                                          multiline={false}
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          renderSuffix={[Function]}
                                                                          type="text"
                                                                          value="2015-06-15"
                                                                        >
                                                                          <div
                                                                            className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                            onClick={[Function]}
                                                                          >
                                                                            <input
                                                                              aria-invalid={false}
                                                                              autoFocus={false}
                                                                              className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                              disabled={false}
                                                                              id="serviced-offices-from"
                                                                              onAnimationStart={[Function]}
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              required={false}
                                                                              type="text"
                                                                              value="2015-06-15"
                                                                            />
                                                                            <WithStyles(ForwardRef(InputAdornment))
                                                                              position="end"
                                                                            >
                                                                              <ForwardRef(InputAdornment)
                                                                                classes={
                                                                                  Object {
                                                                                    "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                                    "filled": "MuiInputAdornment-filled",
                                                                                    "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                                    "marginDense": "MuiInputAdornment-marginDense",
                                                                                    "positionEnd": "MuiInputAdornment-positionEnd",
                                                                                    "positionStart": "MuiInputAdornment-positionStart",
                                                                                    "root": "MuiInputAdornment-root",
                                                                                  }
                                                                                }
                                                                                position="end"
                                                                              >
                                                                                <div
                                                                                  className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                                >
                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <ForwardRef(IconButton)
                                                                                      classes={
                                                                                        Object {
                                                                                          "colorInherit": "MuiIconButton-colorInherit",
                                                                                          "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                          "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                          "disabled": "Mui-disabled",
                                                                                          "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                          "edgeStart": "MuiIconButton-edgeStart",
                                                                                          "label": "MuiIconButton-label",
                                                                                          "root": "MuiIconButton-root",
                                                                                          "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                        }
                                                                                      }
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                                        centerRipple={true}
                                                                                        className="MuiIconButton-root"
                                                                                        disabled={false}
                                                                                        focusRipple={true}
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <ForwardRef(ButtonBase)
                                                                                          centerRipple={true}
                                                                                          className="MuiIconButton-root"
                                                                                          classes={
                                                                                            Object {
                                                                                              "disabled": "Mui-disabled",
                                                                                              "focusVisible": "Mui-focusVisible",
                                                                                              "root": "MuiButtonBase-root",
                                                                                            }
                                                                                          }
                                                                                          disabled={false}
                                                                                          focusRipple={true}
                                                                                          onClick={[Function]}
                                                                                        >
                                                                                          <button
                                                                                            className="MuiButtonBase-root MuiIconButton-root"
                                                                                            disabled={false}
                                                                                            onBlur={[Function]}
                                                                                            onClick={[Function]}
                                                                                            onDragLeave={[Function]}
                                                                                            onFocus={[Function]}
                                                                                            onKeyDown={[Function]}
                                                                                            onKeyUp={[Function]}
                                                                                            onMouseDown={[Function]}
                                                                                            onMouseLeave={[Function]}
                                                                                            onMouseUp={[Function]}
                                                                                            onTouchEnd={[Function]}
                                                                                            onTouchMove={[Function]}
                                                                                            onTouchStart={[Function]}
                                                                                            tabIndex={0}
                                                                                            type="button"
                                                                                          >
                                                                                            <span
                                                                                              className="MuiIconButton-label"
                                                                                            >
                                                                                              <img
                                                                                                alt="open calendar"
                                                                                                src="calendar.svg"
                                                                                              />
                                                                                            </span>
                                                                                            <NoSsr>
                                                                                              <WithStyles(undefined)
                                                                                                center={true}
                                                                                              >
                                                                                                <ForwardRef(TouchRipple)
                                                                                                  center={true}
                                                                                                  classes={
                                                                                                    Object {
                                                                                                      "child": "MuiTouchRipple-child",
                                                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                                      "root": "MuiTouchRipple-root",
                                                                                                    }
                                                                                                  }
                                                                                                >
                                                                                                  <span
                                                                                                    className="MuiTouchRipple-root"
                                                                                                  >
                                                                                                    <TransitionGroup
                                                                                                      childFactory={[Function]}
                                                                                                      component={null}
                                                                                                      exit={true}
                                                                                                    />
                                                                                                  </span>
                                                                                                </ForwardRef(TouchRipple)>
                                                                                              </WithStyles(undefined)>
                                                                                            </NoSsr>
                                                                                          </button>
                                                                                        </ForwardRef(ButtonBase)>
                                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                                    </ForwardRef(IconButton)>
                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                </div>
                                                                              </ForwardRef(InputAdornment)>
                                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                                            <WithStyles(ForwardRef(NotchedOutline))
                                                                              className="MuiOutlinedInput-notchedOutline"
                                                                              labelWidth={0}
                                                                              notched={false}
                                                                            >
                                                                              <ForwardRef(NotchedOutline)
                                                                                className="MuiOutlinedInput-notchedOutline"
                                                                                classes={
                                                                                  Object {
                                                                                    "legend": "PrivateNotchedOutline-legend-61",
                                                                                    "root": "PrivateNotchedOutline-root-60",
                                                                                  }
                                                                                }
                                                                                labelWidth={0}
                                                                                notched={false}
                                                                              >
                                                                                <fieldset
                                                                                  aria-hidden={true}
                                                                                  className="PrivateNotchedOutline-root-60 MuiOutlinedInput-notchedOutline"
                                                                                  style={
                                                                                    Object {
                                                                                      "paddingLeft": 8,
                                                                                    }
                                                                                  }
                                                                                >
                                                                                  <legend
                                                                                    className="PrivateNotchedOutline-legend-61"
                                                                                    style={
                                                                                      Object {
                                                                                        "width": 0.01,
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <span
                                                                                      dangerouslySetInnerHTML={
                                                                                        Object {
                                                                                          "__html": "&#8203;",
                                                                                        }
                                                                                      }
                                                                                    />
                                                                                  </legend>
                                                                                </fieldset>
                                                                              </ForwardRef(NotchedOutline)>
                                                                            </WithStyles(ForwardRef(NotchedOutline))>
                                                                          </div>
                                                                        </ForwardRef(InputBase)>
                                                                      </WithStyles(ForwardRef(InputBase))>
                                                                    </ForwardRef(OutlinedInput)>
                                                                  </WithStyles(ForwardRef(OutlinedInput))>
                                                                </div>
                                                              </ForwardRef(FormControl)>
                                                            </WithStyles(ForwardRef(FormControl))>
                                                          </ForwardRef(TextField)>
                                                        </WithStyles(ForwardRef(TextField))>
                                                      </Rifm>
                                                    </KeyboardDateInput>
                                                    <WithStyles(ForwardRef(Popover))
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "bottom",
                                                        }
                                                      }
                                                      onClose={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(Popover)
                                                        anchorOrigin={
                                                          Object {
                                                            "horizontal": "center",
                                                            "vertical": "bottom",
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "paper": "MuiPopover-paper",
                                                            "root": "MuiPopover-root",
                                                          }
                                                        }
                                                        onClose={[Function]}
                                                        open={false}
                                                        transformOrigin={
                                                          Object {
                                                            "horizontal": "center",
                                                            "vertical": "top",
                                                          }
                                                        }
                                                      >
                                                        <ForwardRef(Modal)
                                                          BackdropProps={
                                                            Object {
                                                              "invisible": true,
                                                            }
                                                          }
                                                          className="MuiPopover-root"
                                                          onClose={[Function]}
                                                          open={false}
                                                        />
                                                      </ForwardRef(Popover)>
                                                    </WithStyles(ForwardRef(Popover))>
                                                  </InlineWrapper>
                                                </Wrapper>
                                              </PickerWithState>
                                            </MuiPickersUtilsProvider>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </Component>
                                  </StyledComponent>
                                </Styled(Component)>
                                <Styled(Input)
                                  id="serviced-offices-min-lease"
                                  label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                  min={1}
                                  onChange={[Function]}
                                  type="number"
                                  value=""
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-eNQAEJ",
                                          "isStatic": false,
                                          "lastClassName": "hZElrH",
                                          "rules": Array [
                                            "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(Input)",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-eNQAEJ",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    id="serviced-offices-min-lease"
                                    label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                    min={1}
                                    onChange={[Function]}
                                    type="number"
                                    value=""
                                  >
                                    <Input
                                      className="sc-eNQAEJ hZElrH"
                                      id="serviced-offices-min-lease"
                                      label="ONBOARDING_SPACE_FLEX_MINLEASE"
                                      min={1}
                                      onChange={[Function]}
                                      type="number"
                                      value=""
                                    >
                                      <styled.div
                                        className="sc-eNQAEJ hZElrH"
                                      >
                                        <StyledComponent
                                          className="sc-eNQAEJ hZElrH"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-htpNat",
                                                "isStatic": false,
                                                "lastClassName": "djDvul",
                                                "rules": Array [
                                                  "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-htpNat",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-htpNat djDvul sc-eNQAEJ hZElrH"
                                          >
                                            <label
                                              htmlFor="serviced-offices-min-lease"
                                            >
                                              ONBOARDING_SPACE_FLEX_MINLEASE
                                            </label>
                                            <styled.input
                                              id="serviced-offices-min-lease"
                                              min={1}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value=""
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-bxivhb",
                                                      "isStatic": false,
                                                      "lastClassName": "aiwDT",
                                                      "rules": Array [
                                                        "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                        [Function],
                                                        ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                        [Function],
                                                        ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                        [Function],
                                                        ";
    border: 1px solid ",
                                                        [Function],
                                                        ";
  }
",
                                                      ],
                                                    },
                                                    "displayName": "styled.input",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-bxivhb",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                id="serviced-offices-min-lease"
                                                min={1}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                type="number"
                                                value=""
                                              >
                                                <input
                                                  className="sc-bxivhb aiwDT"
                                                  id="serviced-offices-min-lease"
                                                  min={1}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  type="number"
                                                  value=""
                                                />
                                              </StyledComponent>
                                            </styled.input>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-ifAKCX",
                                                      "isStatic": false,
                                                      "lastClassName": "hmksNE",
                                                      "rules": Array [
                                                        "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-ifAKCX",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-ifAKCX hmksNE"
                                                />
                                              </StyledComponent>
                                            </styled.div>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </Input>
                                  </StyledComponent>
                                </Styled(Input)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <Styled(Styled(Input))
                            id="serviced-offices-price"
                            label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                            min={0}
                            onChange={[Function]}
                            placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                            type="number"
                            value=""
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-hMqMXs",
                                    "isStatic": false,
                                    "lastClassName": "jdGMuo",
                                    "rules": Array [
                                      "
  label {
    overflow: hidden;
    white-space: nowrap;
  }
",
                                      "
  width: 178px;
",
                                    ],
                                  },
                                  "displayName": "Styled(Styled(Input))",
                                  "foldedComponentIds": Array [
                                    "sc-eNQAEJ",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-hMqMXs",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              id="serviced-offices-price"
                              label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                              min={0}
                              onChange={[Function]}
                              placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                              type="number"
                              value=""
                            >
                              <Input
                                className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                id="serviced-offices-price"
                                label="ONBOARDING_SPACE_SO_PRICE (Kr)"
                                min={0}
                                onChange={[Function]}
                                placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                type="number"
                                value=""
                              >
                                <styled.div
                                  className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                >
                                  <StyledComponent
                                    className="sc-eNQAEJ sc-hMqMXs jdGMuo"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-htpNat",
                                          "isStatic": false,
                                          "lastClassName": "djDvul",
                                          "rules": Array [
                                            "
  margin: 10px 0 0 0;
  label {
    display: block;
    padding-left: 6px;
    padding-bottom: 2px;
    color: #404042;
    font-size: 16px;
    font-weight: 400;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-htpNat",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-htpNat djDvul sc-eNQAEJ sc-hMqMXs jdGMuo"
                                    >
                                      <label
                                        htmlFor="serviced-offices-price"
                                      >
                                        ONBOARDING_SPACE_SO_PRICE (Kr)
                                      </label>
                                      <styled.input
                                        id="serviced-offices-price"
                                        min={0}
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                        type="number"
                                        value=""
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bxivhb",
                                                "isStatic": false,
                                                "lastClassName": "aiwDT",
                                                "rules": Array [
                                                  "
  margin-top: 0;
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: ",
                                                  [Function],
                                                  ";
  letter-spacing: -0.2px;
  width: 100%;
  box-sizing: border-box;
  padding: 6px 6px;
  outline: none;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 3px;
  :focus {
    outline: 1px solid ",
                                                  [Function],
                                                  ";
    border: 1px solid ",
                                                  [Function],
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.input",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-bxivhb",
                                              "target": "input",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="serviced-offices-price"
                                          min={0}
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                          type="number"
                                          value=""
                                        >
                                          <input
                                            className="sc-bxivhb aiwDT"
                                            id="serviced-offices-price"
                                            min={0}
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="ONBOARDING_SPACE_SO_PRICE_PLACEHOLDER"
                                            type="number"
                                            value=""
                                          />
                                        </StyledComponent>
                                      </styled.input>
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ifAKCX",
                                                "isStatic": false,
                                                "lastClassName": "hmksNE",
                                                "rules": Array [
                                                  "
  font-size: 14px;
  font-weight: 500;
  color: #db4437;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ifAKCX",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-ifAKCX hmksNE"
                                          />
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Input>
                            </StyledComponent>
                          </Styled(Styled(Input))>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-jWBwVP",
                                    "isStatic": false,
                                    "lastClassName": "aggLm",
                                    "rules": Array [
                                      "
  button {
    margin-right: 10px;
  }
  button:last-child {
    margin-right: 0;
  }
  margin-top: 20px;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-jWBwVP",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-jWBwVP aggLm"
                              >
                                <styled.button
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-cSHVUG",
                                          "isStatic": false,
                                          "lastClassName": "bvaHRH",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                                          ],
                                        },
                                        "displayName": "styled.button",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-cSHVUG",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-cSHVUG bvaHRH"
                                      onClick={[Function]}
                                    >
                                      ONBOARDING_SPACE_SO_SAVE
                                    </button>
                                  </StyledComponent>
                                </styled.button>
                                <Styled(styled.button)
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kEYyzF",
                                          "isStatic": false,
                                          "lastClassName": "enKYHQ",
                                          "rules": Array [
                                            "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                                            "
  color: #6cb9d5;
  background-color: #ffffff;
  box-sizing: border-box;
  min-width: 110px;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-cSHVUG",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-kEYyzF",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-cSHVUG sc-kEYyzF enKYHQ"
                                      onClick={[Function]}
                                    >
                                      ONBOARDING_SPACE_SO_CANCEL
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </styled.div>
            </ServicedOffices>
          </SpaceAvailabilityFlex>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hEsumM",
              "isStatic": false,
              "lastClassName": "bxuiAR",
              "rules": Array [
                "
  margin-bottom: 50px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hEsumM",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-hEsumM bxuiAR"
        >
          <Styled(styled.h3)>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ktHwxA",
                    "isStatic": false,
                    "lastClassName": "kvRFIv",
                    "rules": Array [
                      "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                    ],
                  },
                  "displayName": "Styled(styled.h3)",
                  "foldedComponentIds": Array [
                    "sc-bdVaJa",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-ktHwxA",
                  "target": "h3",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <h3
                className="sc-bdVaJa sc-ktHwxA kvRFIv"
              >
                ONBOARDING_SPACE_PHOTOS
              </h3>
            </StyledComponent>
          </Styled(styled.h3)>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kafWEX",
                    "isStatic": false,
                    "lastClassName": "hIuzBi",
                    "rules": Array [
                      "
  padding: 0 0 20px 0;
  color: #828286
  font-size: 14px;
  font-weight: 400;
  line-height: 18px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kafWEX",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kafWEX hIuzBi"
              >
                ONBOARDING_PHOTOS_INFO
              </div>
            </StyledComponent>
          </styled.div>
          <Styled(Component)
            accept="image/jpeg, image/png"
            isImage={true}
            items={Array []}
            setItems={[Function]}
            setUploaded={[Function]}
          >
            <StyledComponent
              accept="image/jpeg, image/png"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hzDkRC",
                    "isStatic": false,
                    "lastClassName": "kQBdIX",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
",
                    ],
                  },
                  "displayName": "Styled(Component)",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hzDkRC",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isImage={true}
              items={Array []}
              setItems={[Function]}
              setUploaded={[Function]}
            >
              <Component
                accept="image/jpeg, image/png"
                className="sc-hzDkRC kQBdIX"
                isImage={true}
                items={Array []}
                setItems={[Function]}
                setUploaded={[Function]}
              >
                <div
                  className="sc-hzDkRC kQBdIX"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bRBYWo",
                            "isStatic": false,
                            "lastClassName": "pIQHV",
                            "rules": Array [
                              "
  display: inline-block;
  > div {
    border-radius: 4px;
    border: 1px solid #ced4da;
    box-sizing: border-box;
    width: 194px;
    height: 165px;
    :hover {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
    &.isDragging {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bRBYWo",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bRBYWo pIQHV"
                      >
                        <div
                          className=""
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragEnter={[Function]}
                          onDragLeave={[Function]}
                          onDragOver={[Function]}
                          onDrop={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          tabIndex={0}
                        >
                          <input
                            accept="image/jpeg, image/png"
                            autoComplete="off"
                            multiple={true}
                            onChange={[Function]}
                            onClick={[Function]}
                            style={
                              Object {
                                "display": "none",
                              }
                            }
                            tabIndex={-1}
                            type="file"
                          />
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cIShpX",
                                    "isStatic": false,
                                    "lastClassName": "dwjWlz",
                                    "rules": Array [
                                      "
  padding: 20px;
  text-align: center;
  > p {
    font-size: 18px;
    font-weight: 500;
    margin-top: 5px;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cIShpX",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-cIShpX dwjWlz"
                              >
                                <Plus2
                                  size="3em"
                                >
                                  <svg
                                    height="3em"
                                    version="1.1"
                                    viewBox="0 0 34 34"
                                    width="3em"
                                  >
                                    <g
                                      fill="none"
                                      fillRule="evenodd"
                                      id="UI-KIT"
                                      stroke="#6CB9D5"
                                      strokeWidth="1"
                                    >
                                      <g
                                        fill="#6CB9D5"
                                        fillRule="nonzero"
                                        id="icons"
                                        transform="translate(-265.000000, -325.000000)"
                                      >
                                        <path
                                          d="M293.618972,330.351591 C293.150185,329.882803 292.390811,329.882803 291.922136,330.351591 L281.970506,340.303232 L272.018989,330.351703 C271.550202,329.882916 270.790828,329.882916 270.322153,330.351703 C269.853366,330.820491 269.853366,331.579866 270.322153,332.048541 L280.27367,342.00007 L270.322153,351.951599 C269.853366,352.420387 269.853366,353.179762 270.322153,353.648437 C270.55649,353.882775 270.863615,354 271.170627,354 C271.47764,354 271.784652,353.882775 272.019102,353.648437 L281.970506,343.696908 L291.922024,353.648437 C292.156361,353.882775 292.463486,354 292.770498,354 C293.07751,354 293.384523,353.882775 293.618972,353.648437 C294.08776,353.17965 294.08776,352.420274 293.618972,351.951599 L283.667343,342.00007 L293.61886,332.048541 C294.087647,331.579754 294.087647,330.820378 293.618972,330.351591 Z"
                                          id="add"
                                          transform="translate(281.970563, 342.000000) rotate(45.000000) translate(-281.970563, -342.000000) "
                                        />
                                      </g>
                                    </g>
                                  </svg>
                                </Plus2>
                                <p>
                                  ONBOARDING_PHOTOS_ADD
                                  <br />
                                  ONBOARDING_PHOTOS_DRAG
                                </p>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </Component>
            </StyledComponent>
          </Styled(Component)>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hEsumM",
              "isStatic": false,
              "lastClassName": "bxuiAR",
              "rules": Array [
                "
  margin-bottom: 50px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hEsumM",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-hEsumM bxuiAR"
        >
          <Styled(styled.h3)>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ktHwxA",
                    "isStatic": false,
                    "lastClassName": "kvRFIv",
                    "rules": Array [
                      "
  color: #50bbd8;
  line-height: 25px;
  font-size: 22px;
  font-weight: 400;
",
                    ],
                  },
                  "displayName": "Styled(styled.h3)",
                  "foldedComponentIds": Array [
                    "sc-bdVaJa",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-ktHwxA",
                  "target": "h3",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <h3
                className="sc-bdVaJa sc-ktHwxA kvRFIv"
              >
                ONBOARDING_SPACE_FLOORPLAN
              </h3>
            </StyledComponent>
          </Styled(styled.h3)>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kafWEX",
                    "isStatic": false,
                    "lastClassName": "hIuzBi",
                    "rules": Array [
                      "
  padding: 0 0 20px 0;
  color: #828286
  font-size: 14px;
  font-weight: 400;
  line-height: 18px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kafWEX",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kafWEX hIuzBi"
              >
                ONBOARDING_FLOORPLAN_INFO
              </div>
            </StyledComponent>
          </styled.div>
          <Styled(Component)
            accept="image/jpeg, image/png, application/pdf, .bim"
            isImage={true}
            items={Array []}
            setItems={[Function]}
            setUploaded={[Function]}
          >
            <StyledComponent
              accept="image/jpeg, image/png, application/pdf, .bim"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hzDkRC",
                    "isStatic": false,
                    "lastClassName": "kQBdIX",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
",
                    ],
                  },
                  "displayName": "Styled(Component)",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hzDkRC",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isImage={true}
              items={Array []}
              setItems={[Function]}
              setUploaded={[Function]}
            >
              <Component
                accept="image/jpeg, image/png, application/pdf, .bim"
                className="sc-hzDkRC kQBdIX"
                isImage={true}
                items={Array []}
                setItems={[Function]}
                setUploaded={[Function]}
              >
                <div
                  className="sc-hzDkRC kQBdIX"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bRBYWo",
                            "isStatic": false,
                            "lastClassName": "pIQHV",
                            "rules": Array [
                              "
  display: inline-block;
  > div {
    border-radius: 4px;
    border: 1px solid #ced4da;
    box-sizing: border-box;
    width: 194px;
    height: 165px;
    :hover {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
    &.isDragging {
      cursor: pointer;
      border: 1px solid #50bbd8;
      background-color: #ffffff;
      box-shadow: 0 1px 4px 0 #50bbd8;
    }
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bRBYWo",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bRBYWo pIQHV"
                      >
                        <div
                          className=""
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragEnter={[Function]}
                          onDragLeave={[Function]}
                          onDragOver={[Function]}
                          onDrop={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          tabIndex={0}
                        >
                          <input
                            accept="image/jpeg, image/png, application/pdf, .bim"
                            autoComplete="off"
                            multiple={true}
                            onChange={[Function]}
                            onClick={[Function]}
                            style={
                              Object {
                                "display": "none",
                              }
                            }
                            tabIndex={-1}
                            type="file"
                          />
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cIShpX",
                                    "isStatic": false,
                                    "lastClassName": "dwjWlz",
                                    "rules": Array [
                                      "
  padding: 20px;
  text-align: center;
  > p {
    font-size: 18px;
    font-weight: 500;
    margin-top: 5px;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cIShpX",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-cIShpX dwjWlz"
                              >
                                <Plus2
                                  size="3em"
                                >
                                  <svg
                                    height="3em"
                                    version="1.1"
                                    viewBox="0 0 34 34"
                                    width="3em"
                                  >
                                    <g
                                      fill="none"
                                      fillRule="evenodd"
                                      id="UI-KIT"
                                      stroke="#6CB9D5"
                                      strokeWidth="1"
                                    >
                                      <g
                                        fill="#6CB9D5"
                                        fillRule="nonzero"
                                        id="icons"
                                        transform="translate(-265.000000, -325.000000)"
                                      >
                                        <path
                                          d="M293.618972,330.351591 C293.150185,329.882803 292.390811,329.882803 291.922136,330.351591 L281.970506,340.303232 L272.018989,330.351703 C271.550202,329.882916 270.790828,329.882916 270.322153,330.351703 C269.853366,330.820491 269.853366,331.579866 270.322153,332.048541 L280.27367,342.00007 L270.322153,351.951599 C269.853366,352.420387 269.853366,353.179762 270.322153,353.648437 C270.55649,353.882775 270.863615,354 271.170627,354 C271.47764,354 271.784652,353.882775 272.019102,353.648437 L281.970506,343.696908 L291.922024,353.648437 C292.156361,353.882775 292.463486,354 292.770498,354 C293.07751,354 293.384523,353.882775 293.618972,353.648437 C294.08776,353.17965 294.08776,352.420274 293.618972,351.951599 L283.667343,342.00007 L293.61886,332.048541 C294.087647,331.579754 294.087647,330.820378 293.618972,330.351591 Z"
                                          id="add"
                                          transform="translate(281.970563, 342.000000) rotate(45.000000) translate(-281.970563, -342.000000) "
                                        />
                                      </g>
                                    </g>
                                  </svg>
                                </Plus2>
                                <p>
                                  ONBOARDING_FLOORPLAN_ADD
                                  <br />
                                  ONBOARDING_FLOORPLAN_DRAG
                                </p>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </Component>
            </StyledComponent>
          </Styled(Component)>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jbKcbu",
              "isStatic": false,
              "lastClassName": "dnaifA",
              "rules": Array [
                "
  max-width: 516px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jbKcbu",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-jbKcbu dnaifA"
        />
      </StyledComponent>
    </styled.div>
    <NextBack
      back={
        Object {
          "label": "ONBOARDING_BACK",
          "onClick": [Function],
        }
      }
      next={
        Object {
          "label": "ONBOARDING_CONTINUE",
          "onClick": [Function],
        }
      }
    >
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jDwBTQ",
                "isStatic": false,
                "lastClassName": "cVhBzI",
                "rules": Array [
                  "
  overflow: hidden;
  padding-top: 10px;
  margin-bottom: 30px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jDwBTQ",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="sc-jDwBTQ cVhBzI"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gPEVay",
                      "isStatic": false,
                      "lastClassName": "hGWQjL",
                      "rules": Array [
                        "
  box-sizing: border-box;
  height: 1px;
  width: 100%;
  margin: 15px 0 10px 0;
  border: 1px solid #ddddd0;
  border-top: 0;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gPEVay",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gPEVay hGWQjL"
                />
              </StyledComponent>
            </styled.div>
            <Styled(styled.button)
              data-testid="button-back"
              onClick={[Function]}
            >
              <StyledComponent
                data-testid="button-back"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iRbamj",
                      "isStatic": false,
                      "lastClassName": "fVPWlY",
                      "rules": Array [
                        "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                        "
  color: #404042;
  background-color: #ffffff;
  float: left;
",
                      ],
                    },
                    "displayName": "Styled(styled.button)",
                    "foldedComponentIds": Array [
                      "sc-cSHVUG",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-iRbamj",
                    "target": "button",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
              >
                <button
                  className="sc-cSHVUG sc-iRbamj fVPWlY"
                  data-testid="button-back"
                  onClick={[Function]}
                >
                  ONBOARDING_BACK
                </button>
              </StyledComponent>
            </Styled(styled.button)>
            <Styled(styled.button)
              data-testid="button-next"
              id="button-next"
              onClick={[Function]}
            >
              <StyledComponent
                data-testid="button-next"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jlyJG",
                      "isStatic": false,
                      "lastClassName": "hbYvME",
                      "rules": Array [
                        "
  font-size: 14px;
  font-weight: 550;
  line-height: 18px;
  border: none;
  background-color: #6cb9d5;
  color: #ffffff;
  border-radius: 2px;
  cursor: pointer;
  text-transform: uppercase;
  height: 37px;
  padding: 0 20px;
",
                        "
  background-color: ",
                        [Function],
                        ";
  color: #ffffff;
  float: right;
",
                      ],
                    },
                    "displayName": "Styled(styled.button)",
                    "foldedComponentIds": Array [
                      "sc-cSHVUG",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-jlyJG",
                    "target": "button",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                id="button-next"
                onClick={[Function]}
              >
                <button
                  className="sc-cSHVUG sc-jlyJG hbYvME"
                  data-testid="button-next"
                  id="button-next"
                  onClick={[Function]}
                >
                  ONBOARDING_CONTINUE
                </button>
              </StyledComponent>
            </Styled(styled.button)>
          </div>
        </StyledComponent>
      </styled.div>
    </NextBack>
  </SpaceForm>
</Provider>
`;
