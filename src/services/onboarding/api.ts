import { get } from 'lodash'
import axios, { AxiosResponse } from 'axios'
import { SpaceDTO, BuildingDTO } from './types'
import { dataURItoBlob } from 'services/global/util'
import CONFIG from 'config'
import Analytics from 'services/analytics'

export const getBuildingId = async (
  token: string,
  country: string,
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/autogeneratedid?idType=BUILDING&countryCode=${country}`
  const config = { headers: { Authorization: `Bearer ${token}` } }
  const resp: AxiosResponse<string> = await axios.get(url, config)
  return get(resp, 'data')
}

export const getSpaceId = async (
  token: string,
  country: string,
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/autogeneratedid?idType=SPACE&countryCode=${country}`
  const config = { headers: { Authorization: `Bearer ${token}` } }
  const resp: AxiosResponse<string> = await axios.get(url, config)
  return get(resp, 'data')
}

export const putDocument = async (
  item: any,
  spaceId: string,
  token: string,
  fileCategory: 'pictures' | 'brochures' | 'floorplans',
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/${spaceId}/${fileCategory}`
  const formData = new FormData()
  formData.append('file', dataURItoBlob(item.uri), item.name)
  const resp: AxiosResponse<string> = await axios.post(url, formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
      Authorization: `Bearer ${token}`,
    },
  })
  return get(resp, 'data.url')
}

export const createBuilding = async (
  params: BuildingDTO,
  token: string,
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/confirmation/building`
  const config = { headers: { Authorization: `Bearer ${token}` } }
  const resp: AxiosResponse<string> = await axios.post(url, params, config)
  Analytics.event({
    category: 'Onboarding',
    action: 'Add new building request',
    //value: userName
  })
  return get(resp, 'data')
}

export const createSpace = async (
  params: SpaceDTO,
  token: string,
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/confirmation/space`
  const config = { headers: { Authorization: `Bearer ${token}` } }
  const resp: AxiosResponse<string> = await axios.post(url, params, config)
  Analytics.event({
    category: 'Onboarding',
    action: 'Add new Space request',
  })
  return get(resp, 'data')
}

export const updateBuilding = async (
  params: BuildingDTO,
  token: string,
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/update/buildings/${params.id}`
  const config = { headers: { Authorization: `Bearer ${token}` } }
  const resp: AxiosResponse<string> = await axios.post(url, params, config)
  Analytics.event({
    category: 'Onboarding',
    action: 'Update building request',
  })
  return get(resp, 'data')
}

export const updateSpace = async (
  id: string,
  params: SpaceDTO,
  token: string,
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/update/spaces/${id}`
  const config = { headers: { Authorization: `Bearer ${token}` } }
  const resp: AxiosResponse<string> = await axios.post(url, params, config)
  Analytics.event({
    category: 'Onboarding',
    action: 'Update space request',
  })
  return get(resp, 'data')
}

export const deleteSpace = async (
  id: string,
  token: string,
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/delete/spaces/${id}`
  const config = { headers: { Authorization: `Bearer ${token}` } }
  const resp: AxiosResponse<string> = await axios.delete(url, config)
  Analytics.event({
    category: 'Onboarding',
    action: 'Delete space request',
  })
  return get(resp, 'data')
}

export const deleteBuilding = async (
  id: string,
  token: string,
): Promise<string> => {
  const url = `${CONFIG.API_HOST}/onboarding/delete/buildings/${id}`
  const config = { headers: { Authorization: `Bearer ${token}` } }
  const resp: AxiosResponse<string> = await axios.delete(url, config)
  Analytics.event({
    category: 'Onboarding',
    action: 'Delete building request',
  })
  return get(resp, 'data')
}
